
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20001168 	.word	0x20001168

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, stack_data_t *, data, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   4:	000027bd 	.word	0x000027bd
   8:	00006055 	.word	0x00006055
		if (fdtable[fd].obj == NULL) {
   c:	000026d5 	.word	0x000026d5
  10:	000026d5 	.word	0x000026d5
  14:	000026d5 	.word	0x000026d5
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	000026d5 	.word	0x000026d5

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE0(K_SYSCALL_Z_ERRNO, z_errno, int *)
  1c:	000026d5 	.word	0x000026d5
	errno = ENFILE;
  20:	000026d5 	.word	0x000026d5
	return -1;
  24:	000026d5 	.word	0x000026d5

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
  28:	000026d5 	.word	0x000026d5
  2c:	000025cd 	.word	0x000025cd
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	000026d5 	.word	0x000026d5
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	000026d5 	.word	0x000026d5
  38:	00002575 	.word	0x00002575
  3c:	00006045 	.word	0x00006045

00000040 <_irq_vector_table>:
  40:	0000277d 0000277d 0000277d 0000277d     }'..}'..}'..}'..
  50:	0000277d 0000277d 0000277d 0000277d     }'..}'..}'..}'..
  60:	0000277d 0000277d 0000277d 0000277d     }'..}'..}'..}'..
  70:	0000277d 0000277d 0000277d 0000277d     }'..}'..}'..}'..
  80:	0000277d 0000277d 0000277d 0000277d     }'..}'..}'..}'..
  90:	0000277d 0000277d 0000277d 0000277d     }'..}'..}'..}'..
  a0:	0000277d 0000277d 0000277d 0000277d     }'..}'..}'..}'..
  b0:	0000277d 0000277d 0000277d 0000277d     }'..}'..}'..}'..
  c0:	0000277d 0000277d 0000277d 0000277d     }'..}'..}'..}'..
  d0:	0000277d 0000277d 0000277d              }'..}'..}'..

Disassembly of section _TEXT_SECTION_NAME_2:

000000dc <__aeabi_ldivmod>:
      dc:	b97b      	cbnz	r3, fe <__aeabi_ldivmod+0x22>
      de:	b972      	cbnz	r2, fe <__aeabi_ldivmod+0x22>
      e0:	2900      	cmp	r1, #0
      e2:	bfbe      	ittt	lt
      e4:	2000      	movlt	r0, #0
      e6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
      ea:	e006      	blt.n	fa <__aeabi_ldivmod+0x1e>
      ec:	bf08      	it	eq
      ee:	2800      	cmpeq	r0, #0
      f0:	bf1c      	itt	ne
      f2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
      f6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      fa:	f000 b83f 	b.w	17c <__aeabi_idiv0>
      fe:	f1ad 0c08 	sub.w	ip, sp, #8
     102:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     106:	2900      	cmp	r1, #0
     108:	db09      	blt.n	11e <CONFIG_KOBJECT_TEXT_AREA+0x1e>
     10a:	2b00      	cmp	r3, #0
     10c:	db1a      	blt.n	144 <CONFIG_IDLE_STACK_SIZE+0x4>
     10e:	f000 f837 	bl	180 <__udivmoddi4>
     112:	f8dd e004 	ldr.w	lr, [sp, #4]
     116:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     11a:	b004      	add	sp, #16
     11c:	4770      	bx	lr
     11e:	4240      	negs	r0, r0
     120:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     124:	2b00      	cmp	r3, #0
     126:	db1b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     128:	f000 f82a 	bl	180 <__udivmoddi4>
     12c:	f8dd e004 	ldr.w	lr, [sp, #4]
     130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     134:	b004      	add	sp, #16
     136:	4240      	negs	r0, r0
     138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     13c:	4252      	negs	r2, r2
     13e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     142:	4770      	bx	lr
     144:	4252      	negs	r2, r2
     146:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     14a:	f000 f819 	bl	180 <__udivmoddi4>
     14e:	f8dd e004 	ldr.w	lr, [sp, #4]
     152:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     156:	b004      	add	sp, #16
     158:	4240      	negs	r0, r0
     15a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     15e:	4770      	bx	lr
     160:	4252      	negs	r2, r2
     162:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     166:	f000 f80b 	bl	180 <__udivmoddi4>
     16a:	f8dd e004 	ldr.w	lr, [sp, #4]
     16e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     172:	b004      	add	sp, #16
     174:	4252      	negs	r2, r2
     176:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     17a:	4770      	bx	lr

0000017c <__aeabi_idiv0>:
     17c:	4770      	bx	lr
     17e:	bf00      	nop

00000180 <__udivmoddi4>:
     180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     184:	9f09      	ldr	r7, [sp, #36]	; 0x24
     186:	4615      	mov	r5, r2
     188:	4604      	mov	r4, r0
     18a:	468e      	mov	lr, r1
     18c:	461e      	mov	r6, r3
     18e:	2b00      	cmp	r3, #0
     190:	f040 80cc 	bne.w	32c <CONFIG_FLASH_SIZE+0x12c>
     194:	428a      	cmp	r2, r1
     196:	fab2 fc82 	clz	ip, r2
     19a:	d94c      	bls.n	236 <CONFIG_FLASH_SIZE+0x36>
     19c:	f1bc 0f00 	cmp.w	ip, #0
     1a0:	d00b      	beq.n	1ba <__udivmoddi4+0x3a>
     1a2:	f1cc 0820 	rsb	r8, ip, #32
     1a6:	fa01 fe0c 	lsl.w	lr, r1, ip
     1aa:	fa20 f808 	lsr.w	r8, r0, r8
     1ae:	fa02 f50c 	lsl.w	r5, r2, ip
     1b2:	ea48 0e0e 	orr.w	lr, r8, lr
     1b6:	fa00 f40c 	lsl.w	r4, r0, ip
     1ba:	ea4f 4915 	mov.w	r9, r5, lsr #16
     1be:	fa1f f885 	uxth.w	r8, r5
     1c2:	fbbe faf9 	udiv	sl, lr, r9
     1c6:	0c21      	lsrs	r1, r4, #16
     1c8:	fb09 e31a 	mls	r3, r9, sl, lr
     1cc:	fb0a fb08 	mul.w	fp, sl, r8
     1d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     1d4:	459b      	cmp	fp, r3
     1d6:	d92a      	bls.n	22e <CONFIG_FLASH_SIZE+0x2e>
     1d8:	18eb      	adds	r3, r5, r3
     1da:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
     1de:	d204      	bcs.n	1ea <__udivmoddi4+0x6a>
     1e0:	459b      	cmp	fp, r3
     1e2:	d902      	bls.n	1ea <__udivmoddi4+0x6a>
     1e4:	f1aa 0002 	sub.w	r0, sl, #2
     1e8:	442b      	add	r3, r5
     1ea:	eba3 030b 	sub.w	r3, r3, fp
     1ee:	b2a4      	uxth	r4, r4
     1f0:	fbb3 f2f9 	udiv	r2, r3, r9
     1f4:	fb09 3312 	mls	r3, r9, r2, r3
     1f8:	fb02 f808 	mul.w	r8, r2, r8
     1fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     200:	45a0      	cmp	r8, r4
     202:	d916      	bls.n	232 <CONFIG_FLASH_SIZE+0x32>
     204:	192c      	adds	r4, r5, r4
     206:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     20a:	d203      	bcs.n	214 <CONFIG_FLASH_SIZE+0x14>
     20c:	45a0      	cmp	r8, r4
     20e:	d901      	bls.n	214 <CONFIG_FLASH_SIZE+0x14>
     210:	1e93      	subs	r3, r2, #2
     212:	442c      	add	r4, r5
     214:	eba4 0408 	sub.w	r4, r4, r8
     218:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     21c:	b127      	cbz	r7, 228 <CONFIG_FLASH_SIZE+0x28>
     21e:	fa24 f40c 	lsr.w	r4, r4, ip
     222:	2300      	movs	r3, #0
     224:	603c      	str	r4, [r7, #0]
     226:	607b      	str	r3, [r7, #4]
     228:	4631      	mov	r1, r6
     22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     22e:	4650      	mov	r0, sl
     230:	e7db      	b.n	1ea <__udivmoddi4+0x6a>
     232:	4613      	mov	r3, r2
     234:	e7ee      	b.n	214 <CONFIG_FLASH_SIZE+0x14>
     236:	b902      	cbnz	r2, 23a <CONFIG_FLASH_SIZE+0x3a>
     238:	deff      	udf	#255	; 0xff
     23a:	f1bc 0f00 	cmp.w	ip, #0
     23e:	d12e      	bne.n	29e <CONFIG_FLASH_SIZE+0x9e>
     240:	1a8b      	subs	r3, r1, r2
     242:	2601      	movs	r6, #1
     244:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     248:	b2aa      	uxth	r2, r5
     24a:	fbb3 f8fe 	udiv	r8, r3, lr
     24e:	0c21      	lsrs	r1, r4, #16
     250:	fb0e 3318 	mls	r3, lr, r8, r3
     254:	fb08 f902 	mul.w	r9, r8, r2
     258:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     25c:	4599      	cmp	r9, r3
     25e:	d961      	bls.n	324 <CONFIG_FLASH_SIZE+0x124>
     260:	18eb      	adds	r3, r5, r3
     262:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     266:	d204      	bcs.n	272 <CONFIG_FLASH_SIZE+0x72>
     268:	4599      	cmp	r9, r3
     26a:	d902      	bls.n	272 <CONFIG_FLASH_SIZE+0x72>
     26c:	f1a8 0002 	sub.w	r0, r8, #2
     270:	442b      	add	r3, r5
     272:	eba3 0309 	sub.w	r3, r3, r9
     276:	b2a4      	uxth	r4, r4
     278:	fbb3 f1fe 	udiv	r1, r3, lr
     27c:	fb0e 3311 	mls	r3, lr, r1, r3
     280:	434a      	muls	r2, r1
     282:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     286:	42a2      	cmp	r2, r4
     288:	d94e      	bls.n	328 <CONFIG_FLASH_SIZE+0x128>
     28a:	192c      	adds	r4, r5, r4
     28c:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
     290:	d203      	bcs.n	29a <CONFIG_FLASH_SIZE+0x9a>
     292:	42a2      	cmp	r2, r4
     294:	d901      	bls.n	29a <CONFIG_FLASH_SIZE+0x9a>
     296:	1e8b      	subs	r3, r1, #2
     298:	442c      	add	r4, r5
     29a:	1aa4      	subs	r4, r4, r2
     29c:	e7bc      	b.n	218 <CONFIG_FLASH_SIZE+0x18>
     29e:	f1cc 0e20 	rsb	lr, ip, #32
     2a2:	fa02 f50c 	lsl.w	r5, r2, ip
     2a6:	fa21 f90e 	lsr.w	r9, r1, lr
     2aa:	fa01 f30c 	lsl.w	r3, r1, ip
     2ae:	fa20 fe0e 	lsr.w	lr, r0, lr
     2b2:	ea4e 0303 	orr.w	r3, lr, r3
     2b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
     2ba:	fa00 f40c 	lsl.w	r4, r0, ip
     2be:	fbb9 f1f8 	udiv	r1, r9, r8
     2c2:	fa1f fe85 	uxth.w	lr, r5
     2c6:	fb08 9211 	mls	r2, r8, r1, r9
     2ca:	0c18      	lsrs	r0, r3, #16
     2cc:	fb01 f60e 	mul.w	r6, r1, lr
     2d0:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
     2d4:	4296      	cmp	r6, r2
     2d6:	d921      	bls.n	31c <CONFIG_FLASH_SIZE+0x11c>
     2d8:	18aa      	adds	r2, r5, r2
     2da:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     2de:	d203      	bcs.n	2e8 <CONFIG_FLASH_SIZE+0xe8>
     2e0:	4296      	cmp	r6, r2
     2e2:	d901      	bls.n	2e8 <CONFIG_FLASH_SIZE+0xe8>
     2e4:	1e88      	subs	r0, r1, #2
     2e6:	442a      	add	r2, r5
     2e8:	1b92      	subs	r2, r2, r6
     2ea:	b29b      	uxth	r3, r3
     2ec:	fbb2 f9f8 	udiv	r9, r2, r8
     2f0:	fb08 2219 	mls	r2, r8, r9, r2
     2f4:	fb09 fe0e 	mul.w	lr, r9, lr
     2f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
     2fc:	459e      	cmp	lr, r3
     2fe:	d90f      	bls.n	320 <CONFIG_FLASH_SIZE+0x120>
     300:	18eb      	adds	r3, r5, r3
     302:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
     306:	d204      	bcs.n	312 <CONFIG_FLASH_SIZE+0x112>
     308:	459e      	cmp	lr, r3
     30a:	d902      	bls.n	312 <CONFIG_FLASH_SIZE+0x112>
     30c:	f1a9 0602 	sub.w	r6, r9, #2
     310:	442b      	add	r3, r5
     312:	eba3 030e 	sub.w	r3, r3, lr
     316:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     31a:	e793      	b.n	244 <CONFIG_FLASH_SIZE+0x44>
     31c:	4608      	mov	r0, r1
     31e:	e7e3      	b.n	2e8 <CONFIG_FLASH_SIZE+0xe8>
     320:	464e      	mov	r6, r9
     322:	e7f6      	b.n	312 <CONFIG_FLASH_SIZE+0x112>
     324:	4640      	mov	r0, r8
     326:	e7a4      	b.n	272 <CONFIG_FLASH_SIZE+0x72>
     328:	460b      	mov	r3, r1
     32a:	e7b6      	b.n	29a <CONFIG_FLASH_SIZE+0x9a>
     32c:	428b      	cmp	r3, r1
     32e:	d905      	bls.n	33c <CONFIG_FLASH_SIZE+0x13c>
     330:	b10f      	cbz	r7, 336 <CONFIG_FLASH_SIZE+0x136>
     332:	e9c7 0100 	strd	r0, r1, [r7]
     336:	2600      	movs	r6, #0
     338:	4630      	mov	r0, r6
     33a:	e775      	b.n	228 <CONFIG_FLASH_SIZE+0x28>
     33c:	fab3 fc83 	clz	ip, r3
     340:	f1bc 0f00 	cmp.w	ip, #0
     344:	d10f      	bne.n	366 <CONFIG_FLASH_SIZE+0x166>
     346:	428b      	cmp	r3, r1
     348:	d301      	bcc.n	34e <CONFIG_FLASH_SIZE+0x14e>
     34a:	4282      	cmp	r2, r0
     34c:	d809      	bhi.n	362 <CONFIG_FLASH_SIZE+0x162>
     34e:	1a84      	subs	r4, r0, r2
     350:	eb61 0e03 	sbc.w	lr, r1, r3
     354:	2001      	movs	r0, #1
     356:	2f00      	cmp	r7, #0
     358:	d06a      	beq.n	430 <CONFIG_MAIN_STACK_SIZE+0x30>
     35a:	e9c7 4e00 	strd	r4, lr, [r7]
     35e:	2600      	movs	r6, #0
     360:	e762      	b.n	228 <CONFIG_FLASH_SIZE+0x28>
     362:	4660      	mov	r0, ip
     364:	e7f7      	b.n	356 <CONFIG_FLASH_SIZE+0x156>
     366:	f1cc 0e20 	rsb	lr, ip, #32
     36a:	fa03 f30c 	lsl.w	r3, r3, ip
     36e:	fa22 f50e 	lsr.w	r5, r2, lr
     372:	fa21 f40e 	lsr.w	r4, r1, lr
     376:	431d      	orrs	r5, r3
     378:	fa01 f30c 	lsl.w	r3, r1, ip
     37c:	fa20 f10e 	lsr.w	r1, r0, lr
     380:	430b      	orrs	r3, r1
     382:	ea4f 4a15 	mov.w	sl, r5, lsr #16
     386:	fa00 f60c 	lsl.w	r6, r0, ip
     38a:	fbb4 f9fa 	udiv	r9, r4, sl
     38e:	fa1f f885 	uxth.w	r8, r5
     392:	fb0a 4019 	mls	r0, sl, r9, r4
     396:	0c1c      	lsrs	r4, r3, #16
     398:	fb09 f108 	mul.w	r1, r9, r8
     39c:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
     3a0:	42a1      	cmp	r1, r4
     3a2:	fa02 f20c 	lsl.w	r2, r2, ip
     3a6:	d93f      	bls.n	428 <CONFIG_MAIN_STACK_SIZE+0x28>
     3a8:	192c      	adds	r4, r5, r4
     3aa:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     3ae:	d204      	bcs.n	3ba <CONFIG_FLASH_SIZE+0x1ba>
     3b0:	42a1      	cmp	r1, r4
     3b2:	d902      	bls.n	3ba <CONFIG_FLASH_SIZE+0x1ba>
     3b4:	f1a9 0002 	sub.w	r0, r9, #2
     3b8:	442c      	add	r4, r5
     3ba:	1a64      	subs	r4, r4, r1
     3bc:	b29b      	uxth	r3, r3
     3be:	fbb4 f9fa 	udiv	r9, r4, sl
     3c2:	fb0a 4419 	mls	r4, sl, r9, r4
     3c6:	fb09 f808 	mul.w	r8, r9, r8
     3ca:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
     3ce:	4588      	cmp	r8, r1
     3d0:	d92c      	bls.n	42c <CONFIG_MAIN_STACK_SIZE+0x2c>
     3d2:	1869      	adds	r1, r5, r1
     3d4:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
     3d8:	d204      	bcs.n	3e4 <CONFIG_FLASH_SIZE+0x1e4>
     3da:	4588      	cmp	r8, r1
     3dc:	d902      	bls.n	3e4 <CONFIG_FLASH_SIZE+0x1e4>
     3de:	f1a9 0302 	sub.w	r3, r9, #2
     3e2:	4429      	add	r1, r5
     3e4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3e8:	eba1 0108 	sub.w	r1, r1, r8
     3ec:	fba0 8902 	umull	r8, r9, r0, r2
     3f0:	4549      	cmp	r1, r9
     3f2:	46c2      	mov	sl, r8
     3f4:	464c      	mov	r4, r9
     3f6:	d302      	bcc.n	3fe <CONFIG_FLASH_SIZE+0x1fe>
     3f8:	d106      	bne.n	408 <CONFIG_MAIN_STACK_SIZE+0x8>
     3fa:	4546      	cmp	r6, r8
     3fc:	d204      	bcs.n	408 <CONFIG_MAIN_STACK_SIZE+0x8>
     3fe:	ebb8 0a02 	subs.w	sl, r8, r2
     402:	eb69 0405 	sbc.w	r4, r9, r5
     406:	3801      	subs	r0, #1
     408:	b197      	cbz	r7, 430 <CONFIG_MAIN_STACK_SIZE+0x30>
     40a:	ebb6 030a 	subs.w	r3, r6, sl
     40e:	eb61 0604 	sbc.w	r6, r1, r4
     412:	fa06 fe0e 	lsl.w	lr, r6, lr
     416:	fa23 f30c 	lsr.w	r3, r3, ip
     41a:	ea4e 0303 	orr.w	r3, lr, r3
     41e:	fa26 f60c 	lsr.w	r6, r6, ip
     422:	e9c7 3600 	strd	r3, r6, [r7]
     426:	e79a      	b.n	35e <CONFIG_FLASH_SIZE+0x15e>
     428:	4648      	mov	r0, r9
     42a:	e7c6      	b.n	3ba <CONFIG_FLASH_SIZE+0x1ba>
     42c:	464b      	mov	r3, r9
     42e:	e7d9      	b.n	3e4 <CONFIG_FLASH_SIZE+0x1e4>
     430:	463e      	mov	r6, r7
     432:	e6f9      	b.n	228 <CONFIG_FLASH_SIZE+0x28>

00000434 <output_open>:
#include "output.h"
#include <gpio.h>

int output_open(output_t *out, char *dev_label) {
     434:	b510      	push	{r4, lr}
     436:	4604      	mov	r4, r0
    out->dev_label = dev_label;
     438:	6041      	str	r1, [r0, #4]

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
     43a:	4608      	mov	r0, r1
     43c:	f003 fc6a 	bl	3d14 <z_impl_device_get_binding>
    out->device = device_get_binding(out->dev_label);
     440:	6020      	str	r0, [r4, #0]
    if(out->device == NULL){
     442:	b920      	cbnz	r0, 44e <output_open+0x1a>
      printk("Error: Device not found or cannot be used");
     444:	4804      	ldr	r0, [pc, #16]	; (458 <output_open+0x24>)
     446:	f004 fde5 	bl	5014 <printk>
      return 1;
     44a:	2001      	movs	r0, #1
    }
    printk("Returning from output_open\n");
    return 0;
}
     44c:	bd10      	pop	{r4, pc}
    printk("Returning from output_open\n");
     44e:	4803      	ldr	r0, [pc, #12]	; (45c <output_open+0x28>)
     450:	f004 fde0 	bl	5014 <printk>
    return 0;
     454:	2000      	movs	r0, #0
     456:	e7f9      	b.n	44c <output_open+0x18>
     458:	0000704c 	.word	0x0000704c
     45c:	00007076 	.word	0x00007076

00000460 <output_configure>:

int output_configure(output_t *out, u32_t pin, int flags) {
     460:	b510      	push	{r4, lr}
    out->pin = pin;
     462:	6081      	str	r1, [r0, #8]
    int status = gpio_pin_configure(out->device, out->pin, flags);
     464:	6800      	ldr	r0, [r0, #0]
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
     466:	6843      	ldr	r3, [r0, #4]
     468:	681c      	ldr	r4, [r3, #0]
     46a:	4613      	mov	r3, r2
     46c:	460a      	mov	r2, r1
     46e:	2100      	movs	r1, #0
     470:	47a0      	blx	r4
    if(status < 0){
     472:	2800      	cmp	r0, #0
     474:	da02      	bge.n	47c <output_configure+0x1c>
      printk("Error: configure pin error");
     476:	4804      	ldr	r0, [pc, #16]	; (488 <output_configure+0x28>)
     478:	f004 fdcc 	bl	5014 <printk>
    }
    printk("Returning from output_configure\n");
     47c:	4803      	ldr	r0, [pc, #12]	; (48c <output_configure+0x2c>)
     47e:	f004 fdc9 	bl	5014 <printk>
    return 0;
}
     482:	2000      	movs	r0, #0
     484:	bd10      	pop	{r4, pc}
     486:	bf00      	nop
     488:	00007010 	.word	0x00007010
     48c:	0000702b 	.word	0x0000702b

00000490 <output_set>:

int output_set(output_t *out, u8_t value) {
     490:	4602      	mov	r2, r0
     492:	b510      	push	{r4, lr}
    out->state = value;
     494:	7311      	strb	r1, [r2, #12]
    gpio_pin_write(out->device, out->pin, out->state);
     496:	6800      	ldr	r0, [r0, #0]
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
     498:	6892      	ldr	r2, [r2, #8]
int output_set(output_t *out, u8_t value) {
     49a:	460b      	mov	r3, r1
     49c:	6841      	ldr	r1, [r0, #4]
     49e:	684c      	ldr	r4, [r1, #4]
     4a0:	2100      	movs	r1, #0
     4a2:	47a0      	blx	r4
    printk("Returning from output_set\n");
     4a4:	4802      	ldr	r0, [pc, #8]	; (4b0 <output_set+0x20>)
     4a6:	f004 fdb5 	bl	5014 <printk>
    return 0;
}
     4aa:	2000      	movs	r0, #0
     4ac:	bd10      	pop	{r4, pc}
     4ae:	bf00      	nop
     4b0:	00007092 	.word	0x00007092

000004b4 <motors_configure>:



output_t motor0, motor1;

void motors_configure(){
     4b4:	b570      	push	{r4, r5, r6, lr}
  output_open(&motor0, DT_GPIO_KEYS_MOTOR_0_GPIO_CONTROLLER);
     4b6:	4e0b      	ldr	r6, [pc, #44]	; (4e4 <motors_configure+0x30>)
     4b8:	4d0b      	ldr	r5, [pc, #44]	; (4e8 <motors_configure+0x34>)
  output_open(&motor1, DT_GPIO_KEYS_MOTOR_1_GPIO_CONTROLLER);
     4ba:	4c0c      	ldr	r4, [pc, #48]	; (4ec <motors_configure+0x38>)
  output_open(&motor0, DT_GPIO_KEYS_MOTOR_0_GPIO_CONTROLLER);
     4bc:	4631      	mov	r1, r6
     4be:	4628      	mov	r0, r5
     4c0:	f7ff ffb8 	bl	434 <output_open>
  output_open(&motor1, DT_GPIO_KEYS_MOTOR_1_GPIO_CONTROLLER);
     4c4:	4631      	mov	r1, r6
     4c6:	4620      	mov	r0, r4
     4c8:	f7ff ffb4 	bl	434 <output_open>
  output_configure(&motor0, DT_GPIO_KEYS_MOTOR_0_GPIO_PIN, GPIO_DIR_OUT);
     4cc:	2201      	movs	r2, #1
     4ce:	2112      	movs	r1, #18
     4d0:	4628      	mov	r0, r5
     4d2:	f7ff ffc5 	bl	460 <output_configure>
  output_configure(&motor1, DT_GPIO_KEYS_MOTOR_1_GPIO_PIN, GPIO_DIR_OUT);
     4d6:	4620      	mov	r0, r4
     4d8:	2201      	movs	r2, #1
     4da:	2113      	movs	r1, #19

}
     4dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  output_configure(&motor1, DT_GPIO_KEYS_MOTOR_1_GPIO_PIN, GPIO_DIR_OUT);
     4e0:	f7ff bfbe 	b.w	460 <output_configure>
     4e4:	000070ad 	.word	0x000070ad
     4e8:	20000008 	.word	0x20000008
     4ec:	20000018 	.word	0x20000018

000004f0 <set_motor>:

void set_motor(char motor, u8_t value){
  switch (motor) {
     4f0:	2830      	cmp	r0, #48	; 0x30
     4f2:	d004      	beq.n	4fe <set_motor+0xe>
     4f4:	2831      	cmp	r0, #49	; 0x31
     4f6:	d005      	beq.n	504 <set_motor+0x14>
      break;
    case '1':
      output_set(&motor1, value);
      break;
    default:
      printk("Value of set motor is incorret");
     4f8:	4803      	ldr	r0, [pc, #12]	; (508 <set_motor+0x18>)
     4fa:	f004 bd8b 	b.w	5014 <printk>
      output_set(&motor0, value);
     4fe:	4803      	ldr	r0, [pc, #12]	; (50c <set_motor+0x1c>)
      output_set(&motor1, value);
     500:	f7ff bfc6 	b.w	490 <output_set>
     504:	4802      	ldr	r0, [pc, #8]	; (510 <set_motor+0x20>)
     506:	e7fb      	b.n	500 <set_motor+0x10>
     508:	000070b4 	.word	0x000070b4
     50c:	20000008 	.word	0x20000008
     510:	20000018 	.word	0x20000018

00000514 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     514:	680b      	ldr	r3, [r1, #0]
     516:	3301      	adds	r3, #1
     518:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     51a:	4b01      	ldr	r3, [pc, #4]	; (520 <char_out+0xc>)
     51c:	681b      	ldr	r3, [r3, #0]
     51e:	4718      	bx	r3
     520:	20001ca8 	.word	0x20001ca8

00000524 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     528:	b085      	sub	sp, #20
     52a:	469b      	mov	fp, r3
     52c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     52e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 5b8 <_printk_dec_ulong+0x94>
     532:	2c01      	cmp	r4, #1
     534:	bfb8      	it	lt
     536:	2401      	movlt	r4, #1
     538:	2b01      	cmp	r3, #1
     53a:	bf0c      	ite	eq
     53c:	2330      	moveq	r3, #48	; 0x30
     53e:	2320      	movne	r3, #32
     540:	4616      	mov	r6, r2
     542:	4682      	mov	sl, r0
     544:	4688      	mov	r8, r1
     546:	9302      	str	r3, [sp, #8]
     548:	2501      	movs	r5, #1
     54a:	270a      	movs	r7, #10
     54c:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     54e:	fbb6 f3f9 	udiv	r3, r6, r9
     552:	9301      	str	r3, [sp, #4]
     554:	b90a      	cbnz	r2, 55a <_printk_dec_ulong+0x36>
     556:	45b1      	cmp	r9, r6
     558:	d81d      	bhi.n	596 <_printk_dec_ulong+0x72>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     55a:	9b01      	ldr	r3, [sp, #4]
     55c:	4641      	mov	r1, r8
     55e:	f103 0030 	add.w	r0, r3, #48	; 0x30
     562:	47d0      	blx	sl
			digits++;
     564:	3501      	adds	r5, #1
			found_largest_digit = 1;
     566:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     568:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     56a:	3f01      	subs	r7, #1
	while (pos >= 10) {
     56c:	2f01      	cmp	r7, #1
		remainder %= pos;
     56e:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
     572:	f04f 030a 	mov.w	r3, #10
     576:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     57a:	d1e8      	bne.n	54e <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
     57c:	4641      	mov	r1, r8
     57e:	f106 0030 	add.w	r0, r6, #48	; 0x30
     582:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
     584:	f1bb 0f03 	cmp.w	fp, #3
     588:	d102      	bne.n	590 <_printk_dec_ulong+0x6c>
		remaining = min_width - digits;
     58a:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
     58c:	2c00      	cmp	r4, #0
     58e:	dc0e      	bgt.n	5ae <_printk_dec_ulong+0x8a>
			out(' ', ctx);
		}
	}
}
     590:	b005      	add	sp, #20
     592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     596:	42bc      	cmp	r4, r7
     598:	dbe6      	blt.n	568 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     59a:	f1bb 0f02 	cmp.w	fp, #2
     59e:	d8e3      	bhi.n	568 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     5a0:	4641      	mov	r1, r8
     5a2:	9802      	ldr	r0, [sp, #8]
     5a4:	9203      	str	r2, [sp, #12]
			digits++;
     5a6:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     5a8:	47d0      	blx	sl
			digits++;
     5aa:	9a03      	ldr	r2, [sp, #12]
     5ac:	e7dc      	b.n	568 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     5ae:	4641      	mov	r1, r8
     5b0:	2020      	movs	r0, #32
     5b2:	47d0      	blx	sl
     5b4:	3c01      	subs	r4, #1
     5b6:	e7e9      	b.n	58c <_printk_dec_ulong+0x68>
     5b8:	3b9aca00 	.word	0x3b9aca00

000005bc <__printk_hook_install>:
	_char_out = fn;
     5bc:	4b01      	ldr	r3, [pc, #4]	; (5c4 <__printk_hook_install+0x8>)
     5be:	6018      	str	r0, [r3, #0]
}
     5c0:	4770      	bx	lr
     5c2:	bf00      	nop
     5c4:	20001ca8 	.word	0x20001ca8

000005c8 <vprintk>:
{
     5c8:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
     5ca:	2300      	movs	r3, #0
     5cc:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
     5ce:	4602      	mov	r2, r0
     5d0:	460b      	mov	r3, r1
     5d2:	4803      	ldr	r0, [pc, #12]	; (5e0 <vprintk+0x18>)
     5d4:	a901      	add	r1, sp, #4
     5d6:	f004 fbad 	bl	4d34 <z_vprintk>
}
     5da:	b003      	add	sp, #12
     5dc:	f85d fb04 	ldr.w	pc, [sp], #4
     5e0:	00000515 	.word	0x00000515

000005e4 <nordicsemi_nrf52_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     5e4:	f04f 0320 	mov.w	r3, #32
     5e8:	f3ef 8211 	mrs	r2, BASEPRI
     5ec:	f383 8811 	msr	BASEPRI, r3
     5f0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     5f4:	4906      	ldr	r1, [pc, #24]	; (610 <nordicsemi_nrf52_init+0x2c>)
     5f6:	2301      	movs	r3, #1
     5f8:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
     5fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     600:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     604:	f382 8811 	msr	BASEPRI, r2
     608:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     60c:	2000      	movs	r0, #0
     60e:	4770      	bx	lr
     610:	4001e000 	.word	0x4001e000

00000614 <z_arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

__STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     614:	b120      	cbz	r0, 620 <z_arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     616:	4b03      	ldr	r3, [pc, #12]	; (624 <z_arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
     618:	0180      	lsls	r0, r0, #6
     61a:	f043 0301 	orr.w	r3, r3, #1
     61e:	4718      	bx	r3

void z_arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     620:	4770      	bx	lr
     622:	bf00      	nop
     624:	00006bd0 	.word	0x00006bd0

00000628 <errata_108>:
}


static bool errata_12(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     628:	4b0c      	ldr	r3, [pc, #48]	; (65c <errata_108+0x34>)
     62a:	781b      	ldrb	r3, [r3, #0]
     62c:	2b06      	cmp	r3, #6
     62e:	d110      	bne.n	652 <errata_108+0x2a>
     630:	4b0b      	ldr	r3, [pc, #44]	; (660 <errata_108+0x38>)
     632:	681b      	ldr	r3, [r3, #0]
     634:	071a      	lsls	r2, r3, #28
     636:	d10c      	bne.n	652 <errata_108+0x2a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <errata_108+0x3c>)
     63a:	6818      	ldr	r0, [r3, #0]
     63c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
     640:	2b30      	cmp	r3, #48	; 0x30
     642:	d008      	beq.n	656 <errata_108+0x2e>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     644:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
     648:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
     64c:	4258      	negs	r0, r3
     64e:	4158      	adcs	r0, r3
     650:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     652:	2000      	movs	r0, #0
     654:	4770      	bx	lr
            return true;
     656:	2001      	movs	r0, #1
}
     658:	4770      	bx	lr
     65a:	bf00      	nop
     65c:	f0000fe0 	.word	0xf0000fe0
     660:	f0000fe4 	.word	0xf0000fe4
     664:	f0000fe8 	.word	0xf0000fe8

00000668 <errata_16>:

static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     668:	4b09      	ldr	r3, [pc, #36]	; (690 <errata_16+0x28>)
     66a:	781b      	ldrb	r3, [r3, #0]
     66c:	2b06      	cmp	r3, #6
     66e:	d10c      	bne.n	68a <errata_16+0x22>
     670:	4b08      	ldr	r3, [pc, #32]	; (694 <errata_16+0x2c>)
     672:	681b      	ldr	r3, [r3, #0]
     674:	071a      	lsls	r2, r3, #28
     676:	d108      	bne.n	68a <errata_16+0x22>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     678:	4b07      	ldr	r3, [pc, #28]	; (698 <errata_16+0x30>)
     67a:	6818      	ldr	r0, [r3, #0]
     67c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
     680:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     684:	4258      	negs	r0, r3
     686:	4158      	adcs	r0, r3
     688:	4770      	bx	lr
            return true;
        }
    }

    return false;
     68a:	2000      	movs	r0, #0
}
     68c:	4770      	bx	lr
     68e:	bf00      	nop
     690:	f0000fe0 	.word	0xf0000fe0
     694:	f0000fe4 	.word	0xf0000fe4
     698:	f0000fe8 	.word	0xf0000fe8

0000069c <SystemInit>:
{
     69c:	b508      	push	{r3, lr}
    if (errata_12()){
     69e:	f7ff ffc3 	bl	628 <errata_108>
     6a2:	b128      	cbz	r0, 6b0 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
     6a4:	4b78      	ldr	r3, [pc, #480]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     6a6:	4a79      	ldr	r2, [pc, #484]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     6a8:	681b      	ldr	r3, [r3, #0]
     6aa:	f3c3 2304 	ubfx	r3, r3, #8, #5
     6ae:	6013      	str	r3, [r2, #0]
    if (errata_16()){
     6b0:	f7ff ffda 	bl	668 <errata_16>
     6b4:	b110      	cbz	r0, 6bc <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
     6b6:	4b76      	ldr	r3, [pc, #472]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     6b8:	4a76      	ldr	r2, [pc, #472]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     6ba:	601a      	str	r2, [r3, #0]
    if (errata_31()){
     6bc:	f7ff ffb4 	bl	628 <errata_108>
     6c0:	b128      	cbz	r0, 6ce <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
     6c2:	4b75      	ldr	r3, [pc, #468]	; (898 <CONFIG_ISR_STACK_SIZE+0x98>)
     6c4:	4a75      	ldr	r2, [pc, #468]	; (89c <CONFIG_ISR_STACK_SIZE+0x9c>)
     6c6:	681b      	ldr	r3, [r3, #0]
     6c8:	f3c3 3342 	ubfx	r3, r3, #13, #3
     6cc:	6013      	str	r3, [r2, #0]
    if (errata_32()){
     6ce:	f7ff ffcb 	bl	668 <errata_16>
     6d2:	b120      	cbz	r0, 6de <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     6d4:	4a72      	ldr	r2, [pc, #456]	; (8a0 <CONFIG_ISR_STACK_SIZE+0xa0>)
     6d6:	68d3      	ldr	r3, [r2, #12]
     6d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     6dc:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
     6de:	f7ff ffa3 	bl	628 <errata_108>
     6e2:	b140      	cbz	r0, 6f6 <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
     6e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     6e8:	2200      	movs	r2, #0
     6ea:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
     6ee:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
     6f2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
     6f6:	f7ff ffb7 	bl	668 <errata_16>
     6fa:	b110      	cbz	r0, 702 <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
     6fc:	4b69      	ldr	r3, [pc, #420]	; (8a4 <CONFIG_ISR_STACK_SIZE+0xa4>)
     6fe:	2203      	movs	r2, #3
     700:	601a      	str	r2, [r3, #0]
    if (errata_57()){
     702:	f7ff ffb1 	bl	668 <errata_16>
     706:	b140      	cbz	r0, 71a <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
     708:	4b67      	ldr	r3, [pc, #412]	; (8a8 <CONFIG_ISR_STACK_SIZE+0xa8>)
     70a:	2205      	movs	r2, #5
     70c:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
     70e:	2201      	movs	r2, #1
     710:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
     712:	2200      	movs	r2, #0
     714:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
     716:	223f      	movs	r2, #63	; 0x3f
     718:	605a      	str	r2, [r3, #4]
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     71a:	4b64      	ldr	r3, [pc, #400]	; (8ac <CONFIG_ISR_STACK_SIZE+0xac>)
     71c:	781b      	ldrb	r3, [r3, #0]
     71e:	2b06      	cmp	r3, #6
     720:	d150      	bne.n	7c4 <SystemInit+0x128>
     722:	4b63      	ldr	r3, [pc, #396]	; (8b0 <CONFIG_ISR_STACK_SIZE+0xb0>)
     724:	681b      	ldr	r3, [r3, #0]
     726:	0719      	lsls	r1, r3, #28
     728:	d14c      	bne.n	7c4 <SystemInit+0x128>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     72a:	4b62      	ldr	r3, [pc, #392]	; (8b4 <CONFIG_ISR_STACK_SIZE+0xb4>)
     72c:	681b      	ldr	r3, [r3, #0]
     72e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     732:	2b50      	cmp	r3, #80	; 0x50
     734:	d146      	bne.n	7c4 <SystemInit+0x128>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
     736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     73a:	4b5f      	ldr	r3, [pc, #380]	; (8b8 <CONFIG_ISR_STACK_SIZE+0xb8>)
     73c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
     740:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
     744:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
     748:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
     74c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
     750:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
     754:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
     758:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
     75c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
     760:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
     764:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
     768:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
     76c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
     770:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
     774:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
     778:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
     77c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
     780:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
     784:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
     788:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
     78c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
     790:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
     794:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
     798:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
     79c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
     7a0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
     7a4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
     7a8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
     7ac:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
     7b0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
     7b4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
     7b8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
     7bc:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
     7c0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
     7c4:	f7ff ff30 	bl	628 <errata_108>
     7c8:	b128      	cbz	r0, 7d6 <SystemInit+0x13a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
     7ca:	4b3c      	ldr	r3, [pc, #240]	; (8bc <CONFIG_ISR_STACK_SIZE+0xbc>)
     7cc:	4a3c      	ldr	r2, [pc, #240]	; (8c0 <CONFIG_ISR_STACK_SIZE+0xc0>)
     7ce:	681b      	ldr	r3, [r3, #0]
     7d0:	f003 034f 	and.w	r3, r3, #79	; 0x4f
     7d4:	6013      	str	r3, [r2, #0]
    if (errata_136()){
     7d6:	f7ff ff27 	bl	628 <errata_108>
     7da:	b148      	cbz	r0, 7f0 <SystemInit+0x154>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
     7dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7e0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7e4:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
     7e6:	bf44      	itt	mi
     7e8:	f06f 0201 	mvnmi.w	r2, #1
     7ec:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
}


static bool errata_182(void)
{
    if (*(uint32_t *)0x10000130ul == 0x6ul){
     7f0:	4b34      	ldr	r3, [pc, #208]	; (8c4 <CONFIG_ISR_STACK_SIZE+0xc4>)
     7f2:	681b      	ldr	r3, [r3, #0]
     7f4:	2b06      	cmp	r3, #6
     7f6:	d108      	bne.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
        if (*(uint32_t *)0x10000134ul == 0x6ul){
     7f8:	4b33      	ldr	r3, [pc, #204]	; (8c8 <CONFIG_ISR_STACK_SIZE+0xc8>)
     7fa:	681b      	ldr	r3, [r3, #0]
     7fc:	2b06      	cmp	r3, #6
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
     7fe:	bf01      	itttt	eq
     800:	4a32      	ldreq	r2, [pc, #200]	; (8cc <CONFIG_ISR_STACK_SIZE+0xcc>)
     802:	6813      	ldreq	r3, [r2, #0]
     804:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
     808:	6013      	streq	r3, [r2, #0]
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     80a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     80e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     812:	2a00      	cmp	r2, #0
     814:	db03      	blt.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
     816:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     81a:	2b00      	cmp	r3, #0
     81c:	da2f      	bge.n	87e <CONFIG_ISR_STACK_SIZE+0x7e>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     81e:	4b2c      	ldr	r3, [pc, #176]	; (8d0 <CONFIG_ISR_STACK_SIZE+0xd0>)
     820:	2201      	movs	r2, #1
     822:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     826:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     82a:	2a00      	cmp	r2, #0
     82c:	d0fb      	beq.n	826 <CONFIG_ISR_STACK_SIZE+0x26>
            NRF_UICR->PSELRESET[0] = 21;
     82e:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     832:	2115      	movs	r1, #21
     834:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     838:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     83c:	2a00      	cmp	r2, #0
     83e:	d0fb      	beq.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
            NRF_UICR->PSELRESET[1] = 21;
     840:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     844:	2215      	movs	r2, #21
     846:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     84a:	4b21      	ldr	r3, [pc, #132]	; (8d0 <CONFIG_ISR_STACK_SIZE+0xd0>)
     84c:	461a      	mov	r2, r3
     84e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     852:	2900      	cmp	r1, #0
     854:	d0fb      	beq.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     856:	2100      	movs	r1, #0
     858:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     85c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     860:	2b00      	cmp	r3, #0
     862:	d0fb      	beq.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     864:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     868:	491a      	ldr	r1, [pc, #104]	; (8d4 <CONFIG_ISR_STACK_SIZE+0xd4>)
     86a:	4b1b      	ldr	r3, [pc, #108]	; (8d8 <CONFIG_ISR_STACK_SIZE+0xd8>)
     86c:	68ca      	ldr	r2, [r1, #12]
     86e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     872:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     874:	60cb      	str	r3, [r1, #12]
     876:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     87a:	bf00      	nop
     87c:	e7fd      	b.n	87a <CONFIG_ISR_STACK_SIZE+0x7a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
     87e:	4b17      	ldr	r3, [pc, #92]	; (8dc <CONFIG_ISR_STACK_SIZE+0xdc>)
     880:	4a17      	ldr	r2, [pc, #92]	; (8e0 <CONFIG_ISR_STACK_SIZE+0xe0>)
     882:	601a      	str	r2, [r3, #0]
}
     884:	bd08      	pop	{r3, pc}
     886:	bf00      	nop
     888:	10000324 	.word	0x10000324
     88c:	40013540 	.word	0x40013540
     890:	4007c074 	.word	0x4007c074
     894:	baadf00d 	.word	0xbaadf00d
     898:	10000244 	.word	0x10000244
     89c:	4000053c 	.word	0x4000053c
     8a0:	e000edf0 	.word	0xe000edf0
     8a4:	400005a0 	.word	0x400005a0
     8a8:	40005610 	.word	0x40005610
     8ac:	f0000fe0 	.word	0xf0000fe0
     8b0:	f0000fe4 	.word	0xf0000fe4
     8b4:	f0000fe8 	.word	0xf0000fe8
     8b8:	4000c000 	.word	0x4000c000
     8bc:	10000258 	.word	0x10000258
     8c0:	40000ee4 	.word	0x40000ee4
     8c4:	10000130 	.word	0x10000130
     8c8:	10000134 	.word	0x10000134
     8cc:	4000173c 	.word	0x4000173c
     8d0:	4001e000 	.word	0x4001e000
     8d4:	e000ed00 	.word	0xe000ed00
     8d8:	05fa0004 	.word	0x05fa0004
     8dc:	20001cac 	.word	0x20001cac
     8e0:	03d09000 	.word	0x03d09000

000008e4 <cmd_kernel_version>:
#include <string.h>
#include <device.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
     8e4:	b513      	push	{r0, r1, r4, lr}
     8e6:	4604      	mov	r4, r0
	u32_t version = sys_kernel_version_get();
     8e8:	f003 ffb0 	bl	484c <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "Zephyr version %d.%d.%d\n",
     8ec:	f3c0 2307 	ubfx	r3, r0, #8, #8
     8f0:	9301      	str	r3, [sp, #4]
     8f2:	f3c0 4307 	ubfx	r3, r0, #16, #8
     8f6:	9300      	str	r3, [sp, #0]
     8f8:	4a04      	ldr	r2, [pc, #16]	; (90c <cmd_kernel_version+0x28>)
     8fa:	0e03      	lsrs	r3, r0, #24
     8fc:	2100      	movs	r1, #0
     8fe:	4620      	mov	r0, r4
     900:	f004 fdac 	bl	545c <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
     904:	2000      	movs	r0, #0
     906:	b002      	add	sp, #8
     908:	bd10      	pop	{r4, pc}
     90a:	bf00      	nop
     90c:	00007107 	.word	0x00007107

00000910 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
     910:	b510      	push	{r4, lr}
     912:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
     914:	f005 ffc9 	bl	68aa <z_impl_k_uptime_get_32>
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "Uptime: %u ms\n",
     918:	4a03      	ldr	r2, [pc, #12]	; (928 <cmd_kernel_uptime+0x18>)
     91a:	4603      	mov	r3, r0
     91c:	2100      	movs	r1, #0
     91e:	4620      	mov	r0, r4
     920:	f004 fd9c 	bl	545c <shell_fprintf>
			k_uptime_get_32());
	return 0;
}
     924:	2000      	movs	r0, #0
     926:	bd10      	pop	{r4, pc}
     928:	000070f8 	.word	0x000070f8

0000092c <cmd_kernel_cycles>:

static int cmd_kernel_cycles(const struct shell *shell,
			      size_t argc, char **argv)
{
     92c:	b510      	push	{r4, lr}
     92e:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "cycles: %u hw cycles\n",
     930:	f001 fdde 	bl	24f0 <z_timer_cycle_get_32>
     934:	4a03      	ldr	r2, [pc, #12]	; (944 <cmd_kernel_cycles+0x18>)
     936:	4603      	mov	r3, r0
     938:	2100      	movs	r1, #0
     93a:	4620      	mov	r0, r4
     93c:	f004 fd8e 	bl	545c <shell_fprintf>
			k_cycle_get_32());
	return 0;
}
     940:	2000      	movs	r0, #0
     942:	bd10      	pop	{r4, pc}
     944:	000070e2 	.word	0x000070e2

00000948 <cmd_device_list>:
	return 0;
}

static int cmd_device_list(const struct shell *shell,
			      size_t argc, char **argv)
{
     948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct device *info;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
     94a:	4a0b      	ldr	r2, [pc, #44]	; (978 <cmd_device_list+0x30>)
	for (info = __device_init_start; info != __device_init_end; info++) {
     94c:	4c0b      	ldr	r4, [pc, #44]	; (97c <cmd_device_list+0x34>)
     94e:	4d0c      	ldr	r5, [pc, #48]	; (980 <cmd_device_list+0x38>)
		if (info->driver_api != NULL) {
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
     950:	4f0c      	ldr	r7, [pc, #48]	; (984 <cmd_device_list+0x3c>)
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
     952:	2100      	movs	r1, #0
{
     954:	4606      	mov	r6, r0
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
     956:	f004 fd81 	bl	545c <shell_fprintf>
	for (info = __device_init_start; info != __device_init_end; info++) {
     95a:	42ac      	cmp	r4, r5
     95c:	d101      	bne.n	962 <cmd_device_list+0x1a>
					info->config->name);
		}
	}

	return 0;
}
     95e:	2000      	movs	r0, #0
     960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (info->driver_api != NULL) {
     962:	6863      	ldr	r3, [r4, #4]
     964:	b133      	cbz	r3, 974 <cmd_device_list+0x2c>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
     966:	6823      	ldr	r3, [r4, #0]
     968:	463a      	mov	r2, r7
     96a:	681b      	ldr	r3, [r3, #0]
     96c:	2100      	movs	r1, #0
     96e:	4630      	mov	r0, r6
     970:	f004 fd74 	bl	545c <shell_fprintf>
	for (info = __device_init_start; info != __device_init_end; info++) {
     974:	340c      	adds	r4, #12
     976:	e7f0      	b.n	95a <cmd_device_list+0x12>
     978:	000071bd 	.word	0x000071bd
     97c:	20001d38 	.word	0x20001d38
     980:	20001db0 	.word	0x20001db0
     984:	000071c7 	.word	0x000071c7

00000988 <device_get_config_level>:
{
     988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
     98a:	4b0c      	ldr	r3, [pc, #48]	; (9bc <device_get_config_level+0x34>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
     98c:	4f0c      	ldr	r7, [pc, #48]	; (9c0 <device_get_config_level+0x38>)
	for (info = config_levels[level]; info < config_levels[level+1];
     98e:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
     992:	3101      	adds	r1, #1
{
     994:	4606      	mov	r6, r0
	for (info = config_levels[level]; info < config_levels[level+1];
     996:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
	bool devices = false;
     99a:	2000      	movs	r0, #0
	for (info = config_levels[level]; info < config_levels[level+1];
     99c:	42a5      	cmp	r5, r4
     99e:	d800      	bhi.n	9a2 <device_get_config_level+0x1a>
}
     9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (info->driver_api != NULL) {
     9a2:	6863      	ldr	r3, [r4, #4]
     9a4:	b13b      	cbz	r3, 9b6 <device_get_config_level+0x2e>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
     9a6:	6823      	ldr	r3, [r4, #0]
     9a8:	4630      	mov	r0, r6
     9aa:	681b      	ldr	r3, [r3, #0]
     9ac:	463a      	mov	r2, r7
     9ae:	2100      	movs	r1, #0
     9b0:	f004 fd54 	bl	545c <shell_fprintf>
			devices = true;
     9b4:	2001      	movs	r0, #1
								info++) {
     9b6:	340c      	adds	r4, #12
     9b8:	e7f0      	b.n	99c <device_get_config_level+0x14>
     9ba:	bf00      	nop
     9bc:	00006c78 	.word	0x00006c78
     9c0:	000071c7 	.word	0x000071c7

000009c4 <cmd_device_levels>:
{
     9c4:	b510      	push	{r4, lr}
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
     9c6:	4a1f      	ldr	r2, [pc, #124]	; (a44 <cmd_device_levels+0x80>)
{
     9c8:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
     9ca:	2100      	movs	r1, #0
     9cc:	f004 fd46 	bl	545c <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
     9d0:	2102      	movs	r1, #2
     9d2:	4620      	mov	r0, r4
     9d4:	f7ff ffd8 	bl	988 <device_get_config_level>
	if (ret == false) {
     9d8:	4601      	mov	r1, r0
     9da:	b918      	cbnz	r0, 9e4 <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
     9dc:	4a1a      	ldr	r2, [pc, #104]	; (a48 <cmd_device_levels+0x84>)
     9de:	4620      	mov	r0, r4
     9e0:	f004 fd3c 	bl	545c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
     9e4:	4a19      	ldr	r2, [pc, #100]	; (a4c <cmd_device_levels+0x88>)
     9e6:	2100      	movs	r1, #0
     9e8:	4620      	mov	r0, r4
     9ea:	f004 fd37 	bl	545c <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
     9ee:	2103      	movs	r1, #3
     9f0:	4620      	mov	r0, r4
     9f2:	f7ff ffc9 	bl	988 <device_get_config_level>
	if (ret == false) {
     9f6:	4601      	mov	r1, r0
     9f8:	b918      	cbnz	r0, a02 <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
     9fa:	4a13      	ldr	r2, [pc, #76]	; (a48 <cmd_device_levels+0x84>)
     9fc:	4620      	mov	r0, r4
     9fe:	f004 fd2d 	bl	545c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
     a02:	4a13      	ldr	r2, [pc, #76]	; (a50 <cmd_device_levels+0x8c>)
     a04:	2100      	movs	r1, #0
     a06:	4620      	mov	r0, r4
     a08:	f004 fd28 	bl	545c <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
     a0c:	2100      	movs	r1, #0
     a0e:	4620      	mov	r0, r4
     a10:	f7ff ffba 	bl	988 <device_get_config_level>
	if (ret == false) {
     a14:	4601      	mov	r1, r0
     a16:	b918      	cbnz	r0, a20 <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
     a18:	4a0b      	ldr	r2, [pc, #44]	; (a48 <cmd_device_levels+0x84>)
     a1a:	4620      	mov	r0, r4
     a1c:	f004 fd1e 	bl	545c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
     a20:	4a0c      	ldr	r2, [pc, #48]	; (a54 <cmd_device_levels+0x90>)
     a22:	2100      	movs	r1, #0
     a24:	4620      	mov	r0, r4
     a26:	f004 fd19 	bl	545c <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
     a2a:	2101      	movs	r1, #1
     a2c:	4620      	mov	r0, r4
     a2e:	f7ff ffab 	bl	988 <device_get_config_level>
	if (ret == false) {
     a32:	4601      	mov	r1, r0
     a34:	b918      	cbnz	r0, a3e <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
     a36:	4a04      	ldr	r2, [pc, #16]	; (a48 <cmd_device_levels+0x84>)
     a38:	4620      	mov	r0, r4
     a3a:	f004 fd0f 	bl	545c <shell_fprintf>
}
     a3e:	2000      	movs	r0, #0
     a40:	bd10      	pop	{r4, pc}
     a42:	bf00      	nop
     a44:	0000717b 	.word	0x0000717b
     a48:	00007189 	.word	0x00007189
     a4c:	00007191 	.word	0x00007191
     a50:	0000719f 	.word	0x0000719f
     a54:	000071ae 	.word	0x000071ae

00000a58 <history_handle>:

	shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
     a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (flag_history_exit_get(shell)) {
     a5a:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
}

static inline bool flag_history_exit_get(const struct shell *shell)
{
	return shell->ctx->internal.flags.history_exit == 1 ? true : false;
     a5c:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
     a60:	0652      	lsls	r2, r2, #25
{
     a62:	4604      	mov	r4, r0
     a64:	460d      	mov	r5, r1
	if (flag_history_exit_get(shell)) {
     a66:	d508      	bpl.n	a7a <history_handle+0x22>
}

static inline void flag_history_exit_set(const struct shell *shell, bool val)
{
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
     a68:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
     a6c:	68c0      	ldr	r0, [r0, #12]
     a6e:	f36f 1286 	bfc	r2, #6, #1
     a72:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
		flag_history_exit_set(shell, false);
		shell_history_mode_exit(shell->history);
     a76:	f005 f9ec 	bl	5e52 <shell_history_mode_exit>
	}

	/* Backup command if history is entered */
	if (!shell_history_active(shell->history)) {
     a7a:	68e3      	ldr	r3, [r4, #12]
     a7c:	68db      	ldr	r3, [r3, #12]
     a7e:	b963      	cbnz	r3, a9a <history_handle+0x42>
		if (up) {
     a80:	b39d      	cbz	r5, aea <history_handle+0x92>
			u16_t cmd_len = shell_strlen(shell->ctx->cmd_buff);
     a82:	68a0      	ldr	r0, [r4, #8]
     a84:	3038      	adds	r0, #56	; 0x38
     a86:	f004 fcb9 	bl	53fc <shell_strlen>

			if (cmd_len) {
     a8a:	68a3      	ldr	r3, [r4, #8]
     a8c:	b378      	cbz	r0, aee <history_handle+0x96>
				strcpy(shell->ctx->temp_buff,
     a8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
     a92:	f503 709c 	add.w	r0, r3, #312	; 0x138
     a96:	f005 fb09 	bl	60ac <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = shell_history_get(shell->history, up,
					 shell->ctx->cmd_buff, &len);
     a9a:	68a2      	ldr	r2, [r4, #8]
	history_mode = shell_history_get(shell->history, up,
     a9c:	68e0      	ldr	r0, [r4, #12]
     a9e:	f10d 0306 	add.w	r3, sp, #6
     aa2:	3238      	adds	r2, #56	; 0x38
     aa4:	4629      	mov	r1, r5
     aa6:	f005 f9d7 	bl	5e58 <shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
     aaa:	b958      	cbnz	r0, ac4 <history_handle+0x6c>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
     aac:	68a0      	ldr	r0, [r4, #8]
     aae:	f500 719c 	add.w	r1, r0, #312	; 0x138
     ab2:	3038      	adds	r0, #56	; 0x38
     ab4:	f005 fafa 	bl	60ac <strcpy>
		len = shell_strlen(shell->ctx->cmd_buff);
     ab8:	68a0      	ldr	r0, [r4, #8]
     aba:	3038      	adds	r0, #56	; 0x38
     abc:	f004 fc9e 	bl	53fc <shell_strlen>
     ac0:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	shell_op_cursor_home_move(shell);
     ac4:	4620      	mov	r0, r4
     ac6:	f004 ff96 	bl	59f6 <shell_op_cursor_home_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
     aca:	4a0a      	ldr	r2, [pc, #40]	; (af4 <history_handle+0x9c>)
     acc:	490a      	ldr	r1, [pc, #40]	; (af8 <history_handle+0xa0>)
     ace:	6960      	ldr	r0, [r4, #20]
     ad0:	f004 fc9a 	bl	5408 <shell_raw_fprintf>
	clear_eos(shell);
	shell_print_cmd(shell);
     ad4:	4620      	mov	r0, r4
     ad6:	f000 fe85 	bl	17e4 <shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
     ada:	68a3      	ldr	r3, [r4, #8]
     adc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     ae0:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = len;
     ae2:	865a      	strh	r2, [r3, #50]	; 0x32
	shell_op_cond_next_line(shell);
     ae4:	4620      	mov	r0, r4
     ae6:	f000 fe3f 	bl	1768 <shell_op_cond_next_line>
}
     aea:	b003      	add	sp, #12
     aec:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
     aee:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
     af2:	e7d2      	b.n	a9a <history_handle+0x42>
     af4:	00007223 	.word	0x00007223
     af8:	00007e02 	.word	0x00007e02

00000afc <execute>:
/* Function is analyzing the command buffer to find matching commands. Next, it
 * invokes the  last recognized command which has a handler and passes the rest
 * of command buffer as arguments.
 */
static int execute(const struct shell *shell)
{
     afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b00:	b09d      	sub	sp, #116	; 0x74
     b02:	4604      	mov	r4, r0
	struct shell_static_entry d_entry; /* Memory for dynamic commands. */
	char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *p_static_entry = NULL;
     b04:	2300      	movs	r3, #0
     b06:	9303      	str	r3, [sp, #12]
	bool wildcard_found = false;
	size_t cmd_idx = 0;
	size_t argc;
	char quote;

	shell_op_cursor_end_move(shell);
     b08:	f004 ff7b 	bl	5a02 <shell_op_cursor_end_move>
	if (!shell_cursor_in_empty_line(shell)) {
     b0c:	4620      	mov	r0, r4
     b0e:	f004 ff00 	bl	5912 <shell_cursor_in_empty_line>
     b12:	b918      	cbnz	r0, b1c <execute+0x20>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
     b14:	498d      	ldr	r1, [pc, #564]	; (d4c <execute+0x250>)
     b16:	6960      	ldr	r0, [r4, #20]
     b18:	f004 fc76 	bl	5408 <shell_raw_fprintf>
		cursor_next_line_move(shell);
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
     b1c:	68a0      	ldr	r0, [r4, #8]
     b1e:	2214      	movs	r2, #20
     b20:	2100      	movs	r1, #0
     b22:	3008      	adds	r0, #8
     b24:	f005 fb4d 	bl	61c2 <memset>

	shell_cmd_trim(shell);
     b28:	4620      	mov	r0, r4
     b2a:	f004 fe99 	bl	5860 <shell_cmd_trim>

	history_put(shell, shell->ctx->cmd_buff,
     b2e:	68a1      	ldr	r1, [r4, #8]
	shell_history_put(shell->history, line, length);
     b30:	68e0      	ldr	r0, [r4, #12]
     b32:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
     b34:	3138      	adds	r1, #56	; 0x38
     b36:	f005 f9c6 	bl	5ec6 <shell_history_put>
		    shell->ctx->cmd_buff_len);

	if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
		shell_wildcard_prepare(shell);
     b3a:	4620      	mov	r0, r4
     b3c:	f005 fa48 	bl	5fd0 <shell_wildcard_prepare>
	}

	/* create argument list */
	quote = shell_make_argv(&argc, &argv[0], shell->ctx->cmd_buff,
     b40:	68a2      	ldr	r2, [r4, #8]
     b42:	230c      	movs	r3, #12
     b44:	3238      	adds	r2, #56	; 0x38
     b46:	a90f      	add	r1, sp, #60	; 0x3c
     b48:	a804      	add	r0, sp, #16
     b4a:	f004 fd1e 	bl	558a <shell_make_argv>
				CONFIG_SHELL_ARGC_MAX);

	if (!argc) {
     b4e:	9a04      	ldr	r2, [sp, #16]
	quote = shell_make_argv(&argc, &argv[0], shell->ctx->cmd_buff,
     b50:	4603      	mov	r3, r0
	if (!argc) {
     b52:	b92a      	cbnz	r2, b60 <execute+0x64>

	if (quote != 0) {
		shell_internal_fprintf(shell, SHELL_ERROR,
				       "not terminated: %c\n",
				       quote);
		return -ENOEXEC;
     b54:	f06f 0507 	mvn.w	r5, #7
	}

	/* Executing the deepest found handler. */
	return exec_cmd(shell, argc - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
     b58:	4628      	mov	r0, r5
     b5a:	b01d      	add	sp, #116	; 0x74
     b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (quote != 0) {
     b60:	b128      	cbz	r0, b6e <execute+0x72>
		shell_internal_fprintf(shell, SHELL_ERROR,
     b62:	4a7b      	ldr	r2, [pc, #492]	; (d50 <execute+0x254>)
     b64:	2102      	movs	r1, #2
     b66:	4620      	mov	r0, r4
     b68:	f004 ffe4 	bl	5b34 <shell_internal_fprintf>
     b6c:	e7f2      	b.n	b54 <execute+0x58>
	help_entry.help = NULL;
     b6e:	4605      	mov	r5, r0
	size_t cmd_idx = 0;
     b70:	4607      	mov	r7, r0
	bool wildcard_found = false;
     b72:	4681      	mov	r9, r0
	size_t cmd_with_handler_lvl = 0;
     b74:	4682      	mov	sl, r0
	size_t cmd_lvl = SHELL_CMD_ROOT_LVL;
     b76:	4606      	mov	r6, r0
	const struct shell_cmd_entry *p_cmd = NULL;
     b78:	4683      	mov	fp, r0
     b7a:	e03e      	b.n	bfa <execute+0xfe>
		     !strcmp(argv[cmd_lvl], "--help"))) {
     b7c:	4975      	ldr	r1, [pc, #468]	; (d54 <execute+0x258>)
     b7e:	f858 0c34 	ldr.w	r0, [r8, #-52]
     b82:	f005 fab2 	bl	60ea <strcmp>
		    (!strcmp(argv[cmd_lvl], "-h") ||
     b86:	2800      	cmp	r0, #0
     b88:	d045      	beq.n	c16 <execute+0x11a>
			status = shell_wildcard_process(shell, p_cmd,
     b8a:	f858 2c34 	ldr.w	r2, [r8, #-52]
     b8e:	4659      	mov	r1, fp
     b90:	4620      	mov	r0, r4
     b92:	f001 f9cf 	bl	1f34 <shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
     b96:	2802      	cmp	r0, #2
     b98:	d128      	bne.n	bec <execute+0xf0>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
     b9a:	f1b9 0f00 	cmp.w	r9, #0
     b9e:	d009      	beq.n	bb4 <execute+0xb8>
		shell_wildcard_finalize(shell);
     ba0:	4620      	mov	r0, r4
     ba2:	f005 fa37 	bl	6014 <shell_wildcard_finalize>
				      shell->ctx->cmd_buff,
     ba6:	68a2      	ldr	r2, [r4, #8]
		(void)shell_make_argv(&argc, &argv[0],
     ba8:	230c      	movs	r3, #12
     baa:	3238      	adds	r2, #56	; 0x38
     bac:	a90f      	add	r1, sp, #60	; 0x3c
     bae:	a804      	add	r0, sp, #16
     bb0:	f004 fceb 	bl	558a <shell_make_argv>
	if (shell->ctx->active_cmd.handler == NULL) {
     bb4:	68a0      	ldr	r0, [r4, #8]
     bb6:	6943      	ldr	r3, [r0, #20]
     bb8:	2b00      	cmp	r3, #0
     bba:	f040 808f 	bne.w	cdc <execute+0x1e0>
			if (help_entry->help == NULL) {
     bbe:	2d00      	cmp	r5, #0
     bc0:	d0c8      	beq.n	b54 <execute+0x58>
			if (help_entry->help != shell->ctx->active_cmd.help) {
     bc2:	68c3      	ldr	r3, [r0, #12]
     bc4:	429d      	cmp	r5, r3
     bc6:	d00c      	beq.n	be2 <execute+0xe6>
				shell->ctx->active_cmd = *help_entry;
     bc8:	950b      	str	r5, [sp, #44]	; 0x2c
     bca:	f100 0508 	add.w	r5, r0, #8
     bce:	e003      	b.n	bd8 <execute+0xdc>
				shell->ctx->active_cmd = help_entry;
     bd0:	68a3      	ldr	r3, [r4, #8]
     bd2:	950b      	str	r5, [sp, #44]	; 0x2c
     bd4:	f103 0508 	add.w	r5, r3, #8
				shell->ctx->active_cmd = *help_entry;
     bd8:	ae0a      	add	r6, sp, #40	; 0x28
     bda:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     bde:	6833      	ldr	r3, [r6, #0]
     be0:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
     be2:	4620      	mov	r0, r4
     be4:	f004 fc1d 	bl	5422 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
     be8:	2501      	movs	r5, #1
     bea:	e7b5      	b.n	b58 <execute+0x5c>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
     bec:	2803      	cmp	r0, #3
     bee:	d01a      	beq.n	c26 <execute+0x12a>
				++cmd_lvl;
     bf0:	3601      	adds	r6, #1
				continue;
     bf2:	46b8      	mov	r8, r7
				wildcard_found = true;
     bf4:	f04f 0901 	mov.w	r9, #1
     bf8:	4647      	mov	r7, r8
		if (cmd_lvl >= argc) {
     bfa:	9b04      	ldr	r3, [sp, #16]
     bfc:	42b3      	cmp	r3, r6
     bfe:	d9cc      	bls.n	b9a <execute+0x9e>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
     c00:	b18e      	cbz	r6, c26 <execute+0x12a>
		    (!strcmp(argv[cmd_lvl], "-h") ||
     c02:	ab1c      	add	r3, sp, #112	; 0x70
     c04:	eb03 0886 	add.w	r8, r3, r6, lsl #2
     c08:	4953      	ldr	r1, [pc, #332]	; (d58 <execute+0x25c>)
     c0a:	f858 0c34 	ldr.w	r0, [r8, #-52]
     c0e:	f005 fa6c 	bl	60ea <strcmp>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
     c12:	2800      	cmp	r0, #0
     c14:	d1b2      	bne.n	b7c <execute+0x80>
			if (help_entry.help) {
     c16:	2d00      	cmp	r5, #0
     c18:	d1da      	bne.n	bd0 <execute+0xd4>
			shell_internal_fprintf(shell, SHELL_ERROR,
     c1a:	4a50      	ldr	r2, [pc, #320]	; (d5c <execute+0x260>)
					shell_internal_fprintf(shell,
     c1c:	2102      	movs	r1, #2
     c1e:	4620      	mov	r0, r4
     c20:	f004 ff88 	bl	5b34 <shell_internal_fprintf>
					return -ENOEXEC;
     c24:	e796      	b.n	b54 <execute+0x58>
		shell_cmd_get(shell, p_cmd, cmd_lvl, cmd_idx++, &p_static_entry,
     c26:	ab05      	add	r3, sp, #20
     c28:	9301      	str	r3, [sp, #4]
     c2a:	ab03      	add	r3, sp, #12
     c2c:	f107 0801 	add.w	r8, r7, #1
     c30:	9300      	str	r3, [sp, #0]
     c32:	4632      	mov	r2, r6
     c34:	463b      	mov	r3, r7
     c36:	4659      	mov	r1, fp
     c38:	4620      	mov	r0, r4
     c3a:	f000 fd43 	bl	16c4 <shell_cmd_get>
		if ((cmd_idx == 0) || (p_static_entry == NULL)) {
     c3e:	f1b8 0f00 	cmp.w	r8, #0
     c42:	d001      	beq.n	c48 <execute+0x14c>
     c44:	9b03      	ldr	r3, [sp, #12]
     c46:	b983      	cbnz	r3, c6a <execute+0x16e>
			if (cmd_lvl == 0 &&
     c48:	2e00      	cmp	r6, #0
     c4a:	d1a6      	bne.n	b9a <execute+0x9e>

void shell_cmd_trim(const struct shell *shell);

static inline bool shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
     c4c:	68a3      	ldr	r3, [r4, #8]
     c4e:	69db      	ldr	r3, [r3, #28]
     c50:	b113      	cbz	r3, c58 <execute+0x15c>
				(!shell_in_select_mode(shell) ||
     c52:	68db      	ldr	r3, [r3, #12]
     c54:	2b00      	cmp	r3, #0
     c56:	d1a0      	bne.n	b9a <execute+0x9e>
				shell_internal_fprintf(shell, SHELL_ERROR,
     c58:	4b41      	ldr	r3, [pc, #260]	; (d60 <execute+0x264>)
     c5a:	9300      	str	r3, [sp, #0]
     c5c:	4a41      	ldr	r2, [pc, #260]	; (d64 <execute+0x268>)
     c5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     c60:	2102      	movs	r1, #2
     c62:	4620      	mov	r0, r4
     c64:	f004 ff66 	bl	5b34 <shell_internal_fprintf>
				return -ENOEXEC;
     c68:	e774      	b.n	b54 <execute+0x58>
		if (strcmp(argv[cmd_lvl], p_static_entry->syntax) == 0) {
     c6a:	6819      	ldr	r1, [r3, #0]
     c6c:	ab1c      	add	r3, sp, #112	; 0x70
     c6e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
     c72:	f853 0c34 	ldr.w	r0, [r3, #-52]
     c76:	f005 fa38 	bl	60ea <strcmp>
     c7a:	2800      	cmp	r0, #0
     c7c:	d1bc      	bne.n	bf8 <execute+0xfc>
			if (p_static_entry->handler != NULL) {
     c7e:	9f03      	ldr	r7, [sp, #12]
     c80:	68fb      	ldr	r3, [r7, #12]
     c82:	b1bb      	cbz	r3, cb4 <execute+0x1b8>
				if (IS_ENABLED(CONFIG_SHELL_WILDCARD) &&
     c84:	f1b9 0f00 	cmp.w	r9, #0
     c88:	d007      	beq.n	c9a <execute+0x19e>
					shell_op_cursor_end_move(shell);
     c8a:	4620      	mov	r0, r4
     c8c:	f004 feb9 	bl	5a02 <shell_op_cursor_end_move>
					shell_op_cond_next_line(shell);
     c90:	4620      	mov	r0, r4
     c92:	f000 fd69 	bl	1768 <shell_op_cond_next_line>
					shell_internal_fprintf(shell,
     c96:	4a34      	ldr	r2, [pc, #208]	; (d68 <execute+0x26c>)
     c98:	e7c0      	b.n	c1c <execute+0x120>
				shell->ctx->active_cmd = *p_static_entry;
     c9a:	68a3      	ldr	r3, [r4, #8]
     c9c:	46be      	mov	lr, r7
     c9e:	f103 0c08 	add.w	ip, r3, #8
     ca2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
     ca6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
     caa:	f8de 3000 	ldr.w	r3, [lr]
     cae:	f8cc 3000 	str.w	r3, [ip]
     cb2:	46b2      	mov	sl, r6
			if (p_static_entry->help != NULL) {
     cb4:	f8d7 c004 	ldr.w	ip, [r7, #4]
     cb8:	f1bc 0f00 	cmp.w	ip, #0
     cbc:	d008      	beq.n	cd0 <execute+0x1d4>
				help_entry = *p_static_entry;
     cbe:	46be      	mov	lr, r7
     cc0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
     cc4:	ad0a      	add	r5, sp, #40	; 0x28
     cc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     cc8:	f8de 3000 	ldr.w	r3, [lr]
     ccc:	602b      	str	r3, [r5, #0]
     cce:	4665      	mov	r5, ip
			cmd_lvl++;
     cd0:	3601      	adds	r6, #1
			p_cmd = p_static_entry->subcmd;
     cd2:	f8d7 b008 	ldr.w	fp, [r7, #8]
			cmd_idx = 0;
     cd6:	f04f 0800 	mov.w	r8, #0
     cda:	e78d      	b.n	bf8 <execute+0xfc>
	return exec_cmd(shell, argc - cmd_with_handler_lvl,
     cdc:	9d04      	ldr	r5, [sp, #16]
	if (shell->ctx->active_cmd.args.mandatory) {
     cde:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, argc - cmd_with_handler_lvl,
     ce0:	eba5 050a 	sub.w	r5, r5, sl
	if (shell->ctx->active_cmd.args.mandatory) {
     ce4:	b18b      	cbz	r3, d0a <execute+0x20e>
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
     ce6:	429d      	cmp	r5, r3
		u8_t opt = shell->ctx->active_cmd.args.optional;
     ce8:	7e42      	ldrb	r2, [r0, #25]
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
     cea:	d302      	bcc.n	cf2 <execute+0x1f6>
     cec:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
     cee:	429d      	cmp	r5, r3
     cf0:	d90b      	bls.n	d0a <execute+0x20e>
		shell_internal_fprintf(shell, SHELL_ERROR,
     cf2:	6883      	ldr	r3, [r0, #8]
     cf4:	4a1d      	ldr	r2, [pc, #116]	; (d6c <execute+0x270>)
     cf6:	2102      	movs	r1, #2
     cf8:	4620      	mov	r0, r4
     cfa:	f004 ff1b 	bl	5b34 <shell_internal_fprintf>
			shell_internal_help_print(shell);
     cfe:	4620      	mov	r0, r4
     d00:	f004 fb8f 	bl	5422 <shell_internal_help_print>
		return -EINVAL;
     d04:	f06f 0515 	mvn.w	r5, #21
     d08:	e726      	b.n	b58 <execute+0x5c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
     d0a:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
     d0e:	f003 f9df 	bl	40d0 <z_impl_k_mutex_unlock>
		flag_cmd_ctx_set(shell, 1);
     d12:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.cmd_ctx == 1 ? true : false;
}

static inline void flag_cmd_ctx_set(const struct shell *shell, bool val)
{
	shell->ctx->internal.flags.cmd_ctx = val ? 1 : 0;
     d14:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
     d18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     d1c:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
		ret_val = shell->ctx->active_cmd.handler(shell, argc, argv);
     d20:	aa0f      	add	r2, sp, #60	; 0x3c
     d22:	4629      	mov	r1, r5
     d24:	695b      	ldr	r3, [r3, #20]
     d26:	eb02 028a 	add.w	r2, r2, sl, lsl #2
     d2a:	4620      	mov	r0, r4
     d2c:	4798      	blx	r3
     d2e:	4605      	mov	r5, r0
		flag_cmd_ctx_set(shell, 0);
     d30:	68a0      	ldr	r0, [r4, #8]
     d32:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
     d36:	f36f 13c7 	bfc	r3, #7, #1
     d3a:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
     d3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     d42:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
     d46:	f003 f953 	bl	3ff0 <z_impl_k_mutex_lock>
     d4a:	e705      	b.n	b58 <execute+0x5c>
     d4c:	000072d4 	.word	0x000072d4
     d50:	00007230 	.word	0x00007230
     d54:	00007247 	.word	0x00007247
     d58:	00007244 	.word	0x00007244
     d5c:	0000724e 	.word	0x0000724e
     d60:	0000726c 	.word	0x0000726c
     d64:	00007358 	.word	0x00007358
     d68:	00007280 	.word	0x00007280
     d6c:	000072af 	.word	0x000072af

00000d70 <shell_init>:
	}
}

int shell_init(const struct shell *shell, const void *transport_config,
	       bool use_colors, bool log_backend, u32_t init_log_level)
{
     d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     d74:	4604      	mov	r4, r0
	int err = shell->iface->api->init(shell->iface, p_config,
     d76:	6840      	ldr	r0, [r0, #4]
     d78:	4a37      	ldr	r2, [pc, #220]	; (e58 <shell_init+0xe8>)
{
     d7a:	461f      	mov	r7, r3
	int err = shell->iface->api->init(shell->iface, p_config,
     d7c:	6803      	ldr	r3, [r0, #0]
{
     d7e:	b086      	sub	sp, #24
	int err = shell->iface->api->init(shell->iface, p_config,
     d80:	681d      	ldr	r5, [r3, #0]
     d82:	4623      	mov	r3, r4
     d84:	47a8      	blx	r5
	if (err != 0) {
     d86:	4606      	mov	r6, r0
     d88:	2800      	cmp	r0, #0
     d8a:	d161      	bne.n	e50 <shell_init+0xe0>
	memset(shell->ctx, 0, sizeof(*shell->ctx));
     d8c:	4601      	mov	r1, r0
     d8e:	f44f 7241 	mov.w	r2, #772	; 0x304
     d92:	68a0      	ldr	r0, [r4, #8]
     d94:	f005 fa15 	bl	61c2 <memset>
	shell->ctx->prompt = shell->default_prompt;
     d98:	68a3      	ldr	r3, [r4, #8]
     d9a:	6822      	ldr	r2, [r4, #0]
     d9c:	601a      	str	r2, [r3, #0]
	shell_history_init(shell->history);
     d9e:	68e0      	ldr	r0, [r4, #12]
     da0:	f005 f8fc 	bl	5f9c <shell_history_init>
	k_mutex_init(&shell->ctx->wr_mtx);
     da4:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)
     da6:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
     daa:	f005 fc08 	bl	65be <z_impl_k_mutex_init>
     dae:	f44f 7827 	mov.w	r8, #668	; 0x29c
     db2:	f44f 7517 	mov.w	r5, #604	; 0x25c
		k_poll_signal_init(&shell->ctx->signals[i]);
     db6:	68a0      	ldr	r0, [r4, #8]

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_INIT, k_poll_signal_init, struct k_poll_signal *, signal)
     db8:	4428      	add	r0, r5
     dba:	f005 fe05 	bl	69c8 <z_impl_k_poll_signal_init>
		k_poll_event_init(&shell->ctx->events[i],
     dbe:	68a0      	ldr	r0, [r4, #8]
     dc0:	2200      	movs	r2, #0
     dc2:	1943      	adds	r3, r0, r5
     dc4:	2101      	movs	r1, #1
     dc6:	4440      	add	r0, r8
     dc8:	3510      	adds	r5, #16
     dca:	f003 fe33 	bl	4a34 <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
     dce:	f5b5 7f27 	cmp.w	r5, #668	; 0x29c
     dd2:	f108 0814 	add.w	r8, r8, #20
     dd6:	d1ee      	bne.n	db6 <shell_init+0x46>
		shell->stats->log_lost_cnt = 0;
     dd8:	69a3      	ldr	r3, [r4, #24]
     dda:	2500      	movs	r5, #0
     ddc:	601d      	str	r5, [r3, #0]
	flag_tx_rdy_set(shell, true);
     dde:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->internal.flags.tx_rdy = val ? 1 : 0;
     de0:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
     de4:	6818      	ldr	r0, [r3, #0]
     de6:	f042 0210 	orr.w	r2, r2, #16
     dea:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->internal.flags.echo = val ? 1 : 0;
     dee:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
     df2:	f042 0204 	orr.w	r2, r2, #4
     df6:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
     dfa:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
     dfe:	f042 0220 	orr.w	r2, r2, #32
     e02:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->state = SHELL_STATE_INITIALIZED;
     e06:	2201      	movs	r2, #1
     e08:	711a      	strb	r2, [r3, #4]
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
     e0a:	4a14      	ldr	r2, [pc, #80]	; (e5c <shell_init+0xec>)
     e0c:	629a      	str	r2, [r3, #40]	; 0x28
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
     e0e:	f004 faf5 	bl	53fc <shell_strlen>
     e12:	68a3      	ldr	r3, [r4, #8]
     e14:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	flag_use_colors_set(shell, IS_ENABLED(CONFIG_SHELL_VT100_COLORS));
     e18:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.use_colors = val ? 1 : 0;
     e1a:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
     e1e:	f043 0302 	orr.w	r3, r3, #2
     e22:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
     e26:	230e      	movs	r3, #14
     e28:	9303      	str	r3, [sp, #12]
     e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     e2c:	9400      	str	r4, [sp, #0]

	if (err != 0) {
		return err;
	}

	k_tid_t tid = k_thread_create(shell->thread,
     e2e:	e9cd 7301 	strd	r7, r3, [sp, #4]
     e32:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
     e36:	4b0a      	ldr	r3, [pc, #40]	; (e60 <shell_init+0xf0>)
     e38:	e9cd 5504 	strd	r5, r5, [sp, #16]
     e3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
     e40:	f003 fc7a 	bl	4738 <z_impl_k_thread_create>
			      shell->stack, CONFIG_SHELL_STACK_SIZE,
			      shell_thread, (void *)shell, (void *)log_backend,
			      UINT_TO_POINTER(init_log_level),
			      K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	shell->ctx->tid = tid;
     e44:	68a3      	ldr	r3, [r4, #8]
K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
     e46:	6a21      	ldr	r1, [r4, #32]
     e48:	f8c3 0300 	str.w	r0, [r3, #768]	; 0x300
     e4c:	f005 fcbd 	bl	67ca <z_impl_k_thread_name_set>
	k_thread_name_set(tid, shell->thread_name);

	return 0;
}
     e50:	4630      	mov	r0, r6
     e52:	b006      	add	sp, #24
     e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e58:	00005449 	.word	0x00005449
     e5c:	00500018 	.word	0x00500018
     e60:	000015d9 	.word	0x000015d9

00000e64 <shell_start>:
int shell_start(const struct shell *shell)
{
	__ASSERT_NO_MSG(shell);
	__ASSERT_NO_MSG(shell->ctx && shell->iface && shell->default_prompt);

	if (shell->ctx->state != SHELL_STATE_INITIALIZED) {
     e64:	6883      	ldr	r3, [r0, #8]
     e66:	791b      	ldrb	r3, [r3, #4]
     e68:	2b01      	cmp	r3, #1
{
     e6a:	b510      	push	{r4, lr}
     e6c:	4604      	mov	r4, r0
	if (shell->ctx->state != SHELL_STATE_INITIALIZED) {
     e6e:	d10b      	bne.n	e88 <shell_start+0x24>
		return -ENOTSUP;
	}

	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		shell_vt100_color_set(shell, SHELL_NORMAL);
     e70:	2100      	movs	r1, #0
     e72:	f000 fcbf 	bl	17f4 <shell_vt100_color_set>
	}

	shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
     e76:	4906      	ldr	r1, [pc, #24]	; (e90 <shell_start+0x2c>)
     e78:	6960      	ldr	r0, [r4, #20]
     e7a:	f004 fac5 	bl	5408 <shell_raw_fprintf>

	state_set(shell, SHELL_STATE_ACTIVE);
     e7e:	4620      	mov	r0, r4
     e80:	f004 fad8 	bl	5434 <state_set.constprop.31>

	return 0;
     e84:	2000      	movs	r0, #0
}
     e86:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
     e88:	f06f 0022 	mvn.w	r0, #34	; 0x22
     e8c:	e7fb      	b.n	e86 <shell_start+0x22>
     e8e:	bf00      	nop
     e90:	000072d3 	.word	0x000072d3

00000e94 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
     e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
     e98:	6883      	ldr	r3, [r0, #8]
     e9a:	f3bf 8f5b 	dmb	ish
     e9e:	b0ad      	sub	sp, #180	; 0xb4
     ea0:	4604      	mov	r4, r0
     ea2:	f503 7316 	add.w	r3, r3, #600	; 0x258
     ea6:	e853 2f00 	ldrex	r2, [r3]
     eaa:	f042 0208 	orr.w	r2, r2, #8
     eae:	e843 2100 	strex	r1, r2, [r3]
     eb2:	2900      	cmp	r1, #0
     eb4:	d1f7      	bne.n	ea6 <shell_process+0x12>
     eb6:	f3bf 8f5b 	dmb	ish
	internal.flags.processing = 1U;

	(void)atomic_or((atomic_t *)&shell->ctx->internal.value,
			internal.value);

	switch (shell->ctx->state) {
     eba:	68a3      	ldr	r3, [r4, #8]
     ebc:	791b      	ldrb	r3, [r3, #4]
     ebe:	2b02      	cmp	r3, #2
     ec0:	f040 8377 	bne.w	15b2 <shell_process+0x71e>
	size_t count = 0;
     ec4:	2300      	movs	r3, #0
     ec6:	930b      	str	r3, [sp, #44]	; 0x2c
		(void)shell->iface->api->read(shell->iface, &data,
     ec8:	6860      	ldr	r0, [r4, #4]
     eca:	6803      	ldr	r3, [r0, #0]
     ecc:	2201      	movs	r2, #1
     ece:	691d      	ldr	r5, [r3, #16]
     ed0:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
     ed4:	ab0b      	add	r3, sp, #44	; 0x2c
     ed6:	47a8      	blx	r5
		if (count == 0) {
     ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     eda:	2b00      	cmp	r3, #0
     edc:	f000 8369 	beq.w	15b2 <shell_process+0x71e>
		if (ascii_filter(data) != 0) {
     ee0:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
	return (u8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
     ee4:	0608      	lsls	r0, r1, #24
     ee6:	d4ef      	bmi.n	ec8 <shell_process+0x34>
		switch (shell->ctx->receive_state) {
     ee8:	68a0      	ldr	r0, [r4, #8]
     eea:	7943      	ldrb	r3, [r0, #5]
     eec:	2b02      	cmp	r3, #2
     eee:	f200 835e 	bhi.w	15ae <shell_process+0x71a>
     ef2:	e8df f013 	tbh	[pc, r3, lsl #1]
     ef6:	0003      	.short	0x0003
     ef8:	02f302ce 	.word	0x02f302ce
	if ((data != '\r') && (data != '\n')) {
     efc:	290d      	cmp	r1, #13
     efe:	d01b      	beq.n	f38 <shell_process+0xa4>
     f00:	290a      	cmp	r1, #10
     f02:	d019      	beq.n	f38 <shell_process+0xa4>
	return shell->ctx->internal.flags.last_nl;
}

static inline void flag_last_nl_set(const struct shell *shell, u8_t val)
{
	shell->ctx->internal.flags.last_nl = val;
     f04:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
     f08:	f36f 230f 	bfc	r3, #8, #8
     f0c:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
			switch (data) {
     f10:	2909      	cmp	r1, #9
     f12:	d055      	beq.n	fc0 <shell_process+0x12c>
     f14:	d83a      	bhi.n	f8c <shell_process+0xf8>
     f16:	2900      	cmp	r1, #0
     f18:	d0d6      	beq.n	ec8 <shell_process+0x34>
     f1a:	2908      	cmp	r1, #8
     f1c:	f000 821c 	beq.w	1358 <shell_process+0x4c4>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
     f20:	f1a1 0320 	sub.w	r3, r1, #32
				if (isprint((int) data)) {
     f24:	2b5e      	cmp	r3, #94	; 0x5e
     f26:	f200 8226 	bhi.w	1376 <shell_process+0x4e2>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
     f2a:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
     f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     f32:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
     f36:	e11f      	b.n	1178 <shell_process+0x2e4>
	return shell->ctx->internal.flags.last_nl;
     f38:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
	if ((flag_last_nl_get(shell) == 0U) ||
     f3c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
     f40:	d005      	beq.n	f4e <shell_process+0xba>
     f42:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
     f46:	f3c3 2307 	ubfx	r3, r3, #8, #8
     f4a:	4299      	cmp	r1, r3
     f4c:	d1e0      	bne.n	f10 <shell_process+0x7c>
	shell->ctx->internal.flags.last_nl = val;
     f4e:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
     f52:	f361 230f 	bfi	r3, r1, #8, #8
     f56:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
				if (!shell->ctx->cmd_buff_len &&
     f5a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
     f5c:	b993      	cbnz	r3, f84 <shell_process+0xf0>
     f5e:	69c2      	ldr	r2, [r0, #28]
     f60:	b982      	cbnz	r2, f84 <shell_process+0xf0>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
     f62:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
     f66:	f362 1386 	bfi	r3, r2, #6, #1
     f6a:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	shell_history_mode_exit(shell->history);
     f6e:	68e0      	ldr	r0, [r4, #12]
     f70:	f004 ff6f 	bl	5e52 <shell_history_mode_exit>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
     f74:	4985      	ldr	r1, [pc, #532]	; (118c <shell_process+0x2f8>)
     f76:	6960      	ldr	r0, [r4, #20]
     f78:	f004 fa46 	bl	5408 <shell_raw_fprintf>
		state_set(shell, SHELL_STATE_ACTIVE);
     f7c:	4620      	mov	r0, r4
     f7e:	f004 fa59 	bl	5434 <state_set.constprop.31>
		break;
     f82:	e7a1      	b.n	ec8 <shell_process+0x34>
					(void)execute(shell);
     f84:	4620      	mov	r0, r4
     f86:	f7ff fdb9 	bl	afc <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
     f8a:	e7f7      	b.n	f7c <shell_process+0xe8>
     f8c:	291b      	cmp	r1, #27
     f8e:	d014      	beq.n	fba <shell_process+0x126>
     f90:	297f      	cmp	r1, #127	; 0x7f
     f92:	d1c5      	bne.n	f20 <shell_process+0x8c>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
     f94:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
     f98:	075f      	lsls	r7, r3, #29
     f9a:	d595      	bpl.n	ec8 <shell_process+0x34>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
     f9c:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
     fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     fa4:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	return shell->ctx->internal.flags.mode_delete == 1 ? true : false;
     fa8:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
					if (flag_mode_delete_get(shell)) {
     fac:	069e      	lsls	r6, r3, #26
     fae:	f100 81de 	bmi.w	136e <shell_process+0x4da>
		shell_op_char_delete(shell);
     fb2:	4620      	mov	r0, r4
     fb4:	f004 fdff 	bl	5bb6 <shell_op_char_delete>
		break;
     fb8:	e786      	b.n	ec8 <shell_process+0x34>
	shell->ctx->receive_state = state;
     fba:	2301      	movs	r3, #1
     fbc:	7143      	strb	r3, [r0, #5]
     fbe:	e783      	b.n	ec8 <shell_process+0x34>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
     fc0:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
     fc4:	f3c3 0980 	ubfx	r9, r3, #2, #1
				if (flag_echo_get(shell)) {
     fc8:	f1b9 0f00 	cmp.w	r9, #0
     fcc:	f43f af7c 	beq.w	ec8 <shell_process+0x34>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
     fd0:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
     fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     fd8:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	if (compl_space == 0U) {
     fdc:	8e43      	ldrh	r3, [r0, #50]	; 0x32
     fde:	2bff      	cmp	r3, #255	; 0xff
     fe0:	f43f af72 	beq.w	ec8 <shell_process+0x34>
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
     fe4:	8e82      	ldrh	r2, [r0, #52]	; 0x34
     fe6:	f100 0138 	add.w	r1, r0, #56	; 0x38
     fea:	f500 709c 	add.w	r0, r0, #312	; 0x138
     fee:	f005 f8be 	bl	616e <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
     ff2:	68a2      	ldr	r2, [r4, #8]
     ff4:	8e93      	ldrh	r3, [r2, #52]	; 0x34
     ff6:	4413      	add	r3, r2
     ff8:	2100      	movs	r1, #0
     ffa:	f883 1138 	strb.w	r1, [r3, #312]	; 0x138
	(void)shell_make_argv(argc, *argv, shell->ctx->temp_buff,
     ffe:	f502 729c 	add.w	r2, r2, #312	; 0x138
    1002:	230c      	movs	r3, #12
    1004:	a91f      	add	r1, sp, #124	; 0x7c
    1006:	a80d      	add	r0, sp, #52	; 0x34
    1008:	f004 fabf 	bl	558a <shell_make_argv>
	int space = isspace((int)shell->ctx->cmd_buff[
    100c:	68a3      	ldr	r3, [r4, #8]
						shell->ctx->cmd_buff_pos - 1]);
    100e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
	int space = isspace((int)shell->ctx->cmd_buff[
    1010:	4413      	add	r3, r2
    1012:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    1016:	2b20      	cmp	r3, #32
    1018:	d054      	beq.n	10c4 <shell_process+0x230>
    101a:	3b09      	subs	r3, #9
    101c:	2b04      	cmp	r3, #4
    101e:	bf8c      	ite	hi
    1020:	2300      	movhi	r3, #0
    1022:	2301      	movls	r3, #1
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    1024:	990d      	ldr	r1, [sp, #52]	; 0x34
    1026:	b119      	cbz	r1, 1030 <shell_process+0x19c>
    1028:	2b00      	cmp	r3, #0
    102a:	d14e      	bne.n	10ca <shell_process+0x236>
    102c:	2901      	cmp	r1, #1
    102e:	d14b      	bne.n	10c8 <shell_process+0x234>
		*complete_arg_idx = SHELL_CMD_ROOT_LVL;
    1030:	2500      	movs	r5, #0
    1032:	950c      	str	r5, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    1034:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1036:	aa2c      	add	r2, sp, #176	; 0xb0
    1038:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
    103c:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    103e:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
    1042:	4650      	mov	r0, sl
    1044:	f004 f9da 	bl	53fc <shell_strlen>
	size_t idx = 0;
    1048:	46b0      	mov	r8, r6
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
    104a:	9004      	str	r0, [sp, #16]
	*longest = 0U;
    104c:	9605      	str	r6, [sp, #20]
	size_t first = 0;
    104e:	9603      	str	r6, [sp, #12]
	bool found = false;
    1050:	46b3      	mov	fp, r6
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    1052:	af1a      	add	r7, sp, #104	; 0x68
    1054:	2d00      	cmp	r5, #0
    1056:	d045      	beq.n	10e4 <shell_process+0x250>
    1058:	68a9      	ldr	r1, [r5, #8]
    105a:	1c2b      	adds	r3, r5, #0
    105c:	bf18      	it	ne
    105e:	2301      	movne	r3, #1
    1060:	e9cd 7301 	strd	r7, r3, [sp, #4]
    1064:	ab15      	add	r3, sp, #84	; 0x54
    1066:	9300      	str	r3, [sp, #0]
    1068:	9a02      	ldr	r2, [sp, #8]
    106a:	4643      	mov	r3, r8
    106c:	4620      	mov	r0, r4
    106e:	f000 fb29 	bl	16c4 <shell_cmd_get>
		if (!candidate) {
    1072:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1074:	2b00      	cmp	r3, #0
    1076:	d039      	beq.n	10ec <shell_process+0x258>
	return entry->syntax &&
    1078:	6818      	ldr	r0, [r3, #0]
		(entry->handler == NULL) && (entry->subcmd == NULL);
    107a:	2800      	cmp	r0, #0
    107c:	d034      	beq.n	10e8 <shell_process+0x254>
	return entry->syntax &&
    107e:	68da      	ldr	r2, [r3, #12]
    1080:	2a00      	cmp	r2, #0
    1082:	d131      	bne.n	10e8 <shell_process+0x254>
		(entry->handler == NULL) && (entry->subcmd == NULL);
    1084:	689b      	ldr	r3, [r3, #8]
    1086:	fab3 f383 	clz	r3, r3
    108a:	095b      	lsrs	r3, r3, #5
	return (strncmp(candidate, str, len) == 0) ? true : false;
    108c:	9a04      	ldr	r2, [sp, #16]
    108e:	9302      	str	r3, [sp, #8]
    1090:	4651      	mov	r1, sl
    1092:	f005 f836 	bl	6102 <strncmp>
		if (!is_empty && is_candidate) {
    1096:	9b02      	ldr	r3, [sp, #8]
    1098:	4303      	orrs	r3, r0
    109a:	d110      	bne.n	10be <shell_process+0x22a>
			size_t slen = strlen(candidate->syntax);
    109c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    109e:	6818      	ldr	r0, [r3, #0]
    10a0:	f005 f81c 	bl	60dc <strlen>
			*longest = (slen > *longest) ? slen : *longest;
    10a4:	9b05      	ldr	r3, [sp, #20]
    10a6:	4283      	cmp	r3, r0
    10a8:	bf38      	it	cc
    10aa:	4603      	movcc	r3, r0
    10ac:	b29b      	uxth	r3, r3
    10ae:	9305      	str	r3, [sp, #20]
			(*cnt)++;
    10b0:	3601      	adds	r6, #1
			if (!found) {
    10b2:	f1bb 0f00 	cmp.w	fp, #0
    10b6:	d102      	bne.n	10be <shell_process+0x22a>
				*first_idx = idx;
    10b8:	f8cd 800c 	str.w	r8, [sp, #12]
			found = true;
    10bc:	46cb      	mov	fp, r9
		idx++;
    10be:	f108 0801 	add.w	r8, r8, #1
    10c2:	e7c7      	b.n	1054 <shell_process+0x1c0>
    10c4:	2301      	movs	r3, #1
    10c6:	e7ad      	b.n	1024 <shell_process+0x190>
	search_argc = space ? *argc : *argc - 1;
    10c8:	3901      	subs	r1, #1
	*cmd = shell_get_last_command(shell, search_argc, *argv,
    10ca:	2300      	movs	r3, #0
    10cc:	9301      	str	r3, [sp, #4]
    10ce:	ab10      	add	r3, sp, #64	; 0x40
    10d0:	9300      	str	r3, [sp, #0]
    10d2:	aa1f      	add	r2, sp, #124	; 0x7c
    10d4:	ab0c      	add	r3, sp, #48	; 0x30
    10d6:	4620      	mov	r0, r4
    10d8:	f004 fb43 	bl	5762 <shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
    10dc:	4605      	mov	r5, r0
    10de:	2800      	cmp	r0, #0
    10e0:	d1a8      	bne.n	1034 <shell_process+0x1a0>
    10e2:	e6f1      	b.n	ec8 <shell_process+0x34>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    10e4:	4629      	mov	r1, r5
    10e6:	e7b8      	b.n	105a <shell_process+0x1c6>
		(entry->handler == NULL) && (entry->subcmd == NULL);
    10e8:	2300      	movs	r3, #0
    10ea:	e7cf      	b.n	108c <shell_process+0x1f8>
	if (cnt == 1) {
    10ec:	2e01      	cmp	r6, #1
    10ee:	d14f      	bne.n	1190 <shell_process+0x2fc>
		autocomplete(shell, cmd, argv[arg_idx], first);
    10f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10f2:	aa2c      	add	r2, sp, #176	; 0xb0
    10f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	u16_t arg_len = shell_strlen(arg);
    10f8:	f853 0c34 	ldr.w	r0, [r3, #-52]
    10fc:	f004 f97e 	bl	53fc <shell_strlen>
    1100:	4606      	mov	r6, r0
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    1102:	b105      	cbz	r5, 1106 <shell_process+0x272>
    1104:	68ad      	ldr	r5, [r5, #8]
    1106:	68a3      	ldr	r3, [r4, #8]
    1108:	3308      	adds	r3, #8
    110a:	e9cd 7300 	strd	r7, r3, [sp]
    110e:	4629      	mov	r1, r5
    1110:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1114:	4620      	mov	r0, r4
    1116:	f000 fad5 	bl	16c4 <shell_cmd_get>
	cmd_len = shell_strlen(match->syntax);
    111a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    111c:	6818      	ldr	r0, [r3, #0]
    111e:	f004 f96d 	bl	53fc <shell_strlen>
	if (cmd_len != arg_len) {
    1122:	4286      	cmp	r6, r0
    1124:	d007      	beq.n	1136 <shell_process+0x2a2>
					   match->syntax + arg_len,
    1126:	9b1a      	ldr	r3, [sp, #104]	; 0x68
		shell_op_completion_insert(shell,
    1128:	6819      	ldr	r1, [r3, #0]
    112a:	1b82      	subs	r2, r0, r6
    112c:	b292      	uxth	r2, r2
    112e:	4431      	add	r1, r6
    1130:	4620      	mov	r0, r4
    1132:	f004 fd3e 	bl	5bb2 <shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
    1136:	68a3      	ldr	r3, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
    1138:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
	if (!isspace((int) shell->ctx->cmd_buff[
    113a:	441a      	add	r2, r3
    113c:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
    1140:	2a20      	cmp	r2, #32
    1142:	d01d      	beq.n	1180 <shell_process+0x2ec>
    1144:	3a09      	subs	r2, #9
    1146:	2a04      	cmp	r2, #4
    1148:	d91a      	bls.n	1180 <shell_process+0x2ec>
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
    114a:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
		if (flag_insert_mode_get(shell)) {
    114e:	07d2      	lsls	r2, r2, #31
    1150:	d511      	bpl.n	1176 <shell_process+0x2e2>
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
    1152:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    1156:	f36f 0200 	bfc	r2, #0, #1
    115a:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
			shell_op_char_insert(shell, ' ');
    115e:	2120      	movs	r1, #32
    1160:	4620      	mov	r0, r4
    1162:	f000 fc0f 	bl	1984 <shell_op_char_insert>
			flag_insert_mode_set(shell, true);
    1166:	68a2      	ldr	r2, [r4, #8]
    1168:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    116c:	f043 0301 	orr.w	r3, r3, #1
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    1170:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
    1174:	e6a8      	b.n	ec8 <shell_process+0x34>
			shell_op_char_insert(shell, ' ');
    1176:	2120      	movs	r1, #32
					shell_op_char_insert(shell, data);
    1178:	4620      	mov	r0, r4
    117a:	f000 fc03 	bl	1984 <shell_op_char_insert>
    117e:	e6a3      	b.n	ec8 <shell_process+0x34>
		shell_op_cursor_move(shell, 1);
    1180:	2101      	movs	r1, #1
    1182:	4620      	mov	r0, r4
    1184:	f004 fbd9 	bl	593a <shell_op_cursor_move>
    1188:	e69e      	b.n	ec8 <shell_process+0x34>
    118a:	bf00      	nop
    118c:	000072d4 	.word	0x000072d4
    1190:	9306      	str	r3, [sp, #24]
	} else if (cnt > 1) {
    1192:	f67f ae99 	bls.w	ec8 <shell_process+0x34>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
    1196:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	longest_option += shell_strlen(tab);
    1198:	f8df 833c 	ldr.w	r8, [pc, #828]	; 14d8 <shell_process+0x644>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
    119c:	ab2c      	add	r3, sp, #176	; 0xb0
    119e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    11a2:	f852 3c34 	ldr.w	r3, [r2, #-52]
    11a6:	9304      	str	r3, [sp, #16]
	size_t str_len = shell_strlen(str);
    11a8:	4618      	mov	r0, r3
    11aa:	f004 f927 	bl	53fc <shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    11ae:	68a2      	ldr	r2, [r4, #8]
    11b0:	9b06      	ldr	r3, [sp, #24]
    11b2:	f8dd 900c 	ldr.w	r9, [sp, #12]
	size_t str_len = shell_strlen(str);
    11b6:	9008      	str	r0, [sp, #32]
		shell->ctx->vt100_ctx.printed_cmd = 0;
    11b8:	8613      	strh	r3, [r2, #48]	; 0x30
    11ba:	9606      	str	r6, [sp, #24]
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    11bc:	2d00      	cmp	r5, #0
    11be:	d07b      	beq.n	12b8 <shell_process+0x424>
    11c0:	68a9      	ldr	r1, [r5, #8]
    11c2:	68a3      	ldr	r3, [r4, #8]
    11c4:	9a02      	ldr	r2, [sp, #8]
    11c6:	3308      	adds	r3, #8
    11c8:	9301      	str	r3, [sp, #4]
    11ca:	ab1a      	add	r3, sp, #104	; 0x68
    11cc:	9300      	str	r3, [sp, #0]
    11ce:	4620      	mov	r0, r4
    11d0:	464b      	mov	r3, r9
    11d2:	f000 fa77 	bl	16c4 <shell_cmd_get>
		is_empty = is_empty_cmd(match);
    11d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
	return entry->syntax &&
    11d8:	6818      	ldr	r0, [r3, #0]
		idx++;
    11da:	f109 0901 	add.w	r9, r9, #1
		(entry->handler == NULL) && (entry->subcmd == NULL);
    11de:	2800      	cmp	r0, #0
    11e0:	d16c      	bne.n	12bc <shell_process+0x428>
		tab_item_print(shell, match->syntax, longest);
    11e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    11e4:	f8d3 a000 	ldr.w	sl, [r3]
	if (option == NULL) {
    11e8:	f1ba 0f00 	cmp.w	sl, #0
    11ec:	d176      	bne.n	12dc <shell_process+0x448>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    11ee:	68a3      	ldr	r3, [r4, #8]
    11f0:	f8a3 a030 	strh.w	sl, [r3, #48]	; 0x30
	while (cnt) {
    11f4:	9b06      	ldr	r3, [sp, #24]
    11f6:	3b01      	subs	r3, #1
    11f8:	9306      	str	r3, [sp, #24]
    11fa:	d1df      	bne.n	11bc <shell_process+0x328>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    11fc:	49b0      	ldr	r1, [pc, #704]	; (14c0 <shell_process+0x62c>)
    11fe:	6960      	ldr	r0, [r4, #20]
    1200:	f004 f902 	bl	5408 <shell_raw_fprintf>
	shell_print_prompt_and_cmd(shell);
    1204:	4620      	mov	r0, r4
    1206:	f000 fbef 	bl	19e8 <shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
    120a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    120c:	aa2c      	add	r2, sp, #176	; 0xb0
    120e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	u16_t arg_len = shell_strlen(arg);
    1212:	f853 0c34 	ldr.w	r0, [r3, #-52]
    1216:	f004 f8f1 	bl	53fc <shell_strlen>
	size_t idx = first + 1;
    121a:	9b03      	ldr	r3, [sp, #12]
	u16_t arg_len = shell_strlen(arg);
    121c:	4680      	mov	r8, r0
	size_t idx = first + 1;
    121e:	f103 0901 	add.w	r9, r3, #1
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    1222:	2d00      	cmp	r5, #0
    1224:	f000 8092 	beq.w	134c <shell_process+0x4b8>
    1228:	68a9      	ldr	r1, [r5, #8]
    122a:	ab15      	add	r3, sp, #84	; 0x54
    122c:	9301      	str	r3, [sp, #4]
    122e:	ab0e      	add	r3, sp, #56	; 0x38
    1230:	9300      	str	r3, [sp, #0]
    1232:	4620      	mov	r0, r4
    1234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1238:	f000 fa44 	bl	16c4 <shell_cmd_get>
	*str = match->syntax;
    123c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    123e:	f8d3 a000 	ldr.w	sl, [r3]
	u16_t common = UINT16_MAX;
    1242:	f64f 77ff 	movw	r7, #65535	; 0xffff
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    1246:	2d00      	cmp	r5, #0
    1248:	f000 8084 	beq.w	1354 <shell_process+0x4c0>
    124c:	68a9      	ldr	r1, [r5, #8]
    124e:	9a02      	ldr	r2, [sp, #8]
    1250:	ab1a      	add	r3, sp, #104	; 0x68
    1252:	9301      	str	r3, [sp, #4]
    1254:	ab0f      	add	r3, sp, #60	; 0x3c
    1256:	9300      	str	r3, [sp, #0]
    1258:	4620      	mov	r0, r4
    125a:	464b      	mov	r3, r9
    125c:	f000 fa32 	bl	16c4 <shell_cmd_get>
		if (match2 == NULL) {
    1260:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    1262:	f109 0b01 	add.w	fp, r9, #1
		if (match2 == NULL) {
    1266:	b1db      	cbz	r3, 12a0 <shell_process+0x40c>
		curr_common = str_common(match->syntax, match2->syntax,
    1268:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    126a:	6818      	ldr	r0, [r3, #0]
    126c:	6811      	ldr	r1, [r2, #0]
	size_t common = 0;
    126e:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    1270:	f811 c002 	ldrb.w	ip, [r1, r2]
    1274:	5c83      	ldrb	r3, [r0, r2]
    1276:	4563      	cmp	r3, ip
    1278:	d105      	bne.n	1286 <shell_process+0x3f2>
    127a:	b123      	cbz	r3, 1286 <shell_process+0x3f2>
		common++;
    127c:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    127e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1282:	429a      	cmp	r2, r3
    1284:	d1f4      	bne.n	1270 <shell_process+0x3dc>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
    1286:	f1b8 0f00 	cmp.w	r8, #0
    128a:	d001      	beq.n	1290 <shell_process+0x3fc>
    128c:	4542      	cmp	r2, r8
    128e:	db5f      	blt.n	1350 <shell_process+0x4bc>
			common = (curr_common < common) ? curr_common : common;
    1290:	4297      	cmp	r7, r2
			--cnt;
    1292:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
			common = (curr_common < common) ? curr_common : common;
    1296:	bfa8      	it	ge
    1298:	4617      	movge	r7, r2
	while (cnt > 1) {
    129a:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
    129c:	b2bf      	uxth	r7, r7
	while (cnt > 1) {
    129e:	d157      	bne.n	1350 <shell_process+0x4bc>
	if (common) {
    12a0:	2f00      	cmp	r7, #0
    12a2:	f43f ae11 	beq.w	ec8 <shell_process+0x34>
		shell_op_completion_insert(shell, &completion[arg_len],
    12a6:	eba7 0208 	sub.w	r2, r7, r8
    12aa:	b292      	uxth	r2, r2
    12ac:	eb0a 0108 	add.w	r1, sl, r8
    12b0:	4620      	mov	r0, r4
    12b2:	f004 fc7e 	bl	5bb2 <shell_op_completion_insert>
    12b6:	e607      	b.n	ec8 <shell_process+0x34>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    12b8:	4629      	mov	r1, r5
    12ba:	e782      	b.n	11c2 <shell_process+0x32e>
	return entry->syntax &&
    12bc:	68da      	ldr	r2, [r3, #12]
    12be:	b91a      	cbnz	r2, 12c8 <shell_process+0x434>
		(entry->handler == NULL) && (entry->subcmd == NULL);
    12c0:	689b      	ldr	r3, [r3, #8]
    12c2:	2b00      	cmp	r3, #0
    12c4:	f43f af7a 	beq.w	11bc <shell_process+0x328>
		if (is_empty || (str && match->syntax &&
    12c8:	9b04      	ldr	r3, [sp, #16]
    12ca:	2b00      	cmp	r3, #0
    12cc:	d089      	beq.n	11e2 <shell_process+0x34e>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    12ce:	9a08      	ldr	r2, [sp, #32]
    12d0:	9904      	ldr	r1, [sp, #16]
    12d2:	f004 ff16 	bl	6102 <strncmp>
		if (is_empty || (str && match->syntax &&
    12d6:	2800      	cmp	r0, #0
    12d8:	d083      	beq.n	11e2 <shell_process+0x34e>
    12da:	e76f      	b.n	11bc <shell_process+0x328>
	longest_option += shell_strlen(tab);
    12dc:	4640      	mov	r0, r8
    12de:	f004 f88d 	bl	53fc <shell_strlen>
    12e2:	9b05      	ldr	r3, [sp, #20]
    12e4:	4418      	add	r0, r3
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    12e6:	68a3      	ldr	r3, [r4, #8]
	longest_option += shell_strlen(tab);
    12e8:	fa1f fb80 	uxth.w	fp, r0
			- shell_strlen(tab)) / longest_option;
    12ec:	4640      	mov	r0, r8
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    12ee:	8d5f      	ldrh	r7, [r3, #42]	; 0x2a
			- shell_strlen(tab)) / longest_option;
    12f0:	f004 f884 	bl	53fc <shell_strlen>
    12f4:	9009      	str	r0, [sp, #36]	; 0x24
	diff = longest_option - shell_strlen(option);
    12f6:	4650      	mov	r0, sl
    12f8:	f004 f880 	bl	53fc <shell_strlen>
    12fc:	ebab 0000 	sub.w	r0, fp, r0
    1300:	b283      	uxth	r3, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    1302:	68a1      	ldr	r1, [r4, #8]
	diff = longest_option - shell_strlen(option);
    1304:	9307      	str	r3, [sp, #28]
			- shell_strlen(tab)) / longest_option;
    1306:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    1308:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
			- shell_strlen(tab)) / longest_option;
    130a:	1aff      	subs	r7, r7, r3
    130c:	fb97 fbfb 	sdiv	fp, r7, fp
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    1310:	fa1f fb8b 	uxth.w	fp, fp
    1314:	1c50      	adds	r0, r2, #1
    1316:	fbb2 f3fb 	udiv	r3, r2, fp
    131a:	fb0b 2213 	mls	r2, fp, r3, r2
    131e:	b292      	uxth	r2, r2
    1320:	8608      	strh	r0, [r1, #48]	; 0x30
    1322:	b962      	cbnz	r2, 133e <shell_process+0x4aa>
		shell_internal_fprintf(shell, SHELL_OPTION, "\n%s%s", tab,
    1324:	f8cd a000 	str.w	sl, [sp]
    1328:	4643      	mov	r3, r8
    132a:	4a66      	ldr	r2, [pc, #408]	; (14c4 <shell_process+0x630>)
    132c:	2107      	movs	r1, #7
    132e:	4620      	mov	r0, r4
    1330:	f004 fc00 	bl	5b34 <shell_internal_fprintf>
	shell_op_cursor_horiz_move(shell, diff);
    1334:	9907      	ldr	r1, [sp, #28]
    1336:	4620      	mov	r0, r4
    1338:	f000 fa06 	bl	1748 <shell_op_cursor_horiz_move>
    133c:	e75a      	b.n	11f4 <shell_process+0x360>
		shell_internal_fprintf(shell, SHELL_OPTION, "%s", option);
    133e:	4653      	mov	r3, sl
    1340:	4a61      	ldr	r2, [pc, #388]	; (14c8 <shell_process+0x634>)
    1342:	2107      	movs	r1, #7
    1344:	4620      	mov	r0, r4
    1346:	f004 fbf5 	bl	5b34 <shell_internal_fprintf>
    134a:	e7f3      	b.n	1334 <shell_process+0x4a0>
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    134c:	4629      	mov	r1, r5
    134e:	e76c      	b.n	122a <shell_process+0x396>
    1350:	46d9      	mov	r9, fp
    1352:	e778      	b.n	1246 <shell_process+0x3b2>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    1354:	4629      	mov	r1, r5
    1356:	e77a      	b.n	124e <shell_process+0x3ba>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    1358:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
    135c:	075b      	lsls	r3, r3, #29
    135e:	f57f adb3 	bpl.w	ec8 <shell_process+0x34>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    1362:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    1366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    136a:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
						shell_op_char_backspace(shell);
    136e:	4620      	mov	r0, r4
    1370:	f004 fc3c 	bl	5bec <shell_op_char_backspace>
    1374:	e5a8      	b.n	ec8 <shell_process+0x34>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    1376:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				} else if (flag_echo_get(shell)) {
    137a:	075d      	lsls	r5, r3, #29
    137c:	f57f ada4 	bpl.w	ec8 <shell_process+0x34>
	switch (data) {
    1380:	3901      	subs	r1, #1
    1382:	2916      	cmp	r1, #22
    1384:	f63f ada0 	bhi.w	ec8 <shell_process+0x34>
    1388:	a301      	add	r3, pc, #4	; (adr r3, 1390 <shell_process+0x4fc>)
    138a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    138e:	bf00      	nop
    1390:	00001579 	.word	0x00001579
    1394:	000013ed 	.word	0x000013ed
    1398:	000013f5 	.word	0x000013f5
    139c:	00000fb3 	.word	0x00000fb3
    13a0:	0000156d 	.word	0x0000156d
    13a4:	0000141b 	.word	0x0000141b
    13a8:	00000ec9 	.word	0x00000ec9
    13ac:	00000ec9 	.word	0x00000ec9
    13b0:	00000ec9 	.word	0x00000ec9
    13b4:	00000ec9 	.word	0x00000ec9
    13b8:	00001423 	.word	0x00001423
    13bc:	0000142b 	.word	0x0000142b
    13c0:	00000ec9 	.word	0x00000ec9
    13c4:	00001447 	.word	0x00001447
    13c8:	00000ec9 	.word	0x00000ec9
    13cc:	00001451 	.word	0x00001451
    13d0:	00000ec9 	.word	0x00000ec9
    13d4:	00000ec9 	.word	0x00000ec9
    13d8:	00000ec9 	.word	0x00000ec9
    13dc:	00000ec9 	.word	0x00000ec9
    13e0:	00001455 	.word	0x00001455
    13e4:	00000ec9 	.word	0x00000ec9
    13e8:	00001481 	.word	0x00001481
		shell_op_left_arrow(shell);
    13ec:	4620      	mov	r0, r4
    13ee:	f004 fb0f 	bl	5a10 <shell_op_left_arrow>
		break;
    13f2:	e569      	b.n	ec8 <shell_process+0x34>
		shell_op_cursor_end_move(shell);
    13f4:	4620      	mov	r0, r4
    13f6:	f004 fb04 	bl	5a02 <shell_op_cursor_end_move>
		if (!shell_cursor_in_empty_line(shell)) {
    13fa:	4620      	mov	r0, r4
    13fc:	f004 fa89 	bl	5912 <shell_cursor_in_empty_line>
    1400:	b918      	cbnz	r0, 140a <shell_process+0x576>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    1402:	492f      	ldr	r1, [pc, #188]	; (14c0 <shell_process+0x62c>)
    1404:	6960      	ldr	r0, [r4, #20]
    1406:	f003 ffff 	bl	5408 <shell_raw_fprintf>
		flag_history_exit_set(shell, true);
    140a:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    140c:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    1410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1414:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
    1418:	e5b0      	b.n	f7c <shell_process+0xe8>
		shell_op_right_arrow(shell);
    141a:	4620      	mov	r0, r4
    141c:	f004 fb00 	bl	5a20 <shell_op_right_arrow>
		break;
    1420:	e552      	b.n	ec8 <shell_process+0x34>
		shell_op_delete_from_cursor(shell);
    1422:	4620      	mov	r0, r4
    1424:	f004 fb05 	bl	5a32 <shell_op_delete_from_cursor>
		break;
    1428:	e54e      	b.n	ec8 <shell_process+0x34>
		SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    142a:	6960      	ldr	r0, [r4, #20]
    142c:	4a27      	ldr	r2, [pc, #156]	; (14cc <shell_process+0x638>)
    142e:	4926      	ldr	r1, [pc, #152]	; (14c8 <shell_process+0x634>)
    1430:	f003 ffea 	bl	5408 <shell_raw_fprintf>
		SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    1434:	6960      	ldr	r0, [r4, #20]
    1436:	4a26      	ldr	r2, [pc, #152]	; (14d0 <shell_process+0x63c>)
    1438:	4923      	ldr	r1, [pc, #140]	; (14c8 <shell_process+0x634>)
    143a:	f003 ffe5 	bl	5408 <shell_raw_fprintf>
		shell_print_prompt_and_cmd(shell);
    143e:	4620      	mov	r0, r4
    1440:	f000 fad2 	bl	19e8 <shell_print_prompt_and_cmd>
		break;
    1444:	e540      	b.n	ec8 <shell_process+0x34>
		history_handle(shell, false);
    1446:	2100      	movs	r1, #0
		history_handle(shell, true);
    1448:	4620      	mov	r0, r4
    144a:	f7ff fb05 	bl	a58 <history_handle>
		break;
    144e:	e53b      	b.n	ec8 <shell_process+0x34>
		history_handle(shell, true);
    1450:	2101      	movs	r1, #1
    1452:	e7f9      	b.n	1448 <shell_process+0x5b4>
		shell_op_cursor_home_move(shell);
    1454:	4620      	mov	r0, r4
    1456:	f004 face 	bl	59f6 <shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
    145a:	68a3      	ldr	r3, [r4, #8]
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    145c:	491a      	ldr	r1, [pc, #104]	; (14c8 <shell_process+0x634>)
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    145e:	2200      	movs	r2, #0
    1460:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
    1464:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
    1466:	865a      	strh	r2, [r3, #50]	; 0x32
		flag_history_exit_set(shell, true);
    1468:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    146a:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    146e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1472:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    1476:	6960      	ldr	r0, [r4, #20]
    1478:	4a16      	ldr	r2, [pc, #88]	; (14d4 <shell_process+0x640>)
    147a:	f003 ffc5 	bl	5408 <shell_raw_fprintf>
    147e:	e523      	b.n	ec8 <shell_process+0x34>
		shell_op_word_remove(shell);
    1480:	4620      	mov	r0, r4
    1482:	f000 fa01 	bl	1888 <shell_op_word_remove>
		flag_history_exit_set(shell, true);
    1486:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    1488:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    148c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1490:	e66e      	b.n	1170 <shell_process+0x2dc>
			if (data == '[') {
    1492:	295b      	cmp	r1, #91	; 0x5b
    1494:	d101      	bne.n	149a <shell_process+0x606>
	shell->ctx->receive_state = state;
    1496:	2302      	movs	r3, #2
    1498:	e590      	b.n	fbc <shell_process+0x128>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    149a:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
			} else if (flag_echo_get(shell)) {
    149e:	0758      	lsls	r0, r3, #29
    14a0:	d506      	bpl.n	14b0 <shell_process+0x61c>
	if (data == SHELL_VT100_ASCII_ALT_B) {
    14a2:	2962      	cmp	r1, #98	; 0x62
    14a4:	d108      	bne.n	14b8 <shell_process+0x624>
		shell_op_cursor_word_move(shell, -1);
    14a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		shell_op_cursor_word_move(shell, 1);
    14aa:	4620      	mov	r0, r4
    14ac:	f004 fa69 	bl	5982 <shell_op_cursor_word_move>
	shell->ctx->receive_state = state;
    14b0:	68a3      	ldr	r3, [r4, #8]
    14b2:	2200      	movs	r2, #0
    14b4:	715a      	strb	r2, [r3, #5]
    14b6:	e507      	b.n	ec8 <shell_process+0x34>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
    14b8:	2966      	cmp	r1, #102	; 0x66
    14ba:	d1f9      	bne.n	14b0 <shell_process+0x61c>
		shell_op_cursor_word_move(shell, 1);
    14bc:	2101      	movs	r1, #1
    14be:	e7f4      	b.n	14aa <shell_process+0x616>
    14c0:	000072d4 	.word	0x000072d4
    14c4:	000072cd 	.word	0x000072cd
    14c8:	00007e02 	.word	0x00007e02
    14cc:	00007227 	.word	0x00007227
    14d0:	0000722b 	.word	0x0000722b
    14d4:	00007223 	.word	0x00007223
    14d8:	000072ca 	.word	0x000072ca
	shell->ctx->receive_state = state;
    14dc:	2300      	movs	r3, #0
    14de:	7143      	strb	r3, [r0, #5]
    14e0:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
			if (!flag_echo_get(shell)) {
    14e4:	075a      	lsls	r2, r3, #29
    14e6:	f57f acef 	bpl.w	ec8 <shell_process+0x34>
			switch (data) {
    14ea:	3931      	subs	r1, #49	; 0x31
    14ec:	291b      	cmp	r1, #27
    14ee:	f63f aceb 	bhi.w	ec8 <shell_process+0x34>
    14f2:	a301      	add	r3, pc, #4	; (adr r3, 14f8 <shell_process+0x664>)
    14f4:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    14f8:	00001575 	.word	0x00001575
    14fc:	00001581 	.word	0x00001581
    1500:	0000159f 	.word	0x0000159f
    1504:	00001569 	.word	0x00001569
    1508:	00000ec9 	.word	0x00000ec9
    150c:	00000ec9 	.word	0x00000ec9
    1510:	00000ec9 	.word	0x00000ec9
    1514:	00000ec9 	.word	0x00000ec9
    1518:	00000ec9 	.word	0x00000ec9
    151c:	00000ec9 	.word	0x00000ec9
    1520:	00000ec9 	.word	0x00000ec9
    1524:	00000ec9 	.word	0x00000ec9
    1528:	00000ec9 	.word	0x00000ec9
    152c:	00000ec9 	.word	0x00000ec9
    1530:	00000ec9 	.word	0x00000ec9
    1534:	00000ec9 	.word	0x00000ec9
    1538:	00001451 	.word	0x00001451
    153c:	00001447 	.word	0x00001447
    1540:	0000141b 	.word	0x0000141b
    1544:	000013ed 	.word	0x000013ed
    1548:	00000ec9 	.word	0x00000ec9
    154c:	0000156d 	.word	0x0000156d
    1550:	00000ec9 	.word	0x00000ec9
    1554:	00001579 	.word	0x00001579
    1558:	00000ec9 	.word	0x00000ec9
    155c:	00000ec9 	.word	0x00000ec9
    1560:	00000ec9 	.word	0x00000ec9
    1564:	00001585 	.word	0x00001585
	shell->ctx->receive_state = state;
    1568:	2303      	movs	r3, #3
    156a:	7143      	strb	r3, [r0, #5]
		shell_op_cursor_end_move(shell);
    156c:	4620      	mov	r0, r4
    156e:	f004 fa48 	bl	5a02 <shell_op_cursor_end_move>
		break;
    1572:	e4a9      	b.n	ec8 <shell_process+0x34>
	shell->ctx->receive_state = state;
    1574:	2303      	movs	r3, #3
    1576:	7143      	strb	r3, [r0, #5]
		shell_op_cursor_home_move(shell);
    1578:	4620      	mov	r0, r4
    157a:	f004 fa3c 	bl	59f6 <shell_op_cursor_home_move>
		break;
    157e:	e4a3      	b.n	ec8 <shell_process+0x34>
	shell->ctx->receive_state = state;
    1580:	2303      	movs	r3, #3
    1582:	7143      	strb	r3, [r0, #5]
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
    1584:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
    1588:	f8b0 2258 	ldrh.w	r2, [r0, #600]	; 0x258
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
    158c:	f003 0301 	and.w	r3, r3, #1
				flag_insert_mode_set(shell, !status);
    1590:	f083 0301 	eor.w	r3, r3, #1
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
    1594:	f363 0200 	bfi	r2, r3, #0, #1
    1598:	f8a0 2258 	strh.w	r2, [r0, #600]	; 0x258
    159c:	e494      	b.n	ec8 <shell_process+0x34>
	shell->ctx->receive_state = state;
    159e:	2303      	movs	r3, #3
    15a0:	7143      	strb	r3, [r0, #5]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    15a2:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
    15a6:	075b      	lsls	r3, r3, #29
    15a8:	f57f ac8e 	bpl.w	ec8 <shell_process+0x34>
    15ac:	e501      	b.n	fb2 <shell_process+0x11e>
	shell->ctx->receive_state = state;
    15ae:	2300      	movs	r3, #0
    15b0:	e504      	b.n	fbc <shell_process+0x128>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    15b2:	68a3      	ldr	r3, [r4, #8]
    15b4:	f3bf 8f5b 	dmb	ish
    15b8:	f503 7316 	add.w	r3, r3, #600	; 0x258
    15bc:	e853 2f00 	ldrex	r2, [r3]
    15c0:	f022 0208 	bic.w	r2, r2, #8
    15c4:	e843 2100 	strex	r1, r2, [r3]
    15c8:	2900      	cmp	r1, #0
    15ca:	d1f7      	bne.n	15bc <shell_process+0x728>
    15cc:	f3bf 8f5b 	dmb	ish

	internal.value = 0xFFFFFFFF;
	internal.flags.processing = 0U;
	(void)atomic_and((atomic_t *)&shell->ctx->internal.value,
			 internal.value);
}
    15d0:	b02d      	add	sp, #180	; 0xb4
    15d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15d6:	bf00      	nop

000015d8 <shell_thread>:
{
    15d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    15da:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
    15dc:	6840      	ldr	r0, [r0, #4]
    15de:	6803      	ldr	r3, [r0, #0]
    15e0:	2100      	movs	r1, #0
    15e2:	689b      	ldr	r3, [r3, #8]
    15e4:	4798      	blx	r3
	if (err != 0) {
    15e6:	b9d0      	cbnz	r0, 161e <shell_thread+0x46>
	err = shell_start(shell);
    15e8:	4620      	mov	r0, r4
    15ea:	f7ff fc3b 	bl	e64 <shell_start>
	if (err != 0) {
    15ee:	b9b0      	cbnz	r0, 161e <shell_thread+0x46>
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
    15f0:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
    15f2:	2103      	movs	r1, #3
    15f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    15f8:	f500 7027 	add.w	r0, r0, #668	; 0x29c
    15fc:	f003 fa2e 	bl	4a5c <z_impl_k_poll>
    1600:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    1602:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    1604:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1608:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    160c:	f002 fcf0 	bl	3ff0 <z_impl_k_mutex_lock>
		if (err != 0) {
    1610:	b13d      	cbz	r5, 1622 <shell_thread+0x4a>
			shell_internal_fprintf(shell, SHELL_ERROR,
    1612:	462b      	mov	r3, r5
    1614:	4a20      	ldr	r2, [pc, #128]	; (1698 <shell_thread+0xc0>)
    1616:	2102      	movs	r1, #2
    1618:	4620      	mov	r0, r4
    161a:	f004 fa8b 	bl	5b34 <shell_internal_fprintf>
}
    161e:	b003      	add	sp, #12
    1620:	bd30      	pop	{r4, r5, pc}
		if (shell->iface->api->update) {
    1622:	6860      	ldr	r0, [r4, #4]
    1624:	6803      	ldr	r3, [r0, #0]
    1626:	695b      	ldr	r3, [r3, #20]
    1628:	b103      	cbz	r3, 162c <shell_thread+0x54>
			shell->iface->api->update(shell->iface);
    162a:	4798      	blx	r3
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
    162c:	68a5      	ldr	r5, [r4, #8]

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal)

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result)
    162e:	aa01      	add	r2, sp, #4
    1630:	4669      	mov	r1, sp
    1632:	f505 701f 	add.w	r0, r5, #636	; 0x27c
    1636:	f005 f9cc 	bl	69d2 <z_impl_k_poll_signal_check>
	if (set) {
    163a:	9b00      	ldr	r3, [sp, #0]
    163c:	b1b3      	cbz	r3, 166c <shell_thread+0x94>
 */
__syscall void k_poll_signal_reset(struct k_poll_signal *signal);

static inline void z_impl_k_poll_signal_reset(struct k_poll_signal *signal)
{
	signal->signaled = 0U;
    163e:	2300      	movs	r3, #0
    1640:	f8c5 3284 	str.w	r3, [r5, #644]	; 0x284
	if (flag_processing_get(shell)) {
    1644:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.processing == 1 ? true : false;
    1646:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    164a:	071b      	lsls	r3, r3, #28
    164c:	d40a      	bmi.n	1664 <shell_thread+0x8c>
	err = shell->iface->api->uninit(shell->iface);
    164e:	6860      	ldr	r0, [r4, #4]
    1650:	6803      	ldr	r3, [r0, #0]
    1652:	685b      	ldr	r3, [r3, #4]
    1654:	4798      	blx	r3
	if (err != 0) {
    1656:	4605      	mov	r5, r0
    1658:	b920      	cbnz	r0, 1664 <shell_thread+0x8c>
	shell_history_purge(shell->history);
    165a:	68e0      	ldr	r0, [r4, #12]
    165c:	f004 fc27 	bl	5eae <shell_history_purge>
	shell->ctx->state = SHELL_STATE_UNINITIALIZED;
    1660:	68a3      	ldr	r3, [r4, #8]
    1662:	711d      	strb	r5, [r3, #4]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    1664:	f003 f826 	bl	46b4 <z_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    1668:	f001 fa2c 	bl	2ac4 <z_impl_k_thread_abort>
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
    166c:	68a5      	ldr	r5, [r4, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result)
    166e:	aa01      	add	r2, sp, #4
    1670:	4669      	mov	r1, sp
    1672:	f505 7017 	add.w	r0, r5, #604	; 0x25c
    1676:	f005 f9ac 	bl	69d2 <z_impl_k_poll_signal_check>
	if (set) {
    167a:	9b00      	ldr	r3, [sp, #0]
    167c:	b12b      	cbz	r3, 168a <shell_thread+0xb2>
    167e:	2300      	movs	r3, #0
    1680:	f8c5 3264 	str.w	r3, [r5, #612]	; 0x264
		handler(shell);
    1684:	4620      	mov	r0, r4
    1686:	f7ff fc05 	bl	e94 <shell_process>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    168a:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    168c:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    1690:	f002 fd1e 	bl	40d0 <z_impl_k_mutex_unlock>
    1694:	e7ac      	b.n	15f0 <shell_thread+0x18>
    1696:	bf00      	nop
    1698:	000072d6 	.word	0x000072d6

0000169c <shell_fprintf_fmt>:
	return 0;
}

void shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
		       const char *fmt, va_list args)
{
    169c:	b510      	push	{r4, lr}
    169e:	4604      	mov	r4, r0
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX)
	(void)z_prf(out_func, (void *)sh_fprintf, (char *)fmt, args);
    16a0:	4613      	mov	r3, r2
    16a2:	460a      	mov	r2, r1
    16a4:	4601      	mov	r1, r0
    16a6:	4806      	ldr	r0, [pc, #24]	; (16c0 <shell_fprintf_fmt+0x24>)
    16a8:	f001 faf2 	bl	2c90 <z_prf>
#else
	z_vprintk(out_func, (void *)sh_fprintf, fmt, args);
#endif

	if (sh_fprintf->ctrl_blk->autoflush) {
    16ac:	6923      	ldr	r3, [r4, #16]
    16ae:	791b      	ldrb	r3, [r3, #4]
    16b0:	b123      	cbz	r3, 16bc <shell_fprintf_fmt+0x20>
		shell_fprintf_buffer_flush(sh_fprintf);
    16b2:	4620      	mov	r0, r4
	}
}
    16b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_fprintf_buffer_flush(sh_fprintf);
    16b8:	f003 beff 	b.w	54ba <shell_fprintf_buffer_flush>
}
    16bc:	bd10      	pop	{r4, pc}
    16be:	bf00      	nop
    16c0:	000054d3 	.word	0x000054d3

000016c4 <shell_cmd_get>:

void shell_cmd_get(const struct shell *shell,
		   const struct shell_cmd_entry *command, size_t lvl,
		   size_t idx, const struct shell_static_entry **entry,
		   struct shell_static_entry *d_entry)
{
    16c4:	b570      	push	{r4, r5, r6, lr}
    16c6:	e9dd 4604 	ldrd	r4, r6, [sp, #16]
	__ASSERT_NO_MSG(entry != NULL);
	__ASSERT_NO_MSG(d_entry != NULL);

	*entry = NULL;
    16ca:	2000      	movs	r0, #0
    16cc:	6020      	str	r0, [r4, #0]

	if (lvl == SHELL_CMD_ROOT_LVL) {
    16ce:	b952      	cbnz	r2, 16e6 <shell_cmd_get+0x22>
	return ((u8_t *)__shell_root_cmds_end -
    16d0:	480f      	ldr	r0, [pc, #60]	; (1710 <shell_cmd_get+0x4c>)
    16d2:	4a10      	ldr	r2, [pc, #64]	; (1714 <shell_cmd_get+0x50>)
    16d4:	1a12      	subs	r2, r2, r0
			const struct shell_static_entry *ptr =
						       shell->ctx->selected_cmd;
			if (ptr->subcmd->u.entry[idx].syntax != NULL) {
				*entry = &ptr->subcmd->u.entry[idx];
			}
		} else if (idx < shell_root_cmd_count()) {
    16d6:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
    16da:	d203      	bcs.n	16e4 <shell_cmd_get+0x20>
			const struct shell_cmd_entry *cmd;

			cmd = shell_root_cmd_get(idx);
			*entry = cmd->u.entry;
    16dc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    16e0:	685b      	ldr	r3, [r3, #4]
    16e2:	6023      	str	r3, [r4, #0]
	} else {
		if (command->u.entry[idx].syntax != NULL) {
			*entry = &command->u.entry[idx];
		}
	}
}
    16e4:	bd70      	pop	{r4, r5, r6, pc}
	if (command == NULL) {
    16e6:	2900      	cmp	r1, #0
    16e8:	d0fc      	beq.n	16e4 <shell_cmd_get+0x20>
	if (command->is_dynamic) {
    16ea:	780a      	ldrb	r2, [r1, #0]
    16ec:	684d      	ldr	r5, [r1, #4]
    16ee:	b13a      	cbz	r2, 1700 <shell_cmd_get+0x3c>
		command->u.dynamic_get(idx, d_entry);
    16f0:	4618      	mov	r0, r3
    16f2:	4631      	mov	r1, r6
    16f4:	47a8      	blx	r5
		if (d_entry->syntax != NULL) {
    16f6:	6833      	ldr	r3, [r6, #0]
    16f8:	2b00      	cmp	r3, #0
    16fa:	d0f3      	beq.n	16e4 <shell_cmd_get+0x20>
			*entry = d_entry;
    16fc:	6026      	str	r6, [r4, #0]
    16fe:	e7f1      	b.n	16e4 <shell_cmd_get+0x20>
		if (command->u.entry[idx].syntax != NULL) {
    1700:	2214      	movs	r2, #20
    1702:	4353      	muls	r3, r2
    1704:	18ea      	adds	r2, r5, r3
    1706:	58eb      	ldr	r3, [r5, r3]
    1708:	2b00      	cmp	r3, #0
    170a:	d0eb      	beq.n	16e4 <shell_cmd_get+0x20>
			*entry = &command->u.entry[idx];
    170c:	6022      	str	r2, [r4, #0]
    170e:	e7e9      	b.n	16e4 <shell_cmd_get+0x20>
    1710:	00006b98 	.word	0x00006b98
    1714:	00006bd0 	.word	0x00006bd0

00001718 <clear_eos.isra.6>:
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    1718:	4a01      	ldr	r2, [pc, #4]	; (1720 <clear_eos.isra.6+0x8>)
    171a:	4902      	ldr	r1, [pc, #8]	; (1724 <clear_eos.isra.6+0xc>)
    171c:	f004 b8d8 	b.w	58d0 <shell_raw_fprintf>
    1720:	000072ed 	.word	0x000072ed
    1724:	00007e02 	.word	0x00007e02

00001728 <shell_op_cursor_vert_move>:
#include <ctype.h>
#include "shell_ops.h"

void shell_op_cursor_vert_move(const struct shell *shell, s32_t delta)
{
	if (delta != 0) {
    1728:	b159      	cbz	r1, 1742 <shell_op_cursor_vert_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
    172a:	2900      	cmp	r1, #0
    172c:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
    1730:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
    1734:	bfcc      	ite	gt
    1736:	2341      	movgt	r3, #65	; 0x41
    1738:	2342      	movle	r3, #66	; 0x42
    173a:	4902      	ldr	r1, [pc, #8]	; (1744 <shell_op_cursor_vert_move+0x1c>)
    173c:	6940      	ldr	r0, [r0, #20]
    173e:	f004 b8c7 	b.w	58d0 <shell_raw_fprintf>
				  delta > 0 ? delta : -delta,
				  delta > 0 ? 'A' : 'B');
	}
}
    1742:	4770      	bx	lr
    1744:	000072fb 	.word	0x000072fb

00001748 <shell_op_cursor_horiz_move>:

void shell_op_cursor_horiz_move(const struct shell *shell, s32_t delta)
{
	if (delta != 0) {
    1748:	b159      	cbz	r1, 1762 <shell_op_cursor_horiz_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
    174a:	2900      	cmp	r1, #0
    174c:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
    1750:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
    1754:	bfcc      	ite	gt
    1756:	2343      	movgt	r3, #67	; 0x43
    1758:	2344      	movle	r3, #68	; 0x44
    175a:	4902      	ldr	r1, [pc, #8]	; (1764 <shell_op_cursor_horiz_move+0x1c>)
    175c:	6940      	ldr	r0, [r0, #20]
    175e:	f004 b8b7 	b.w	58d0 <shell_raw_fprintf>
				  delta > 0 ? delta : -delta,
				  delta > 0 ? 'C' : 'D');
	}
}
    1762:	4770      	bx	lr
    1764:	000072fb 	.word	0x000072fb

00001768 <shell_op_cond_next_line>:
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
}

void shell_op_cond_next_line(const struct shell *shell)
{
    1768:	b510      	push	{r4, lr}
    176a:	4604      	mov	r4, r0
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    176c:	f004 f8d1 	bl	5912 <shell_cursor_in_empty_line>
    1770:	b128      	cbz	r0, 177e <shell_op_cond_next_line+0x16>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    1772:	6960      	ldr	r0, [r4, #20]
    1774:	4905      	ldr	r1, [pc, #20]	; (178c <shell_op_cond_next_line+0x24>)
		cursor_next_line_move(shell);
	}
}
    1776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    177a:	f004 b8a9 	b.w	58d0 <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    177e:	f104 0008 	add.w	r0, r4, #8
    1782:	f004 f8b2 	bl	58ea <full_line_cmd.isra.8>
    1786:	2800      	cmp	r0, #0
    1788:	d1f3      	bne.n	1772 <shell_op_cond_next_line+0xa>
}
    178a:	bd10      	pop	{r4, pc}
    178c:	000072d4 	.word	0x000072d4

00001790 <shell_op_cursor_position_synchronize>:

void shell_op_cursor_position_synchronize(const struct shell *shell)
{
    1790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    1794:	4606      	mov	r6, r0
{
    1796:	4605      	mov	r5, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    1798:	f856 4f08 	ldr.w	r4, [r6, #8]!
	bool last_line;

	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    179c:	f104 0020 	add.w	r0, r4, #32
    17a0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    17a2:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    17a4:	f003 fedb 	bl	555e <shell_multiline_data_calc>
	last_line = (cons->cur_y == cons->cur_y_end);

	/* In case cursor reaches the bottom line of a terminal, it will
	 * be moved to the next line.
	 */
	if (full_line_cmd(shell)) {
    17a8:	4630      	mov	r0, r6
	last_line = (cons->cur_y == cons->cur_y_end);
    17aa:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
    17ae:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
    17b0:	f004 f89b 	bl	58ea <full_line_cmd.isra.8>
    17b4:	b118      	cbz	r0, 17be <shell_op_cursor_position_synchronize+0x2e>
    17b6:	490a      	ldr	r1, [pc, #40]	; (17e0 <shell_op_cursor_position_synchronize+0x50>)
    17b8:	6968      	ldr	r0, [r5, #20]
    17ba:	f004 f889 	bl	58d0 <shell_raw_fprintf>
		cursor_next_line_move(shell);
	}

	if (last_line) {
    17be:	45b8      	cmp	r8, r7
    17c0:	d107      	bne.n	17d2 <shell_op_cursor_position_synchronize+0x42>
		shell_op_cursor_horiz_move(shell, cons->cur_x -
							       cons->cur_x_end);
	} else {
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
		shell_op_cursor_horiz_move(shell, cons->cur_x -
    17c2:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
    17c4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		shell_op_cursor_horiz_move(shell, cons->cur_x -
    17c6:	4628      	mov	r0, r5
    17c8:	1ac9      	subs	r1, r1, r3
	}
}
    17ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		shell_op_cursor_horiz_move(shell, cons->cur_x -
    17ce:	f7ff bfbb 	b.w	1748 <shell_op_cursor_horiz_move>
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
    17d2:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    17d4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    17d6:	4628      	mov	r0, r5
    17d8:	1ac9      	subs	r1, r1, r3
    17da:	f7ff ffa5 	bl	1728 <shell_op_cursor_vert_move>
    17de:	e7f0      	b.n	17c2 <shell_op_cursor_position_synchronize+0x32>
    17e0:	000072d4 	.word	0x000072d4

000017e4 <shell_print_cmd>:
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void shell_print_cmd(const struct shell *shell)
{
	shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
    17e4:	6882      	ldr	r2, [r0, #8]
    17e6:	4902      	ldr	r1, [pc, #8]	; (17f0 <shell_print_cmd+0xc>)
    17e8:	6940      	ldr	r0, [r0, #20]
    17ea:	3238      	adds	r2, #56	; 0x38
    17ec:	f004 b870 	b.w	58d0 <shell_raw_fprintf>
    17f0:	00007e02 	.word	0x00007e02

000017f4 <shell_vt100_color_set>:

void shell_vt100_color_set(const struct shell *shell,
			   enum shell_vt100_color color)
{

	if (shell->ctx->vt100_ctx.col.col == color) {
    17f4:	6883      	ldr	r3, [r0, #8]
{
    17f6:	b507      	push	{r0, r1, r2, lr}
	if (shell->ctx->vt100_ctx.col.col == color) {
    17f8:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
    17fc:	428a      	cmp	r2, r1
    17fe:	d012      	beq.n	1826 <shell_vt100_color_set+0x32>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
    1800:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
    1804:	6940      	ldr	r0, [r0, #20]
    1806:	b189      	cbz	r1, 182c <shell_vt100_color_set+0x38>

		u8_t cmd[] = SHELL_VT100_COLOR(color - 1);
    1808:	4b09      	ldr	r3, [pc, #36]	; (1830 <shell_vt100_color_set+0x3c>)
    180a:	9300      	str	r3, [sp, #0]
    180c:	2333      	movs	r3, #51	; 0x33
    180e:	f88d 3004 	strb.w	r3, [sp, #4]
    1812:	312f      	adds	r1, #47	; 0x2f
    1814:	236d      	movs	r3, #109	; 0x6d
    1816:	f88d 1005 	strb.w	r1, [sp, #5]
    181a:	f8ad 3006 	strh.w	r3, [sp, #6]

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    181e:	466a      	mov	r2, sp
	} else {
		static const u8_t cmd[] = SHELL_VT100_MODESOFF;

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    1820:	4904      	ldr	r1, [pc, #16]	; (1834 <shell_vt100_color_set+0x40>)
    1822:	f004 f855 	bl	58d0 <shell_raw_fprintf>
	}
}
    1826:	b003      	add	sp, #12
    1828:	f85d fb04 	ldr.w	pc, [sp], #4
		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    182c:	4a02      	ldr	r2, [pc, #8]	; (1838 <shell_vt100_color_set+0x44>)
    182e:	e7f7      	b.n	1820 <shell_vt100_color_set+0x2c>
    1830:	3b315b1b 	.word	0x3b315b1b
    1834:	00007e02 	.word	0x00007e02
    1838:	000072f7 	.word	0x000072f7

0000183c <shell_vt100_colors_restore>:

void shell_vt100_colors_restore(const struct shell *shell,
				       const struct shell_vt100_colors *color)
{
    183c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    183e:	460d      	mov	r5, r1
	shell_vt100_color_set(shell, color->col);
    1840:	7809      	ldrb	r1, [r1, #0]
{
    1842:	4604      	mov	r4, r0
	shell_vt100_color_set(shell, color->col);
    1844:	f7ff ffd6 	bl	17f4 <shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
    1848:	786b      	ldrb	r3, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
    184a:	b1cb      	cbz	r3, 1880 <shell_vt100_colors_restore+0x44>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
    184c:	68a2      	ldr	r2, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
    184e:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    1852:	4299      	cmp	r1, r3
    1854:	d014      	beq.n	1880 <shell_vt100_colors_restore+0x44>
	u8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
    1856:	f645 311b 	movw	r1, #23323	; 0x5b1b
    185a:	f8ad 1000 	strh.w	r1, [sp]
    185e:	2134      	movs	r1, #52	; 0x34
    1860:	f88d 1002 	strb.w	r1, [sp, #2]
    1864:	f103 012f 	add.w	r1, r3, #47	; 0x2f
    1868:	f88d 1003 	strb.w	r1, [sp, #3]
    186c:	216d      	movs	r1, #109	; 0x6d
    186e:	f8ad 1004 	strh.w	r1, [sp, #4]
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
    1872:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    1876:	4903      	ldr	r1, [pc, #12]	; (1884 <shell_vt100_colors_restore+0x48>)
    1878:	6960      	ldr	r0, [r4, #20]
    187a:	466a      	mov	r2, sp
    187c:	f004 f828 	bl	58d0 <shell_raw_fprintf>
}
    1880:	b003      	add	sp, #12
    1882:	bd30      	pop	{r4, r5, pc}
    1884:	00007e02 	.word	0x00007e02

00001888 <shell_op_word_remove>:
{
    1888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    188a:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
    188c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
{
    188e:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    1890:	2a00      	cmp	r2, #0
    1892:	d046      	beq.n	1922 <shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    1894:	8e98      	ldrh	r0, [r3, #52]	; 0x34
	if ((shell->ctx->cmd_buff_len == 0) ||
    1896:	2800      	cmp	r0, #0
    1898:	d043      	beq.n	1922 <shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    189a:	3037      	adds	r0, #55	; 0x37
    189c:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
    189e:	f103 0638 	add.w	r6, r3, #56	; 0x38
    18a2:	4603      	mov	r3, r0
    18a4:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
    18a6:	42b3      	cmp	r3, r6
    18a8:	b2a4      	uxth	r4, r4
    18aa:	4619      	mov	r1, r3
    18ac:	d30d      	bcc.n	18ca <shell_op_word_remove+0x42>
    18ae:	f811 7901 	ldrb.w	r7, [r1], #-1
    18b2:	2f20      	cmp	r7, #32
    18b4:	d033      	beq.n	191e <shell_op_word_remove+0x96>
    18b6:	4619      	mov	r1, r3
    18b8:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
    18ba:	7808      	ldrb	r0, [r1, #0]
    18bc:	2820      	cmp	r0, #32
    18be:	d004      	beq.n	18ca <shell_op_word_remove+0x42>
		++chars_to_delete;
    18c0:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
    18c2:	429e      	cmp	r6, r3
		++chars_to_delete;
    18c4:	b2a4      	uxth	r4, r4
		--str;
    18c6:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
    18c8:	d9f5      	bls.n	18b6 <shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
    18ca:	1c63      	adds	r3, r4, #1
    18cc:	1c4e      	adds	r6, r1, #1
    18ce:	1b12      	subs	r2, r2, r4
    18d0:	4419      	add	r1, r3
    18d2:	4630      	mov	r0, r6
    18d4:	f004 fc34 	bl	6140 <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
    18d8:	68a9      	ldr	r1, [r5, #8]
    18da:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
    18dc:	1b12      	subs	r2, r2, r4
    18de:	b292      	uxth	r2, r2
    18e0:	864a      	strh	r2, [r1, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    18e2:	440a      	add	r2, r1
    18e4:	2700      	movs	r7, #0
	shell_op_cursor_move(shell, -chars_to_delete);
    18e6:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    18e8:	f882 7038 	strb.w	r7, [r2, #56]	; 0x38
	shell_op_cursor_move(shell, -chars_to_delete);
    18ec:	4628      	mov	r0, r5
    18ee:	b209      	sxth	r1, r1
    18f0:	f004 f823 	bl	593a <shell_op_cursor_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
    18f4:	6968      	ldr	r0, [r5, #20]
    18f6:	4a0b      	ldr	r2, [pc, #44]	; (1924 <shell_op_word_remove+0x9c>)
    18f8:	490b      	ldr	r1, [pc, #44]	; (1928 <shell_op_word_remove+0xa0>)
    18fa:	f003 ffe9 	bl	58d0 <shell_raw_fprintf>
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
    18fe:	4639      	mov	r1, r7
    1900:	4633      	mov	r3, r6
    1902:	4a09      	ldr	r2, [pc, #36]	; (1928 <shell_op_word_remove+0xa0>)
    1904:	4628      	mov	r0, r5
    1906:	f004 f915 	bl	5b34 <shell_internal_fprintf>
	clear_eos(shell);
    190a:	6968      	ldr	r0, [r5, #20]
    190c:	f7ff ff04 	bl	1718 <clear_eos.isra.6>
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
    1910:	6968      	ldr	r0, [r5, #20]
    1912:	4a06      	ldr	r2, [pc, #24]	; (192c <shell_op_word_remove+0xa4>)
    1914:	4904      	ldr	r1, [pc, #16]	; (1928 <shell_op_word_remove+0xa0>)
}
    1916:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    191a:	f003 bfd9 	b.w	58d0 <shell_raw_fprintf>
    191e:	460b      	mov	r3, r1
    1920:	e7c0      	b.n	18a4 <shell_op_word_remove+0x1c>
    1922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1924:	000072f1 	.word	0x000072f1
    1928:	00007e02 	.word	0x00007e02
    192c:	000072f4 	.word	0x000072f4

00001930 <reprint_from_cursor>:
{
    1930:	b570      	push	{r4, r5, r6, lr}
    1932:	4604      	mov	r4, r0
    1934:	460d      	mov	r5, r1
	if (data_removed) {
    1936:	4616      	mov	r6, r2
    1938:	b112      	cbz	r2, 1940 <reprint_from_cursor+0x10>
		clear_eos(shell);
    193a:	6940      	ldr	r0, [r0, #20]
    193c:	f7ff feec 	bl	1718 <clear_eos.isra.6>
		      &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    1940:	68a2      	ldr	r2, [r4, #8]
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s",
    1942:	8e93      	ldrh	r3, [r2, #52]	; 0x34
    1944:	3338      	adds	r3, #56	; 0x38
    1946:	4413      	add	r3, r2
    1948:	4620      	mov	r0, r4
    194a:	4a0c      	ldr	r2, [pc, #48]	; (197c <reprint_from_cursor+0x4c>)
    194c:	2100      	movs	r1, #0
    194e:	f004 f8f1 	bl	5b34 <shell_internal_fprintf>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    1952:	4620      	mov	r0, r4
    1954:	f850 3f08 	ldr.w	r3, [r0, #8]!
    1958:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    195a:	869a      	strh	r2, [r3, #52]	; 0x34
	if (full_line_cmd(shell)) {
    195c:	f003 ffc5 	bl	58ea <full_line_cmd.isra.8>
    1960:	b128      	cbz	r0, 196e <reprint_from_cursor+0x3e>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
    1962:	b106      	cbz	r6, 1966 <reprint_from_cursor+0x36>
    1964:	b11d      	cbz	r5, 196e <reprint_from_cursor+0x3e>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    1966:	4906      	ldr	r1, [pc, #24]	; (1980 <reprint_from_cursor+0x50>)
    1968:	6960      	ldr	r0, [r4, #20]
    196a:	f003 ffb1 	bl	58d0 <shell_raw_fprintf>
	shell_op_cursor_move(shell, -diff);
    196e:	4269      	negs	r1, r5
    1970:	4620      	mov	r0, r4
    1972:	b209      	sxth	r1, r1
}
    1974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_op_cursor_move(shell, -diff);
    1978:	f003 bfdf 	b.w	593a <shell_op_cursor_move>
    197c:	00007e02 	.word	0x00007e02
    1980:	000072d4 	.word	0x000072d4

00001984 <shell_op_char_insert>:
{
    1984:	b513      	push	{r0, r1, r4, lr}
	if (shell->ctx->internal.flags.insert_mode &&
    1986:	6883      	ldr	r3, [r0, #8]
{
    1988:	f88d 1007 	strb.w	r1, [sp, #7]
	if (shell->ctx->internal.flags.insert_mode &&
    198c:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
    1990:	07d2      	lsls	r2, r2, #31
{
    1992:	4604      	mov	r4, r0
	if (shell->ctx->internal.flags.insert_mode &&
    1994:	d51d      	bpl.n	19d2 <shell_op_char_insert+0x4e>
		(shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
    1996:	8e99      	ldrh	r1, [r3, #52]	; 0x34
	if (shell->ctx->internal.flags.insert_mode &&
    1998:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    199a:	428a      	cmp	r2, r1
    199c:	d019      	beq.n	19d2 <shell_op_char_insert+0x4e>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    199e:	1c48      	adds	r0, r1, #1
    19a0:	8698      	strh	r0, [r3, #52]	; 0x34
    19a2:	440b      	add	r3, r1
		char_replace(shell, data);
    19a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    19a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (!flag_echo_get(shell)) {
    19ac:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    19ae:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    19b2:	075b      	lsls	r3, r3, #29
    19b4:	d50b      	bpl.n	19ce <shell_op_char_insert+0x4a>
	shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    19b6:	6960      	ldr	r0, [r4, #20]
    19b8:	4909      	ldr	r1, [pc, #36]	; (19e0 <shell_op_char_insert+0x5c>)
    19ba:	f003 ff89 	bl	58d0 <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell)) {
    19be:	4620      	mov	r0, r4
    19c0:	f003 ffa7 	bl	5912 <shell_cursor_in_empty_line>
    19c4:	b118      	cbz	r0, 19ce <shell_op_char_insert+0x4a>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    19c6:	4907      	ldr	r1, [pc, #28]	; (19e4 <shell_op_char_insert+0x60>)
    19c8:	6960      	ldr	r0, [r4, #20]
    19ca:	f003 ff81 	bl	58d0 <shell_raw_fprintf>
}
    19ce:	b002      	add	sp, #8
    19d0:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
    19d2:	2201      	movs	r2, #1
    19d4:	f10d 0107 	add.w	r1, sp, #7
    19d8:	4620      	mov	r0, r4
    19da:	f004 f8b8 	bl	5b4e <data_insert>
}
    19de:	e7f6      	b.n	19ce <shell_op_char_insert+0x4a>
    19e0:	000072ff 	.word	0x000072ff
    19e4:	000072d4 	.word	0x000072d4

000019e8 <shell_print_prompt_and_cmd>:
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    19e8:	6883      	ldr	r3, [r0, #8]
    19ea:	4a0a      	ldr	r2, [pc, #40]	; (1a14 <shell_print_prompt_and_cmd+0x2c>)
    19ec:	681b      	ldr	r3, [r3, #0]
{
    19ee:	b510      	push	{r4, lr}
    19f0:	4604      	mov	r4, r0
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    19f2:	2103      	movs	r1, #3
    19f4:	f004 f89e 	bl	5b34 <shell_internal_fprintf>
	if (flag_echo_get(shell)) {
    19f8:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    19fa:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    19fe:	075b      	lsls	r3, r3, #29
    1a00:	d507      	bpl.n	1a12 <shell_print_prompt_and_cmd+0x2a>
		shell_print_cmd(shell);
    1a02:	4620      	mov	r0, r4
    1a04:	f7ff feee 	bl	17e4 <shell_print_cmd>
		shell_op_cursor_position_synchronize(shell);
    1a08:	4620      	mov	r0, r4
}
    1a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_op_cursor_position_synchronize(shell);
    1a0e:	f7ff bebf 	b.w	1790 <shell_op_cursor_position_synchronize>
}
    1a12:	bd10      	pop	{r4, pc}
    1a14:	00007e02 	.word	0x00007e02

00001a18 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(struct device *arg)
{
    1a18:	b513      	push	{r0, r1, r4, lr}
    1a1a:	4807      	ldr	r0, [pc, #28]	; (1a38 <enable_shell_uart+0x20>)
    1a1c:	f002 f97a 	bl	3d14 <z_impl_device_get_binding>
	bool log_backend = CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > 0;
	u32_t level =
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;

	shell_init(&shell_uart, dev, true, log_backend, level);
    1a20:	2400      	movs	r4, #0
    1a22:	2301      	movs	r3, #1
    1a24:	4601      	mov	r1, r0
    1a26:	9400      	str	r4, [sp, #0]
    1a28:	461a      	mov	r2, r3
    1a2a:	4804      	ldr	r0, [pc, #16]	; (1a3c <enable_shell_uart+0x24>)
    1a2c:	f7ff f9a0 	bl	d70 <shell_init>

	return 0;
}
    1a30:	4620      	mov	r0, r4
    1a32:	b002      	add	sp, #8
    1a34:	bd10      	pop	{r4, pc}
    1a36:	bf00      	nop
    1a38:	00007302 	.word	0x00007302
    1a3c:	00006ce0 	.word	0x00006ce0

00001a40 <init>:
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    1a40:	6840      	ldr	r0, [r0, #4]
{
    1a42:	b510      	push	{r4, lr}
    1a44:	460c      	mov	r4, r1
	sh_uart->ctrl_blk->dev = (struct device *)config;
    1a46:	6801      	ldr	r1, [r0, #0]
	sh_uart->ctrl_blk->context = context;
    1a48:	608b      	str	r3, [r1, #8]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    1a4a:	6863      	ldr	r3, [r4, #4]
	sh_uart->ctrl_blk->handler = evt_handler;
    1a4c:	e9c1 4200 	strd	r4, r2, [r1]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    1a50:	b12b      	cbz	r3, 1a5e <init+0x1e>
    1a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1a54:	b11b      	cbz	r3, 1a5e <init+0x1e>
		api->irq_callback_set(dev, cb, user_data);
    1a56:	4602      	mov	r2, r0
    1a58:	4904      	ldr	r1, [pc, #16]	; (1a6c <init+0x2c>)
    1a5a:	4620      	mov	r0, r4
    1a5c:	4798      	blx	r3
	if (api->irq_rx_enable) {
    1a5e:	6863      	ldr	r3, [r4, #4]
    1a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a62:	b10b      	cbz	r3, 1a68 <init+0x28>
		api->irq_rx_enable(dev);
    1a64:	4620      	mov	r0, r4
    1a66:	4798      	blx	r3
}
    1a68:	2000      	movs	r0, #0
    1a6a:	bd10      	pop	{r4, pc}
    1a6c:	00005caf 	.word	0x00005caf

00001a70 <formatted_text_print.constprop.2>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
    1a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1a74:	4605      	mov	r5, r0
    1a76:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
    1a78:	460f      	mov	r7, r1
    1a7a:	2900      	cmp	r1, #0
    1a7c:	d06e      	beq.n	1b5c <formatted_text_print.constprop.2+0xec>
    1a7e:	2400      	movs	r4, #0
		shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
    1a80:	5d3b      	ldrb	r3, [r7, r4]
    1a82:	2b20      	cmp	r3, #32
    1a84:	d025      	beq.n	1ad2 <formatted_text_print.constprop.2+0x62>
    1a86:	3b09      	subs	r3, #9
    1a88:	2b04      	cmp	r3, #4
    1a8a:	d922      	bls.n	1ad2 <formatted_text_print.constprop.2+0x62>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    1a8c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 1b60 <formatted_text_print.constprop.2+0xf0>
	return str == NULL ? 0U : (u16_t)strlen(str);
    1a90:	4638      	mov	r0, r7
    1a92:	f004 fb23 	bl	60dc <strlen>
		size_t idx = 0;

		length = shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    1a96:	68ab      	ldr	r3, [r5, #8]
    1a98:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = shell_strlen(str) - offset;
    1a9a:	b280      	uxth	r0, r0
    1a9c:	1b00      	subs	r0, r0, r4
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    1a9e:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
    1aa2:	4298      	cmp	r0, r3
    1aa4:	eb07 0a04 	add.w	sl, r7, r4
    1aa8:	d915      	bls.n	1ad6 <formatted_text_print.constprop.2+0x66>
    1aaa:	4650      	mov	r0, sl
		size_t idx = 0;
    1aac:	2600      	movs	r6, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
    1aae:	f810 2b01 	ldrb.w	r2, [r0], #1
    1ab2:	2a20      	cmp	r2, #32
    1ab4:	d006      	beq.n	1ac4 <formatted_text_print.constprop.2+0x54>
    1ab6:	f1a2 0c09 	sub.w	ip, r2, #9
    1aba:	f1bc 0f04 	cmp.w	ip, #4
    1abe:	d802      	bhi.n	1ac6 <formatted_text_print.constprop.2+0x56>
				length = idx;
				if (*(str + offset + idx) == '\n') {
    1ac0:	2a0a      	cmp	r2, #10
    1ac2:	d031      	beq.n	1b28 <formatted_text_print.constprop.2+0xb8>
    1ac4:	4633      	mov	r3, r6
					break;
				}
			}

			if ((idx + terminal_offset) >=
    1ac6:	eb08 0206 	add.w	r2, r8, r6
    1aca:	4291      	cmp	r1, r2
    1acc:	d92b      	bls.n	1b26 <formatted_text_print.constprop.2+0xb6>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
    1ace:	3601      	adds	r6, #1
    1ad0:	e7ed      	b.n	1aae <formatted_text_print.constprop.2+0x3e>
		++offset;
    1ad2:	3401      	adds	r4, #1
    1ad4:	e7d4      	b.n	1a80 <formatted_text_print.constprop.2+0x10>
    1ad6:	4653      	mov	r3, sl
			for (idx = 0; idx < length; idx++) {
    1ad8:	2600      	movs	r6, #0
    1ada:	42b0      	cmp	r0, r6
    1adc:	d017      	beq.n	1b0e <formatted_text_print.constprop.2+0x9e>
				if (*(str + offset + idx) == '\n') {
    1ade:	f813 2b01 	ldrb.w	r2, [r3], #1
    1ae2:	2a0a      	cmp	r2, #10
    1ae4:	eb04 0906 	add.w	r9, r4, r6
    1ae8:	d11b      	bne.n	1b22 <formatted_text_print.constprop.2+0xb2>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
    1aea:	6968      	ldr	r0, [r5, #20]
    1aec:	f003 fce5 	bl	54ba <shell_fprintf_buffer_flush>
					shell_write(shell, str + offset, idx);
    1af0:	4632      	mov	r2, r6
    1af2:	4651      	mov	r1, sl
    1af4:	4628      	mov	r0, r5
    1af6:	f003 ffc0 	bl	5a7a <shell_write>
    1afa:	4919      	ldr	r1, [pc, #100]	; (1b60 <formatted_text_print.constprop.2+0xf0>)
    1afc:	6968      	ldr	r0, [r5, #20]
    1afe:	f004 f942 	bl	5d86 <shell_raw_fprintf>
					shell_op_cursor_horiz_move(shell,
    1b02:	4641      	mov	r1, r8
    1b04:	4628      	mov	r0, r5
					offset += idx + 1;
    1b06:	f109 0401 	add.w	r4, r9, #1
					shell_op_cursor_horiz_move(shell,
    1b0a:	f7ff fe1d 	bl	1748 <shell_op_cursor_horiz_move>
			shell_raw_fprintf(shell->fprintf_ctx, str + offset);
    1b0e:	1939      	adds	r1, r7, r4
    1b10:	6968      	ldr	r0, [r5, #20]
    1b12:	f004 f938 	bl	5d86 <shell_raw_fprintf>
    1b16:	6968      	ldr	r0, [r5, #20]
    1b18:	4911      	ldr	r1, [pc, #68]	; (1b60 <formatted_text_print.constprop.2+0xf0>)
		cursor_next_line_move(shell);
		shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	cursor_next_line_move(shell);
}
    1b1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1b1e:	f004 b932 	b.w	5d86 <shell_raw_fprintf>
			for (idx = 0; idx < length; idx++) {
    1b22:	3601      	adds	r6, #1
    1b24:	e7d9      	b.n	1ada <formatted_text_print.constprop.2+0x6a>
			if ((idx + terminal_offset) >=
    1b26:	461e      	mov	r6, r3
    1b28:	6968      	ldr	r0, [r5, #20]
    1b2a:	f003 fcc6 	bl	54ba <shell_fprintf_buffer_flush>
		shell_write(shell, str + offset, length);
    1b2e:	4632      	mov	r2, r6
    1b30:	4651      	mov	r1, sl
    1b32:	4628      	mov	r0, r5
    1b34:	f003 ffa1 	bl	5a7a <shell_write>
		offset += length;
    1b38:	4434      	add	r4, r6
		while (isspace((int) (*(str + offset)))) {
    1b3a:	5d3b      	ldrb	r3, [r7, r4]
    1b3c:	2b20      	cmp	r3, #32
    1b3e:	d00b      	beq.n	1b58 <formatted_text_print.constprop.2+0xe8>
    1b40:	3b09      	subs	r3, #9
    1b42:	2b04      	cmp	r3, #4
    1b44:	d908      	bls.n	1b58 <formatted_text_print.constprop.2+0xe8>
    1b46:	4649      	mov	r1, r9
    1b48:	6968      	ldr	r0, [r5, #20]
    1b4a:	f004 f91c 	bl	5d86 <shell_raw_fprintf>
		shell_op_cursor_horiz_move(shell, terminal_offset);
    1b4e:	4641      	mov	r1, r8
    1b50:	4628      	mov	r0, r5
    1b52:	f7ff fdf9 	bl	1748 <shell_op_cursor_horiz_move>
    1b56:	e79b      	b.n	1a90 <formatted_text_print.constprop.2+0x20>
			++offset;
    1b58:	3401      	adds	r4, #1
    1b5a:	e7ee      	b.n	1b3a <formatted_text_print.constprop.2+0xca>
}
    1b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1b60:	000072d4 	.word	0x000072d4

00001b64 <shell_help_subcmd_print>:

/* Function is printing command help, its subcommands name and subcommands
 * help string.
 */
void shell_help_subcmd_print(const struct shell *shell)
{
    1b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry static_entry;
	u16_t longest_syntax = 0U;
	size_t cmd_idx = 0;

	/* Checking if there are any subcommands available. */
	if (!shell->ctx->active_cmd.subcmd) {
    1b68:	6882      	ldr	r2, [r0, #8]
{
    1b6a:	b08d      	sub	sp, #52	; 0x34
	if (!shell->ctx->active_cmd.subcmd) {
    1b6c:	6912      	ldr	r2, [r2, #16]
	const struct shell_static_entry *entry = NULL;
    1b6e:	2300      	movs	r3, #0
{
    1b70:	4604      	mov	r4, r0
	const struct shell_static_entry *entry = NULL;
    1b72:	9306      	str	r3, [sp, #24]
	if (!shell->ctx->active_cmd.subcmd) {
    1b74:	2a00      	cmp	r2, #0
    1b76:	d051      	beq.n	1c1c <shell_help_subcmd_print+0xb8>
	size_t cmd_idx = 0;
    1b78:	4698      	mov	r8, r3
	u16_t longest_syntax = 0U;
    1b7a:	461d      	mov	r5, r3
		return;
	}

	/* Searching for the longest subcommand to print. */
	do {
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
    1b7c:	ae07      	add	r6, sp, #28
    1b7e:	af06      	add	r7, sp, #24
    1b80:	e9cd 7600 	strd	r7, r6, [sp]
    1b84:	68a1      	ldr	r1, [r4, #8]
    1b86:	4643      	mov	r3, r8
    1b88:	2201      	movs	r2, #1
    1b8a:	6909      	ldr	r1, [r1, #16]
    1b8c:	4620      	mov	r0, r4
    1b8e:	f7ff fd99 	bl	16c4 <shell_cmd_get>
			      !SHELL_CMD_ROOT_LVL,
			      cmd_idx++, &entry, &static_entry);

		if (!entry) {
    1b92:	9b06      	ldr	r3, [sp, #24]
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
    1b94:	f108 0901 	add.w	r9, r8, #1
		if (!entry) {
    1b98:	2b00      	cmp	r3, #0
    1b9a:	d03c      	beq.n	1c16 <shell_help_subcmd_print+0xb2>
			break;
		}

		u16_t len = shell_strlen(entry->syntax);
    1b9c:	6818      	ldr	r0, [r3, #0]
	return str == NULL ? 0U : (u16_t)strlen(str);
    1b9e:	b110      	cbz	r0, 1ba6 <shell_help_subcmd_print+0x42>
    1ba0:	f004 fa9c 	bl	60dc <strlen>
    1ba4:	b280      	uxth	r0, r0

		longest_syntax = longest_syntax > len ? longest_syntax : len;
    1ba6:	4285      	cmp	r5, r0
    1ba8:	bf38      	it	cc
    1baa:	4605      	movcc	r5, r0
	} while (cmd_idx != 0); /* too many commands */
    1bac:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    1bb0:	d12f      	bne.n	1c12 <shell_help_subcmd_print+0xae>

	if (cmd_idx == 1) {
		return;
	}

	shell_internal_fprintf(shell, SHELL_NORMAL, "Subcommands:\n");
    1bb2:	4a20      	ldr	r2, [pc, #128]	; (1c34 <shell_help_subcmd_print+0xd0>)
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    1bb4:	f8df 9080 	ldr.w	r9, [pc, #128]	; 1c38 <shell_help_subcmd_print+0xd4>
	shell_internal_fprintf(shell, SHELL_NORMAL, "Subcommands:\n");
    1bb8:	2100      	movs	r1, #0
    1bba:	4620      	mov	r0, r4
    1bbc:	f003 ffba 	bl	5b34 <shell_internal_fprintf>

	/* Printing subcommands and help string (if exists). */
	cmd_idx = 0;
    1bc0:	2300      	movs	r3, #0

	while (true) {
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
    1bc2:	e9cd 7600 	strd	r7, r6, [sp]
    1bc6:	68a1      	ldr	r1, [r4, #8]
    1bc8:	2201      	movs	r2, #1
    1bca:	6909      	ldr	r1, [r1, #16]
    1bcc:	4620      	mov	r0, r4
    1bce:	f103 0b01 	add.w	fp, r3, #1
    1bd2:	f7ff fd77 	bl	16c4 <shell_cmd_get>
			      !SHELL_CMD_ROOT_LVL,
			      cmd_idx++, &entry, &static_entry);

		if (entry == NULL) {
    1bd6:	9b06      	ldr	r3, [sp, #24]
    1bd8:	b303      	cbz	r3, 1c1c <shell_help_subcmd_print+0xb8>
			break;
		}

		help_item_print(shell, entry->syntax, longest_syntax,
    1bda:	681a      	ldr	r2, [r3, #0]
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    1bdc:	4816      	ldr	r0, [pc, #88]	; (1c38 <shell_help_subcmd_print+0xd4>)
		help_item_print(shell, entry->syntax, longest_syntax,
    1bde:	9205      	str	r2, [sp, #20]
    1be0:	f8d3 8004 	ldr.w	r8, [r3, #4]
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    1be4:	f004 fa7a 	bl	60dc <strlen>
	if (item_name == NULL) {
    1be8:	9a05      	ldr	r2, [sp, #20]
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    1bea:	4682      	mov	sl, r0
	if (item_name == NULL) {
    1bec:	b17a      	cbz	r2, 1c0e <shell_help_subcmd_print+0xaa>
		shell_internal_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:",
    1bee:	e9cd 2901 	strd	r2, r9, [sp, #4]
    1bf2:	9500      	str	r5, [sp, #0]
    1bf4:	464b      	mov	r3, r9
    1bf6:	4a11      	ldr	r2, [pc, #68]	; (1c3c <shell_help_subcmd_print+0xd8>)
    1bf8:	2100      	movs	r1, #0
    1bfa:	4620      	mov	r0, r4
    1bfc:	f003 ff9a 	bl	5b34 <shell_internal_fprintf>
	if (item_help == NULL) {
    1c00:	f1b8 0f00 	cmp.w	r8, #0
    1c04:	d10d      	bne.n	1c22 <shell_help_subcmd_print+0xbe>
    1c06:	490e      	ldr	r1, [pc, #56]	; (1c40 <shell_help_subcmd_print+0xdc>)
    1c08:	6960      	ldr	r0, [r4, #20]
    1c0a:	f004 f8bc 	bl	5d86 <shell_raw_fprintf>
    1c0e:	465b      	mov	r3, fp
    1c10:	e7d7      	b.n	1bc2 <shell_help_subcmd_print+0x5e>
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
    1c12:	46c8      	mov	r8, r9
    1c14:	e7b4      	b.n	1b80 <shell_help_subcmd_print+0x1c>
	if (cmd_idx == 1) {
    1c16:	f1b9 0f01 	cmp.w	r9, #1
    1c1a:	d1ca      	bne.n	1bb2 <shell_help_subcmd_print+0x4e>
				entry->help);
	}
}
    1c1c:	b00d      	add	sp, #52	; 0x34
    1c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    1c22:	1c6a      	adds	r2, r5, #1
    1c24:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	formatted_text_print(shell, item_help, offset, false);
    1c28:	b292      	uxth	r2, r2
    1c2a:	4641      	mov	r1, r8
    1c2c:	4620      	mov	r0, r4
    1c2e:	f7ff ff1f 	bl	1a70 <formatted_text_print.constprop.2>
    1c32:	e7ec      	b.n	1c0e <shell_help_subcmd_print+0xaa>
    1c34:	00007321 	.word	0x00007321
    1c38:	00007339 	.word	0x00007339
    1c3c:	0000732f 	.word	0x0000732f
    1c40:	000072d4 	.word	0x000072d4

00001c44 <shell_help_cmd_print>:

void shell_help_cmd_print(const struct shell *shell)
{
	static const char cmd_sep[] = " - ";	/* commands separator */

	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    1c44:	6883      	ldr	r3, [r0, #8]
{
    1c46:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1c48:	4605      	mov	r5, r0
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    1c4a:	6898      	ldr	r0, [r3, #8]
    1c4c:	b1c8      	cbz	r0, 1c82 <shell_help_cmd_print+0x3e>
    1c4e:	f004 fa45 	bl	60dc <strlen>
    1c52:	b284      	uxth	r4, r0
    1c54:	4e0c      	ldr	r6, [pc, #48]	; (1c88 <shell_help_cmd_print+0x44>)
    1c56:	4630      	mov	r0, r6
    1c58:	f004 fa40 	bl	60dc <strlen>
							  shell_strlen(cmd_sep);

	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
    1c5c:	68ab      	ldr	r3, [r5, #8]
    1c5e:	9600      	str	r6, [sp, #0]
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    1c60:	4404      	add	r4, r0
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
    1c62:	689b      	ldr	r3, [r3, #8]
    1c64:	4a09      	ldr	r2, [pc, #36]	; (1c8c <shell_help_cmd_print+0x48>)
    1c66:	4628      	mov	r0, r5
    1c68:	2100      	movs	r1, #0
    1c6a:	f003 ff63 	bl	5b34 <shell_internal_fprintf>
			       shell->ctx->active_cmd.syntax, cmd_sep);

	formatted_text_print(shell, shell->ctx->active_cmd.help,
    1c6e:	68ab      	ldr	r3, [r5, #8]
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    1c70:	b2a4      	uxth	r4, r4
	formatted_text_print(shell, shell->ctx->active_cmd.help,
    1c72:	68d9      	ldr	r1, [r3, #12]
    1c74:	4622      	mov	r2, r4
    1c76:	4628      	mov	r0, r5
			     field_width, false);
}
    1c78:	b002      	add	sp, #8
    1c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	formatted_text_print(shell, shell->ctx->active_cmd.help,
    1c7e:	f7ff bef7 	b.w	1a70 <formatted_text_print.constprop.2>
    1c82:	4604      	mov	r4, r0
    1c84:	e7e6      	b.n	1c54 <shell_help_cmd_print+0x10>
    1c86:	bf00      	nop
    1c88:	0000731d 	.word	0x0000731d
    1c8c:	000072ce 	.word	0x000072ce

00001c90 <cmd_clear>:
	cursor_restore(shell);
	return ret_val;
}

static int cmd_clear(const struct shell *shell, size_t argc, char **argv)
{
    1c90:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(argv);

	SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    1c92:	4d07      	ldr	r5, [pc, #28]	; (1cb0 <cmd_clear+0x20>)
    1c94:	4a07      	ldr	r2, [pc, #28]	; (1cb4 <cmd_clear+0x24>)
{
    1c96:	4604      	mov	r4, r0
	SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    1c98:	4629      	mov	r1, r5
    1c9a:	6940      	ldr	r0, [r0, #20]
    1c9c:	f004 f8ba 	bl	5e14 <shell_raw_fprintf>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    1ca0:	6960      	ldr	r0, [r4, #20]
    1ca2:	4a05      	ldr	r2, [pc, #20]	; (1cb8 <cmd_clear+0x28>)
    1ca4:	4629      	mov	r1, r5
    1ca6:	f004 f8b5 	bl	5e14 <shell_raw_fprintf>

	return 0;
}
    1caa:	2000      	movs	r0, #0
    1cac:	bd38      	pop	{r3, r4, r5, pc}
    1cae:	bf00      	nop
    1cb0:	00007e02 	.word	0x00007e02
    1cb4:	00007342 	.word	0x00007342
    1cb8:	00007346 	.word	0x00007346

00001cbc <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
    1cbc:	b510      	push	{r4, lr}
    1cbe:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    1cc0:	4a04      	ldr	r2, [pc, #16]	; (1cd4 <cmd_resize_default+0x18>)
    1cc2:	4905      	ldr	r1, [pc, #20]	; (1cd8 <cmd_resize_default+0x1c>)
    1cc4:	6940      	ldr	r0, [r0, #20]
    1cc6:	f004 f8a5 	bl	5e14 <shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid =  SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    1cca:	68a3      	ldr	r3, [r4, #8]
    1ccc:	4a03      	ldr	r2, [pc, #12]	; (1cdc <cmd_resize_default+0x20>)
    1cce:	629a      	str	r2, [r3, #40]	; 0x28

	return 0;
}
    1cd0:	2000      	movs	r0, #0
    1cd2:	bd10      	pop	{r4, pc}
    1cd4:	0000734b 	.word	0x0000734b
    1cd8:	00007e02 	.word	0x00007e02
    1cdc:	00500018 	.word	0x00500018

00001ce0 <cmd_shell_stats_show>:
{
    1ce0:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %u", shell->stats->log_lost_cnt);
    1ce2:	6983      	ldr	r3, [r0, #24]
    1ce4:	4a03      	ldr	r2, [pc, #12]	; (1cf4 <cmd_shell_stats_show+0x14>)
    1ce6:	681b      	ldr	r3, [r3, #0]
    1ce8:	2100      	movs	r1, #0
    1cea:	f003 fbb7 	bl	545c <shell_fprintf>
}
    1cee:	2000      	movs	r0, #0
    1cf0:	bd08      	pop	{r3, pc}
    1cf2:	bf00      	nop
    1cf4:	00007584 	.word	0x00007584

00001cf8 <cmd_help>:
{
    1cf8:	b510      	push	{r4, lr}
	shell_print(shell,
    1cfa:	4a06      	ldr	r2, [pc, #24]	; (1d14 <cmd_help+0x1c>)
{
    1cfc:	4604      	mov	r4, r0
	shell_print(shell,
    1cfe:	2100      	movs	r1, #0
    1d00:	f003 fbac 	bl	545c <shell_fprintf>
	shell_print(shell,
    1d04:	4620      	mov	r0, r4
    1d06:	4a04      	ldr	r2, [pc, #16]	; (1d18 <cmd_help+0x20>)
    1d08:	2100      	movs	r1, #0
    1d0a:	f003 fba7 	bl	545c <shell_fprintf>
}
    1d0e:	2000      	movs	r0, #0
    1d10:	bd10      	pop	{r4, pc}
    1d12:	bf00      	nop
    1d14:	00007389 	.word	0x00007389
    1d18:	00007478 	.word	0x00007478

00001d1c <cmd_history>:
{
    1d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
			shell_print(shell, "[%3d] %s",
    1d1e:	4f10      	ldr	r7, [pc, #64]	; (1d60 <cmd_history+0x44>)
{
    1d20:	b085      	sub	sp, #20
    1d22:	4604      	mov	r4, r0
	size_t i = 0;
    1d24:	2500      	movs	r5, #0
				  shell->ctx->temp_buff, &len);
    1d26:	68a2      	ldr	r2, [r4, #8]
		shell_history_get(shell->history, true,
    1d28:	68e0      	ldr	r0, [r4, #12]
    1d2a:	f10d 030e 	add.w	r3, sp, #14
    1d2e:	f502 729c 	add.w	r2, r2, #312	; 0x138
    1d32:	2101      	movs	r1, #1
    1d34:	f004 f890 	bl	5e58 <shell_history_get>
		if (len) {
    1d38:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    1d3c:	68a3      	ldr	r3, [r4, #8]
    1d3e:	b158      	cbz	r0, 1d58 <cmd_history+0x3c>
			shell_print(shell, "[%3d] %s",
    1d40:	f503 739c 	add.w	r3, r3, #312	; 0x138
    1d44:	9300      	str	r3, [sp, #0]
    1d46:	1c6e      	adds	r6, r5, #1
    1d48:	462b      	mov	r3, r5
    1d4a:	463a      	mov	r2, r7
    1d4c:	2100      	movs	r1, #0
    1d4e:	4620      	mov	r0, r4
    1d50:	f003 fb84 	bl	545c <shell_fprintf>
    1d54:	4635      	mov	r5, r6
		shell_history_get(shell->history, true,
    1d56:	e7e6      	b.n	1d26 <cmd_history+0xa>
	shell->ctx->temp_buff[0] = '\0';
    1d58:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
}
    1d5c:	b005      	add	sp, #20
    1d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d60:	00007540 	.word	0x00007540

00001d64 <cmd_echo>:
	if (argc == 2) {
    1d64:	2902      	cmp	r1, #2
{
    1d66:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
    1d68:	d10c      	bne.n	1d84 <cmd_echo+0x20>
		shell_error(shell, "%s:%s%s", argv[0],
    1d6a:	6853      	ldr	r3, [r2, #4]
    1d6c:	9301      	str	r3, [sp, #4]
    1d6e:	4b0d      	ldr	r3, [pc, #52]	; (1da4 <cmd_echo+0x40>)
    1d70:	9300      	str	r3, [sp, #0]
    1d72:	6813      	ldr	r3, [r2, #0]
    1d74:	4a0c      	ldr	r2, [pc, #48]	; (1da8 <cmd_echo+0x44>)
    1d76:	f003 fb71 	bl	545c <shell_fprintf>
    1d7a:	f06f 0015 	mvn.w	r0, #21
}
    1d7e:	b003      	add	sp, #12
    1d80:	f85d fb04 	ldr.w	pc, [sp], #4
	shell_print(shell, "Echo status: %s",
    1d84:	6883      	ldr	r3, [r0, #8]
    1d86:	4a09      	ldr	r2, [pc, #36]	; (1dac <cmd_echo+0x48>)
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    1d88:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    1d8c:	f013 0f04 	tst.w	r3, #4
    1d90:	f04f 0100 	mov.w	r1, #0
    1d94:	4b06      	ldr	r3, [pc, #24]	; (1db0 <cmd_echo+0x4c>)
    1d96:	bf18      	it	ne
    1d98:	4613      	movne	r3, r2
    1d9a:	4a06      	ldr	r2, [pc, #24]	; (1db4 <cmd_echo+0x50>)
    1d9c:	f003 fb5e 	bl	545c <shell_fprintf>
	return 0;
    1da0:	2000      	movs	r0, #0
    1da2:	e7ec      	b.n	1d7e <cmd_echo+0x1a>
    1da4:	0000735e 	.word	0x0000735e
    1da8:	00007355 	.word	0x00007355
    1dac:	00007168 	.word	0x00007168
    1db0:	00007351 	.word	0x00007351
    1db4:	00007373 	.word	0x00007373

00001db8 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
    1db8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
    1dba:	2901      	cmp	r1, #1
{
    1dbc:	b085      	sub	sp, #20
    1dbe:	4605      	mov	r5, r0
	if (argc != 1) {
    1dc0:	d00d      	beq.n	1dde <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
    1dc2:	6853      	ldr	r3, [r2, #4]
    1dc4:	9301      	str	r3, [sp, #4]
    1dc6:	4b53      	ldr	r3, [pc, #332]	; (1f14 <cmd_resize+0x15c>)
    1dc8:	9300      	str	r3, [sp, #0]
    1dca:	6813      	ldr	r3, [r2, #0]
    1dcc:	4a52      	ldr	r2, [pc, #328]	; (1f18 <cmd_resize+0x160>)
    1dce:	2102      	movs	r1, #2
    1dd0:	f003 fb44 	bl	545c <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
    1dd4:	f06f 0415 	mvn.w	r4, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
    1dd8:	4620      	mov	r0, r4
    1dda:	b005      	add	sp, #20
    1ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
    1dde:	4a4f      	ldr	r2, [pc, #316]	; (1f1c <cmd_resize+0x164>)
    1de0:	494f      	ldr	r1, [pc, #316]	; (1f20 <cmd_resize+0x168>)
    1de2:	6940      	ldr	r0, [r0, #20]
    1de4:	f004 f816 	bl	5e14 <shell_raw_fprintf>
	shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
    1de8:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
    1dec:	4628      	mov	r0, r5
    1dee:	f7ff fc9b 	bl	1728 <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
    1df2:	21fa      	movs	r1, #250	; 0xfa
    1df4:	4628      	mov	r0, r5
    1df6:	f7ff fca7 	bl	1748 <shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    1dfa:	68a8      	ldr	r0, [r5, #8]
	char c = 0;
    1dfc:	2400      	movs	r4, #0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    1dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
    1e02:	4621      	mov	r1, r4
    1e04:	f500 709c 	add.w	r0, r0, #312	; 0x138
	char c = 0;
    1e08:	f88d 400b 	strb.w	r4, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    1e0c:	f004 f9d9 	bl	61c2 <memset>
	shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
    1e10:	4944      	ldr	r1, [pc, #272]	; (1f24 <cmd_resize+0x16c>)
    1e12:	6968      	ldr	r0, [r5, #20]
    1e14:	f003 fffe 	bl	5e14 <shell_raw_fprintf>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
    1e18:	6968      	ldr	r0, [r5, #20]
    1e1a:	f003 fb4e 	bl	54ba <shell_fprintf_buffer_flush>
    1e1e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
    1e22:	6868      	ldr	r0, [r5, #4]
    1e24:	6803      	ldr	r3, [r0, #0]
    1e26:	2201      	movs	r2, #1
    1e28:	691f      	ldr	r7, [r3, #16]
    1e2a:	f10d 010b 	add.w	r1, sp, #11
    1e2e:	ab03      	add	r3, sp, #12
    1e30:	47b8      	blx	r7
			if (cnt == 0) {
    1e32:	9b03      	ldr	r3, [sp, #12]
    1e34:	b953      	cbnz	r3, 1e4c <cmd_resize+0x94>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_BUSY_WAIT, k_busy_wait, u32_t, usec_to_wait)
    1e36:	3e01      	subs	r6, #1
    1e38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1e3c:	b2b6      	uxth	r6, r6
    1e3e:	f004 fcc2 	bl	67c6 <z_impl_k_busy_wait>
	for (u16_t i = 0; i < 1000; i++) {
    1e42:	2e00      	cmp	r6, #0
    1e44:	d1ed      	bne.n	1e22 <cmd_resize+0x6a>
		ret_val = -ENOTSUP;
    1e46:	f06f 0422 	mvn.w	r4, #34	; 0x22
    1e4a:	e031      	b.n	1eb0 <cmd_resize+0xf8>
			if ((c != SHELL_VT100_ASCII_ESC) &&
    1e4c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    1e50:	68aa      	ldr	r2, [r5, #8]
    1e52:	2b1b      	cmp	r3, #27
    1e54:	d053      	beq.n	1efe <cmd_resize+0x146>
    1e56:	f892 1138 	ldrb.w	r1, [r2, #312]	; 0x138
    1e5a:	291b      	cmp	r1, #27
    1e5c:	d1e1      	bne.n	1e22 <cmd_resize+0x6a>
			if (c == 'R') { /* End of response from the terminal. */
    1e5e:	2b52      	cmp	r3, #82	; 0x52
    1e60:	d14d      	bne.n	1efe <cmd_resize+0x146>
				shell->ctx->temp_buff[buff_idx] = '\0';
    1e62:	4414      	add	r4, r2
    1e64:	2300      	movs	r3, #0
    1e66:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
				if (shell->ctx->temp_buff[1] != '[') {
    1e6a:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
    1e6e:	295b      	cmp	r1, #91	; 0x5b
    1e70:	d14d      	bne.n	1f0e <cmd_resize+0x156>
    1e72:	f502 709d 	add.w	r0, r2, #314	; 0x13a
	*y = 0U;
    1e76:	461f      	mov	r7, r3
				buff_idx = 2U;
    1e78:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    1e7a:	f810 1b01 	ldrb.w	r1, [r0], #1
    1e7e:	3601      	adds	r6, #1
    1e80:	293b      	cmp	r1, #59	; 0x3b
    1e82:	b2b6      	uxth	r6, r6
    1e84:	d126      	bne.n	1ed4 <cmd_resize+0x11c>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    1e86:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    1e8a:	d0dc      	beq.n	1e46 <cmd_resize+0x8e>
    1e8c:	f506 709c 	add.w	r0, r6, #312	; 0x138
    1e90:	4410      	add	r0, r2
	*x = 0U;
    1e92:	2300      	movs	r3, #0
				while (shell->ctx->temp_buff[buff_idx]
    1e94:	f810 4b01 	ldrb.w	r4, [r0], #1
    1e98:	bb34      	cbnz	r4, 1ee8 <cmd_resize+0x130>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    1e9a:	2bfa      	cmp	r3, #250	; 0xfa
    1e9c:	bf28      	it	cs
    1e9e:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    1ea0:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    1ea2:	8553      	strh	r3, [r2, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    1ea4:	463b      	mov	r3, r7
    1ea6:	bf28      	it	cs
    1ea8:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
    1eaa:	f882 4138 	strb.w	r4, [r2, #312]	; 0x138
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    1eae:	8513      	strh	r3, [r2, #40]	; 0x28
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
    1eb0:	4a1d      	ldr	r2, [pc, #116]	; (1f28 <cmd_resize+0x170>)
    1eb2:	491b      	ldr	r1, [pc, #108]	; (1f20 <cmd_resize+0x168>)
    1eb4:	6968      	ldr	r0, [r5, #20]
    1eb6:	f003 ffad 	bl	5e14 <shell_raw_fprintf>
	if (err != 0) {
    1eba:	2c00      	cmp	r4, #0
    1ebc:	d08c      	beq.n	1dd8 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
    1ebe:	68ab      	ldr	r3, [r5, #8]
    1ec0:	4a1a      	ldr	r2, [pc, #104]	; (1f2c <cmd_resize+0x174>)
    1ec2:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
    1ec4:	2104      	movs	r1, #4
    1ec6:	4a1a      	ldr	r2, [pc, #104]	; (1f30 <cmd_resize+0x178>)
    1ec8:	4628      	mov	r0, r5
    1eca:	f003 fac7 	bl	545c <shell_fprintf>
    1ece:	f06f 0407 	mvn.w	r4, #7
    1ed2:	e781      	b.n	1dd8 <cmd_resize+0x20>
					*y = *y * 10U +
    1ed4:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    1ed8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    1edc:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
    1ede:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
    1ee2:	b29f      	uxth	r7, r3
					if (buff_idx >=
    1ee4:	d1c9      	bne.n	1e7a <cmd_resize+0xc2>
    1ee6:	e7ae      	b.n	1e46 <cmd_resize+0x8e>
					*x = *x * 10U +
    1ee8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
    1eec:	3601      	adds	r6, #1
					*x = *x * 10U +
    1eee:	eb04 0443 	add.w	r4, r4, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
    1ef2:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
    1ef4:	3c30      	subs	r4, #48	; 0x30
					if (buff_idx >=
    1ef6:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
    1ef8:	b2a3      	uxth	r3, r4
					if (buff_idx >=
    1efa:	d9cb      	bls.n	1e94 <cmd_resize+0xdc>
    1efc:	e7a3      	b.n	1e46 <cmd_resize+0x8e>
			shell->ctx->temp_buff[buff_idx] = c;
    1efe:	1911      	adds	r1, r2, r4
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    1f00:	3401      	adds	r4, #1
    1f02:	b2a4      	uxth	r4, r4
    1f04:	2c09      	cmp	r4, #9
			shell->ctx->temp_buff[buff_idx] = c;
    1f06:	f881 3138 	strb.w	r3, [r1, #312]	; 0x138
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    1f0a:	d98a      	bls.n	1e22 <cmd_resize+0x6a>
				shell->ctx->temp_buff[0] = 0;
    1f0c:	2300      	movs	r3, #0
    1f0e:	f882 3138 	strb.w	r3, [r2, #312]	; 0x138
				return -ENOMEM;
    1f12:	e798      	b.n	1e46 <cmd_resize+0x8e>
    1f14:	0000735e 	.word	0x0000735e
    1f18:	00007355 	.word	0x00007355
    1f1c:	0000733c 	.word	0x0000733c
    1f20:	00007e02 	.word	0x00007e02
    1f24:	00007384 	.word	0x00007384
    1f28:	0000733f 	.word	0x0000733f
    1f2c:	00500018 	.word	0x00500018
    1f30:	0000754a 	.word	0x0000754a

00001f34 <shell_wildcard_process>:


enum shell_wildcard_status shell_wildcard_process(const struct shell *shell,
					      const struct shell_cmd_entry *cmd,
					      const char *pattern)
{
    1f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f38:	4682      	mov	sl, r0
    1f3a:	b089      	sub	sp, #36	; 0x24
    1f3c:	4616      	mov	r6, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
    1f3e:	468b      	mov	fp, r1
    1f40:	b921      	cbnz	r1, 1f4c <shell_wildcard_process+0x18>
		return ret_val;
    1f42:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
    1f44:	4620      	mov	r0, r4
    1f46:	b009      	add	sp, #36	; 0x24
    1f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!shell_wildcard_character_exist(pattern)) {
    1f4c:	4610      	mov	r0, r2
    1f4e:	f004 f82b 	bl	5fa8 <shell_wildcard_character_exist>
    1f52:	2800      	cmp	r0, #0
    1f54:	d0f5      	beq.n	1f42 <shell_wildcard_process+0xe>
    1f56:	2500      	movs	r5, #0
	size_t cnt = 0;
    1f58:	9501      	str	r5, [sp, #4]
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    1f5a:	2402      	movs	r4, #2
	if (cmd->is_dynamic) {
    1f5c:	f89b 2000 	ldrb.w	r2, [fp]
    1f60:	f8db 3004 	ldr.w	r3, [fp, #4]
    1f64:	4268      	negs	r0, r5
    1f66:	b18a      	cbz	r2, 1f8c <shell_wildcard_process+0x58>
		cmd->u.dynamic_get(idx, d_entry);
    1f68:	a903      	add	r1, sp, #12
    1f6a:	4798      	blx	r3
		*entry = (d_entry->syntax != NULL) ? d_entry : NULL;
    1f6c:	9b03      	ldr	r3, [sp, #12]
    1f6e:	2b00      	cmp	r3, #0
    1f70:	d15b      	bne.n	202a <shell_wildcard_process+0xf6>
	if (cnt > 0) {
    1f72:	9b01      	ldr	r3, [sp, #4]
    1f74:	2b00      	cmp	r3, #0
    1f76:	d0e5      	beq.n	1f44 <shell_wildcard_process+0x10>
		shell_pattern_remove(shell->ctx->temp_buff,
    1f78:	f8da 0008 	ldr.w	r0, [sl, #8]
    1f7c:	4632      	mov	r2, r6
    1f7e:	f100 0136 	add.w	r1, r0, #54	; 0x36
    1f82:	f500 709c 	add.w	r0, r0, #312	; 0x138
    1f86:	f003 fbc5 	bl	5714 <shell_pattern_remove>
	return ret_val;
    1f8a:	e7db      	b.n	1f44 <shell_wildcard_process+0x10>
		*entry = (cmd->u.entry[idx].syntax != NULL) ?
    1f8c:	f06f 0213 	mvn.w	r2, #19
    1f90:	436a      	muls	r2, r5
    1f92:	eb03 0802 	add.w	r8, r3, r2
				&cmd->u.entry[idx] : NULL;
    1f96:	589b      	ldr	r3, [r3, r2]
    1f98:	2b00      	cmp	r3, #0
    1f9a:	d0ea      	beq.n	1f72 <shell_wildcard_process+0x3e>
		if (fnmatch(pattern, p_static_entry->syntax, 0) == 0) {
    1f9c:	2200      	movs	r2, #0
    1f9e:	f8d8 1000 	ldr.w	r1, [r8]
    1fa2:	4630      	mov	r0, r6
    1fa4:	f003 fa27 	bl	53f6 <fnmatch>
    1fa8:	bb80      	cbnz	r0, 200c <shell_wildcard_process+0xd8>
			ret_val = command_add(shell->ctx->temp_buff,
    1faa:	f8d8 9000 	ldr.w	r9, [r8]
    1fae:	f8da 7008 	ldr.w	r7, [sl, #8]
	return str == NULL ? 0U : (u16_t)strlen(str);
    1fb2:	f1b9 0f00 	cmp.w	r9, #0
    1fb6:	d02c      	beq.n	2012 <shell_wildcard_process+0xde>
    1fb8:	4648      	mov	r0, r9
    1fba:	f004 f88f 	bl	60dc <strlen>
    1fbe:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
    1fc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
    1fc2:	3301      	adds	r3, #1
    1fc4:	4423      	add	r3, r4
    1fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    1fca:	dc24      	bgt.n	2016 <shell_wildcard_process+0xe2>
	completion_addr = strstr(buff, pattern);
    1fcc:	4631      	mov	r1, r6
    1fce:	f507 709c 	add.w	r0, r7, #312	; 0x138
    1fd2:	f004 f84e 	bl	6072 <strstr>
	if (!completion_addr) {
    1fd6:	4680      	mov	r8, r0
    1fd8:	b328      	cbz	r0, 2026 <shell_wildcard_process+0xf2>
    1fda:	f004 f87f 	bl	60dc <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
    1fde:	b282      	uxth	r2, r0
    1fe0:	1c60      	adds	r0, r4, #1
    1fe2:	3201      	adds	r2, #1
    1fe4:	4641      	mov	r1, r8
    1fe6:	4440      	add	r0, r8
    1fe8:	f004 f8aa 	bl	6140 <memmove>
	memcpy(completion_addr, cmd, cmd_len);
    1fec:	4622      	mov	r2, r4
    1fee:	4649      	mov	r1, r9
    1ff0:	4640      	mov	r0, r8
    1ff2:	f004 f8bc 	bl	616e <memcpy>
	completion_addr[cmd_len] = ' ';
    1ff6:	2320      	movs	r3, #32
    1ff8:	f808 3004 	strb.w	r3, [r8, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
    1ffc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
    1ffe:	441c      	add	r4, r3
			cnt++;
    2000:	9b01      	ldr	r3, [sp, #4]
	*buff_len += cmd_len + 1; /* + 1 for space */
    2002:	3401      	adds	r4, #1
			cnt++;
    2004:	3301      	adds	r3, #1
	*buff_len += cmd_len + 1; /* + 1 for space */
    2006:	86fc      	strh	r4, [r7, #54]	; 0x36
			cnt++;
    2008:	9301      	str	r3, [sp, #4]
			ret_val = command_add(shell->ctx->temp_buff,
    200a:	2400      	movs	r4, #0
	} while (cmd_idx);
    200c:	3d01      	subs	r5, #1
    200e:	d1a5      	bne.n	1f5c <shell_wildcard_process+0x28>
    2010:	e7af      	b.n	1f72 <shell_wildcard_process+0x3e>
    2012:	464c      	mov	r4, r9
    2014:	e7d4      	b.n	1fc0 <shell_wildcard_process+0x8c>
				shell_internal_fprintf(shell,
    2016:	4633      	mov	r3, r6
    2018:	4a05      	ldr	r2, [pc, #20]	; (2030 <shell_wildcard_process+0xfc>)
    201a:	2104      	movs	r1, #4
    201c:	4650      	mov	r0, sl
    201e:	f003 fd89 	bl	5b34 <shell_internal_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
    2022:	2401      	movs	r4, #1
    2024:	e7a5      	b.n	1f72 <shell_wildcard_process+0x3e>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    2026:	2402      	movs	r4, #2
    2028:	e7a3      	b.n	1f72 <shell_wildcard_process+0x3e>
		*entry = (d_entry->syntax != NULL) ? d_entry : NULL;
    202a:	f10d 080c 	add.w	r8, sp, #12
    202e:	e7b5      	b.n	1f9c <shell_wildcard_process+0x68>
    2030:	00007967 	.word	0x00007967

00002034 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    2034:	280a      	cmp	r0, #10
{
    2036:	b538      	push	{r3, r4, r5, lr}
    2038:	4604      	mov	r4, r0
    203a:	4d07      	ldr	r5, [pc, #28]	; (2058 <console_out+0x24>)
	if ('\n' == c) {
    203c:	d104      	bne.n	2048 <console_out+0x14>
    203e:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    2040:	6843      	ldr	r3, [r0, #4]
    2042:	210d      	movs	r1, #13
    2044:	685b      	ldr	r3, [r3, #4]
    2046:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    2048:	6828      	ldr	r0, [r5, #0]
    204a:	6843      	ldr	r3, [r0, #4]
    204c:	b2e1      	uxtb	r1, r4
    204e:	685b      	ldr	r3, [r3, #4]
    2050:	4798      	blx	r3

	return c;
}
    2052:	4620      	mov	r0, r4
    2054:	bd38      	pop	{r3, r4, r5, pc}
    2056:	bf00      	nop
    2058:	200003b0 	.word	0x200003b0

0000205c <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    205c:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    205e:	4c04      	ldr	r4, [pc, #16]	; (2070 <uart_console_hook_install+0x14>)
    2060:	4620      	mov	r0, r4
    2062:	f001 facd 	bl	3600 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2066:	4620      	mov	r0, r4
}
    2068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    206c:	f7fe baa6 	b.w	5bc <__printk_hook_install>
    2070:	00002035 	.word	0x00002035

00002074 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    2074:	b508      	push	{r3, lr}
    2076:	4804      	ldr	r0, [pc, #16]	; (2088 <uart_console_init+0x14>)
    2078:	f001 fe4c 	bl	3d14 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    207c:	4b03      	ldr	r3, [pc, #12]	; (208c <uart_console_init+0x18>)
    207e:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    2080:	f7ff ffec 	bl	205c <uart_console_hook_install>

	return 0;
}
    2084:	2000      	movs	r0, #0
    2086:	bd08      	pop	{r3, pc}
    2088:	00007302 	.word	0x00007302
    208c:	200003b0 	.word	0x200003b0

00002090 <m16src_stop>:
		return -EINPROGRESS;
	}
}

static int m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    2090:	b510      	push	{r4, lr}
	__asm__ volatile(
    2092:	f04f 0320 	mov.w	r3, #32
    2096:	f3ef 8211 	mrs	r2, BASEPRI
    209a:	f383 8811 	msr	BASEPRI, r3
    209e:	f3bf 8f6f 	isb	sy
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    20a2:	4c15      	ldr	r4, [pc, #84]	; (20f8 <m16src_stop+0x68>)
    20a4:	7823      	ldrb	r3, [r4, #0]
    20a6:	b933      	cbnz	r3, 20b6 <m16src_stop+0x26>
	__asm__ volatile(
    20a8:	f382 8811 	msr	BASEPRI, r2
    20ac:	f3bf 8f6f 	isb	sy
		irq_unlock(imask);
		return -EALREADY;
    20b0:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0U;

	return 0;
}
    20b4:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
    20b6:	3b01      	subs	r3, #1
    20b8:	b2db      	uxtb	r3, r3
    20ba:	7023      	strb	r3, [r4, #0]
    20bc:	b133      	cbz	r3, 20cc <m16src_stop+0x3c>
    20be:	f382 8811 	msr	BASEPRI, r2
    20c2:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    20c6:	f06f 000f 	mvn.w	r0, #15
    20ca:	e7f3      	b.n	20b4 <m16src_stop+0x24>
	if (m16src_grd) {
    20cc:	4b0b      	ldr	r3, [pc, #44]	; (20fc <m16src_stop+0x6c>)
    20ce:	7818      	ldrb	r0, [r3, #0]
    20d0:	2101      	movs	r1, #1
    20d2:	b138      	cbz	r0, 20e4 <m16src_stop+0x54>
		m16src_ref++;
    20d4:	7021      	strb	r1, [r4, #0]
    20d6:	f382 8811 	msr	BASEPRI, r2
    20da:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    20de:	f06f 000a 	mvn.w	r0, #10
    20e2:	e7e7      	b.n	20b4 <m16src_stop+0x24>
	m16src_grd = 1U;
    20e4:	7019      	strb	r1, [r3, #0]
    20e6:	f382 8811 	msr	BASEPRI, r2
    20ea:	f3bf 8f6f 	isb	sy
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    20ee:	4a04      	ldr	r2, [pc, #16]	; (2100 <m16src_stop+0x70>)
    20f0:	6011      	str	r1, [r2, #0]
	m16src_grd = 0U;
    20f2:	7018      	strb	r0, [r3, #0]
	return 0;
    20f4:	e7de      	b.n	20b4 <m16src_stop+0x24>
    20f6:	bf00      	nop
    20f8:	20000560 	.word	0x20000560
    20fc:	2000055f 	.word	0x2000055f
    2100:	40000004 	.word	0x40000004

00002104 <m16src_start>:
{
    2104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    2106:	f04f 0220 	mov.w	r2, #32
    210a:	f3ef 8311 	mrs	r3, BASEPRI
    210e:	f382 8811 	msr	BASEPRI, r2
    2112:	f3bf 8f6f 	isb	sy
	if (m16src_ref++) {
    2116:	4a29      	ldr	r2, [pc, #164]	; (21bc <m16src_start+0xb8>)
    2118:	7810      	ldrb	r0, [r2, #0]
    211a:	1c44      	adds	r4, r0, #1
    211c:	7014      	strb	r4, [r2, #0]
    211e:	b180      	cbz	r0, 2142 <m16src_start+0x3e>
	__asm__ volatile(
    2120:	f383 8811 	msr	BASEPRI, r3
    2124:	f3bf 8f6f 	isb	sy
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
    2128:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    212c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    2130:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
    2134:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    2138:	bf0c      	ite	eq
    213a:	2000      	moveq	r0, #0
    213c:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    2140:	e009      	b.n	2156 <m16src_start+0x52>
	if (m16src_grd) {
    2142:	4d1f      	ldr	r5, [pc, #124]	; (21c0 <m16src_start+0xbc>)
    2144:	782f      	ldrb	r7, [r5, #0]
    2146:	b13f      	cbz	r7, 2158 <m16src_start+0x54>
		m16src_ref--;
    2148:	7010      	strb	r0, [r2, #0]
    214a:	f383 8811 	msr	BASEPRI, r3
    214e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    2152:	f06f 000a 	mvn.w	r0, #10
}
    2156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1U;
    2158:	2601      	movs	r6, #1
    215a:	702e      	strb	r6, [r5, #0]
    215c:	f383 8811 	msr	BASEPRI, r3
    2160:	f3bf 8f6f 	isb	sy
	if (blocking) {
    2164:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    2168:	b319      	cbz	r1, 21b2 <m16src_start+0xae>
		irq_disable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    216a:	4638      	mov	r0, r7
    216c:	f000 fa50 	bl	2610 <z_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2170:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    2174:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
    2178:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    217c:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    217e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    2182:	b192      	cbz	r2, 21aa <m16src_start+0xa6>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2184:	2200      	movs	r2, #0
    2186:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    218a:	4a0e      	ldr	r2, [pc, #56]	; (21c4 <m16src_start+0xc0>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    218c:	f013 0f01 	tst.w	r3, #1
    2190:	f04f 0301 	mov.w	r3, #1
    NRF_CLOCK->INTENCLR = int_mask;
    2194:	bf08      	it	eq
    2196:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    219a:	2000      	movs	r0, #0
    219c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    21a0:	f000 fa26 	bl	25f0 <z_arch_irq_enable>
	m16src_grd = 0U;
    21a4:	2300      	movs	r3, #0
    21a6:	702b      	strb	r3, [r5, #0]
    21a8:	e7be      	b.n	2128 <m16src_start+0x24>
			__WFE();
    21aa:	bf20      	wfe
			__SEV();
    21ac:	bf40      	sev
			__WFE();
    21ae:	bf20      	wfe
    21b0:	e7e5      	b.n	217e <m16src_start+0x7a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    21b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    21b6:	6026      	str	r6, [r4, #0]
    21b8:	e7f4      	b.n	21a4 <m16src_start+0xa0>
    21ba:	bf00      	nop
    21bc:	20000560 	.word	0x20000560
    21c0:	2000055f 	.word	0x2000055f
    21c4:	e000e100 	.word	0xe000e100

000021c8 <k32src_start>:

static int k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    21c8:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    21ca:	f04f 0220 	mov.w	r2, #32
    21ce:	f3ef 8311 	mrs	r3, BASEPRI
    21d2:	f382 8811 	msr	BASEPRI, r2
    21d6:	f3bf 8f6f 	isb	sy
	 * initialized flag.
	 */

	imask = irq_lock();

	if (k32src_initialized) {
    21da:	4d24      	ldr	r5, [pc, #144]	; (226c <k32src_start+0xa4>)
    21dc:	782a      	ldrb	r2, [r5, #0]
    21de:	b19a      	cbz	r2, 2208 <k32src_start+0x40>
	__asm__ volatile(
    21e0:	f383 8811 	msr	BASEPRI, r3
    21e4:	f3bf 8f6f 	isb	sy
		}
	}
#endif /* NRF_CLOCK_HAS_CALIBRATION */

lf_already_started:
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    21e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    21ec:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	       CLOCK_LFCLKSTAT_STATE_Msk;
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    21f0:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    21f4:	f003 0303 	and.w	r3, r3, #3
    21f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    21fc:	4393      	bics	r3, r2
		return 0;
	} else {
		return -EINPROGRESS;
	}
}
    21fe:	bf14      	ite	ne
    2200:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    2204:	2000      	moveq	r0, #0
    2206:	bd70      	pop	{r4, r5, r6, pc}
	k32src_initialized = 1U;
    2208:	2401      	movs	r4, #1
    220a:	702c      	strb	r4, [r5, #0]
    220c:	f383 8811 	msr	BASEPRI, r3
    2210:	f3bf 8f6f 	isb	sy
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2218:	4e15      	ldr	r6, [pc, #84]	; (2270 <k32src_start+0xa8>)
    221a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    NRF_CLOCK->INTENSET = int_mask;
    221e:	2502      	movs	r5, #2
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    2220:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    2224:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    2228:	f011 0103 	ands.w	r1, r1, #3
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    222c:	6034      	str	r4, [r6, #0]
    NRF_CLOCK->INTENCLR = int_mask;
    222e:	f04f 0618 	mov.w	r6, #24
    2232:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    2236:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    223a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    223e:	d1d3      	bne.n	21e8 <k32src_start+0x20>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    2240:	2210      	movs	r2, #16
    2242:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_CLOCK->INTENSET = int_mask;
    2246:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
		if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) == 0) {
    224a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    224e:	03d2      	lsls	r2, r2, #15
    2250:	d402      	bmi.n	2258 <k32src_start+0x90>
    2252:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
			goto lf_already_started;
    2256:	e7c7      	b.n	21e8 <k32src_start+0x20>
    2258:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = m16src_start(dev, false);
    225c:	f7ff ff52 	bl	2104 <m16src_start>
		if (!err) {
    2260:	2800      	cmp	r0, #0
    2262:	d1c1      	bne.n	21e8 <k32src_start+0x20>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2264:	4b03      	ldr	r3, [pc, #12]	; (2274 <k32src_start+0xac>)
    2266:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    226a:	e7bd      	b.n	21e8 <k32src_start+0x20>
    226c:	2000055e 	.word	0x2000055e
    2270:	40000008 	.word	0x40000008
    2274:	e000e100 	.word	0xe000e100

00002278 <nrf_power_clock_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void nrf_power_clock_isr(void *arg)
{
    2278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
	bool usb_detected, usb_pwr_rdy, usb_removed;
#endif

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    227a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    227e:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2280:	f8d3 c108 	ldr.w	ip, [r3, #264]	; 0x108

	hf_intenset = ((NRF_CLOCK->INTENSET &
    2284:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		       CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    2288:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100

	lf_intenset = ((NRF_CLOCK->INTENSET &
    228c:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
		       CLOCK_INTENSET_LFCLKSTARTED_Msk) != 0);
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    2290:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104

#if NRF_CLOCK_HAS_CALIBRATION
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    2294:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    2298:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
    229c:	3400      	adds	r4, #0
	hf_intenset = ((NRF_CLOCK->INTENSET &
    229e:	f002 0201 	and.w	r2, r2, #1
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    22a2:	bf18      	it	ne
    22a4:	2401      	movne	r4, #1
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
			|| usb_detected || usb_pwr_rdy || usb_removed
#endif
	);

	if (pof) {
    22a6:	f1bc 0f00 	cmp.w	ip, #0
    22aa:	d003      	beq.n	22b4 <nrf_power_clock_isr+0x3c>
		NRF_POWER->EVENTS_POFWARN = 0;
    22ac:	f04f 0c00 	mov.w	ip, #0
    22b0:	f8c3 c108 	str.w	ip, [r3, #264]	; 0x108
	}

	if (hf) {
    22b4:	2f00      	cmp	r7, #0
    22b6:	d041      	beq.n	233c <nrf_power_clock_isr+0xc4>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    22b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    22bc:	2700      	movs	r7, #0
    22be:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	}

	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    22c2:	b152      	cbz	r2, 22da <nrf_power_clock_isr+0x62>
				   (CLOCK_HFCLKSTAT_STATE_Msk |
				    CLOCK_HFCLKSTAT_SRC_Msk)))){
		/* INTENSET is used as state flag to start calibration,
		 * hence clear it here.
		 */
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    22c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration start, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    22c8:	4f22      	ldr	r7, [pc, #136]	; (2354 <nrf_power_clock_isr+0xdc>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    22ca:	2201      	movs	r2, #1
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    22cc:	f04f 0c02 	mov.w	ip, #2
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    22d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    22d4:	f8c7 c000 	str.w	ip, [r7]
#endif /* CONFIG_SOC_SERIES_NRF52X */

#if NRF_CLOCK_HAS_CALIBRATION
		/* Start Calibration */
		NRF_CLOCK->TASKS_CAL = 1;
    22d8:	611a      	str	r2, [r3, #16]
#endif
	}

	if (lf) {
    22da:	b9ee      	cbnz	r6, 2318 <nrf_power_clock_isr+0xa0>
#endif
		}
	}

#if NRF_CLOCK_HAS_CALIBRATION
	if (done) {
    22dc:	b159      	cbz	r1, 22f6 <nrf_power_clock_isr+0x7e>
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration done, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    22de:	4b1d      	ldr	r3, [pc, #116]	; (2354 <nrf_power_clock_isr+0xdc>)
#endif /* CONFIG_SOC_SERIES_NRF52X */

		NRF_CLOCK->EVENTS_DONE = 0;
    22e0:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    22e4:	2100      	movs	r1, #0
    22e6:	6019      	str	r1, [r3, #0]

		/* Calibration done, stop 16M Xtal. */
		err = m16src_stop(dev, NULL);
    22e8:	4628      	mov	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    22ea:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = m16src_stop(dev, NULL);
    22ee:	f7ff fecf 	bl	2090 <m16src_stop>
		__ASSERT_NO_MSG(!err || err == -EBUSY);

		/* Start timer for next calibration. */
		NRF_CLOCK->TASKS_CTSTART = 1;
    22f2:	2301      	movs	r3, #1
    22f4:	6173      	str	r3, [r6, #20]
	}

	if (ctto) {
    22f6:	b174      	cbz	r4, 2316 <nrf_power_clock_isr+0x9e>
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
    22f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    22fc:	2100      	movs	r1, #0

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    22fe:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    2300:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110

		err = m16src_start(dev, false);
    2304:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2306:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = m16src_start(dev, false);
    230a:	f7ff fefb 	bl	2104 <m16src_start>
		if (!err) {
    230e:	b910      	cbnz	r0, 2316 <nrf_power_clock_isr+0x9e>
    2310:	4b11      	ldr	r3, [pc, #68]	; (2358 <nrf_power_clock_isr+0xe0>)
    2312:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	if (usb_removed) {
		nrf_power_event_clear(NRF_POWER_EVENT_USBREMOVED);
		power_event_cb(NRF_POWER_EVENT_USBREMOVED);
	}
#endif
}
    2316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    231c:	2200      	movs	r2, #0
    231e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (lf_intenset) {
    2322:	0782      	lsls	r2, r0, #30
    2324:	d5da      	bpl.n	22dc <nrf_power_clock_isr+0x64>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2326:	2202      	movs	r2, #2
    2328:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
			if ((NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) ==
    232c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2330:	079b      	lsls	r3, r3, #30
    2332:	d1d3      	bne.n	22dc <nrf_power_clock_isr+0x64>
	if (done) {
    2334:	2900      	cmp	r1, #0
    2336:	d0df      	beq.n	22f8 <nrf_power_clock_isr+0x80>
				ctto = 1U;
    2338:	2401      	movs	r4, #1
    233a:	e7d0      	b.n	22de <nrf_power_clock_isr+0x66>
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    233c:	2a00      	cmp	r2, #0
    233e:	d0cc      	beq.n	22da <nrf_power_clock_isr+0x62>
    2340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2344:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    2348:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    234c:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    2350:	d1c3      	bne.n	22da <nrf_power_clock_isr+0x62>
    2352:	e7b7      	b.n	22c4 <nrf_power_clock_isr+0x4c>
    2354:	40000c34 	.word	0x40000c34
    2358:	e000e100 	.word	0xe000e100

0000235c <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    235c:	4b0d      	ldr	r3, [pc, #52]	; (2394 <rtc1_nrf_isr+0x38>)
    235e:	2200      	movs	r2, #0
    2360:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    2364:	f04f 0220 	mov.w	r2, #32
    2368:	f3ef 8111 	mrs	r1, BASEPRI
    236c:	f382 8811 	msr	BASEPRI, r2
    2370:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    2374:	4a08      	ldr	r2, [pc, #32]	; (2398 <rtc1_nrf_isr+0x3c>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    2376:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    237a:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    237c:	1ac0      	subs	r0, r0, r3
    237e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    2382:	4403      	add	r3, r0
    2384:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    2386:	f381 8811 	msr	BASEPRI, r1
    238a:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    238e:	f002 badd 	b.w	494c <z_clock_announce>
    2392:	bf00      	nop
    2394:	40011000 	.word	0x40011000
    2398:	200003b4 	.word	0x200003b4

0000239c <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    239c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    239e:	481c      	ldr	r0, [pc, #112]	; (2410 <z_clock_driver_init+0x74>)
    23a0:	f001 fcb8 	bl	3d14 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    23a4:	b380      	cbz	r0, 2408 <z_clock_driver_init+0x6c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    23a6:	6843      	ldr	r3, [r0, #4]
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    23a8:	4d1a      	ldr	r5, [pc, #104]	; (2414 <z_clock_driver_init+0x78>)
    23aa:	681b      	ldr	r3, [r3, #0]
    23ac:	2101      	movs	r1, #1
    23ae:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    23b0:	2601      	movs	r6, #1
    p_reg->PRESCALER = val;
    23b2:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    23b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    23b8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    23bc:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    23c0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    23c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    23c8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    23cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    23d0:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    23d2:	681b      	ldr	r3, [r3, #0]
    23d4:	9301      	str	r3, [sp, #4]
    (void)dummy;
    23d6:	9b01      	ldr	r3, [sp, #4]
    23d8:	4b0f      	ldr	r3, [pc, #60]	; (2418 <z_clock_driver_init+0x7c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    23da:	4631      	mov	r1, r6
    23dc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    23e0:	2011      	movs	r0, #17
    23e2:	4622      	mov	r2, r4
    23e4:	f000 f928 	bl	2638 <z_irq_priority_set>
	irq_enable(RTC1_IRQn);
    23e8:	2011      	movs	r0, #17
    23ea:	f000 f901 	bl	25f0 <z_arch_irq_enable>
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    23ee:	4b0b      	ldr	r3, [pc, #44]	; (241c <z_clock_driver_init+0x80>)
    23f0:	601e      	str	r6, [r3, #0]
    23f2:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    23f4:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    23f8:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    23fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    23fe:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
    2402:	4620      	mov	r0, r4
}
    2404:	b002      	add	sp, #8
    2406:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    2408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    240c:	e7fa      	b.n	2404 <z_clock_driver_init+0x68>
    240e:	bf00      	nop
    2410:	000079b9 	.word	0x000079b9
    2414:	40011000 	.word	0x40011000
    2418:	e000e100 	.word	0xe000e100
    241c:	40011008 	.word	0x40011008

00002420 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    2420:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    2422:	4e21      	ldr	r6, [pc, #132]	; (24a8 <z_clock_set_timeout+0x88>)
    2424:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2428:	bf08      	it	eq
    242a:	4630      	moveq	r0, r6
	__asm__ volatile(
    242c:	f04f 0320 	mov.w	r3, #32
    2430:	f3ef 8411 	mrs	r4, BASEPRI
    2434:	f383 8811 	msr	BASEPRI, r3
    2438:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    243c:	491b      	ldr	r1, [pc, #108]	; (24ac <z_clock_set_timeout+0x8c>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool flagged = false;

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    243e:	4b1c      	ldr	r3, [pc, #112]	; (24b0 <z_clock_set_timeout+0x90>)
    2440:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
    2444:	681d      	ldr	r5, [r3, #0]
	return (a - b) & COUNTER_MAX;
    2446:	1b53      	subs	r3, r2, r5
    2448:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
    244c:	3501      	adds	r5, #1
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    244e:	3801      	subs	r0, #1
	cyc += last_count;
    2450:	442b      	add	r3, r5
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    2452:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += last_count;
    2456:	42b0      	cmp	r0, r6
    2458:	bfd4      	ite	le
    245a:	1818      	addle	r0, r3, r0
    245c:	1998      	addgt	r0, r3, r6
	return (a - b) & COUNTER_MAX;
    245e:	1a82      	subs	r2, r0, r2
    2460:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2464:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    2468:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
    246a:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
    246e:	d904      	bls.n	247a <z_clock_set_timeout+0x5a>
	__asm__ volatile(
    2470:	f384 8811 	msr	BASEPRI, r4
    2474:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    2478:	bd70      	pop	{r4, r5, r6, pc}
     return p_reg->COUNTER;
    247a:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    247e:	4a0d      	ldr	r2, [pc, #52]	; (24b4 <z_clock_set_timeout+0x94>)
	return (a - b) & COUNTER_MAX;
    2480:	1ac3      	subs	r3, r0, r3
    2482:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    2486:	1e5d      	subs	r5, r3, #1
    2488:	4295      	cmp	r5, r2
    248a:	d905      	bls.n	2498 <z_clock_set_timeout+0x78>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    248c:	4b0a      	ldr	r3, [pc, #40]	; (24b8 <z_clock_set_timeout+0x98>)
    248e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2492:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2496:	e7eb      	b.n	2470 <z_clock_set_timeout+0x50>
		} else if (dt == 1) {
    2498:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    249a:	bf02      	ittt	eq
    249c:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    249e:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    24a2:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
    24a6:	e7e3      	b.n	2470 <z_clock_set_timeout+0x50>
    24a8:	00fffffe 	.word	0x00fffffe
    24ac:	40011000 	.word	0x40011000
    24b0:	200003b4 	.word	0x200003b4
    24b4:	007ffffe 	.word	0x007ffffe
    24b8:	e000e100 	.word	0xe000e100

000024bc <z_clock_elapsed>:
	__asm__ volatile(
    24bc:	f04f 0220 	mov.w	r2, #32
    24c0:	f3ef 8311 	mrs	r3, BASEPRI
    24c4:	f382 8811 	msr	BASEPRI, r2
    24c8:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    24cc:	4a06      	ldr	r2, [pc, #24]	; (24e8 <z_clock_elapsed+0x2c>)
    24ce:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    24d2:	4a06      	ldr	r2, [pc, #24]	; (24ec <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    24d4:	6812      	ldr	r2, [r2, #0]
    24d6:	1a80      	subs	r0, r0, r2
    24d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    24dc:	f383 8811 	msr	BASEPRI, r3
    24e0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    24e4:	4770      	bx	lr
    24e6:	bf00      	nop
    24e8:	40011000 	.word	0x40011000
    24ec:	200003b4 	.word	0x200003b4

000024f0 <z_timer_cycle_get_32>:
	__asm__ volatile(
    24f0:	f04f 0320 	mov.w	r3, #32
    24f4:	f3ef 8211 	mrs	r2, BASEPRI
    24f8:	f383 8811 	msr	BASEPRI, r3
    24fc:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    2500:	4906      	ldr	r1, [pc, #24]	; (251c <z_timer_cycle_get_32+0x2c>)
    2502:	4b07      	ldr	r3, [pc, #28]	; (2520 <z_timer_cycle_get_32+0x30>)
    2504:	6808      	ldr	r0, [r1, #0]
    2506:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    250a:	f382 8811 	msr	BASEPRI, r2
    250e:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    2512:	1a1b      	subs	r3, r3, r0
    2514:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    2518:	4418      	add	r0, r3
    251a:	4770      	bx	lr
    251c:	200003b4 	.word	0x200003b4
    2520:	40011000 	.word	0x40011000

00002524 <_IntExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    2524:	4804      	ldr	r0, [pc, #16]	; (2538 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    2526:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    2528:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    252a:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    252c:	d003      	beq.n	2536 <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    252e:	4903      	ldr	r1, [pc, #12]	; (253c <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    2530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    2534:	600a      	str	r2, [r1, #0]

00002536 <_EXIT_EXC>:
    mov lr, r1
#else
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */
    bx lr
    2536:	4770      	bx	lr
    ldr r0, =_kernel
    2538:	200004b8 	.word	0x200004b8
    ldr r1, =_SCS_ICSR
    253c:	e000ed04 	.word	0xe000ed04

00002540 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    2540:	4a09      	ldr	r2, [pc, #36]	; (2568 <__swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2542:	490a      	ldr	r1, [pc, #40]	; (256c <__swap+0x2c>)
	_current->arch.basepri = key;
    2544:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2546:	6809      	ldr	r1, [r1, #0]
    2548:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    254a:	4909      	ldr	r1, [pc, #36]	; (2570 <__swap+0x30>)
	_current->arch.basepri = key;
    254c:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    254e:	684b      	ldr	r3, [r1, #4]
    2550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2554:	604b      	str	r3, [r1, #4]
    2556:	2300      	movs	r3, #0
    2558:	f383 8811 	msr	BASEPRI, r3
    255c:	f3bf 8f6f 	isb	sy
	irq_unlock(0);

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2560:	6893      	ldr	r3, [r2, #8]
}
    2562:	6e98      	ldr	r0, [r3, #104]	; 0x68
    2564:	4770      	bx	lr
    2566:	bf00      	nop
    2568:	200004b8 	.word	0x200004b8
    256c:	00006ff4 	.word	0x00006ff4
    2570:	e000ed00 	.word	0xe000ed00

00002574 <__pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2574:	4913      	ldr	r1, [pc, #76]	; (25c4 <__pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2576:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2578:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    257c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    257e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2582:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2586:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2588:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    258c:	f3bf 8f6f 	isb	sy
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    2590:	4f0d      	ldr	r7, [pc, #52]	; (25c8 <__pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2592:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2596:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    2598:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    259a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    259c:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
    259e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    25a0:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    25a2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    25a6:	b504      	push	{r2, lr}
    ldr r0, =_kernel
    25a8:	4806      	ldr	r0, [pc, #24]	; (25c4 <__pendsv+0x50>)
    ldr r0, [r0, #_kernel_offset_to_current]
    25aa:	6880      	ldr	r0, [r0, #8]
    bl z_arch_configure_dynamic_mpu_regions
    25ac:	f003 fd59 	bl	6062 <z_arch_configure_dynamic_mpu_regions>
    pop {r2,lr}
    25b0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    25b4:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    25b8:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

    msr PSP, ip
    25bc:	f38c 8809 	msr	PSP, ip
    pop {r0, lr}
#endif
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
    25c0:	4770      	bx	lr
    25c2:	0000      	.short	0x0000
    ldr r1, =_kernel
    25c4:	200004b8 	.word	0x200004b8
    ldr v4, =_SCS_ICSR
    25c8:	e000ed04 	.word	0xe000ed04

000025cc <__svc>:
 * - System Calls (User mode)
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    25cc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    25d0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    25d2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    25d6:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    25da:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read encoding */
    ldrh r1, [r1, #-2]
    25dc:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call (if user mode supported)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    25e0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    25e4:	2902      	cmp	r1, #2
    beq _oops
    25e6:	d0ff      	beq.n	25e8 <_oops>

000025e8 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {r0, lr}
    25e8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    25ea:	f003 fd2f 	bl	604c <z_do_kernel_oops>
    pop {r0, pc}
    25ee:	bd01      	pop	{r0, pc}

000025f0 <z_arch_irq_enable>:
 *
 * @return N/A
 */
void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    25f0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    25f2:	2b00      	cmp	r3, #0
    25f4:	db08      	blt.n	2608 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25f6:	2201      	movs	r2, #1
    25f8:	f000 001f 	and.w	r0, r0, #31
    25fc:	fa02 f000 	lsl.w	r0, r2, r0
    2600:	095b      	lsrs	r3, r3, #5
    2602:	4a02      	ldr	r2, [pc, #8]	; (260c <z_arch_irq_enable+0x1c>)
    2604:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2608:	4770      	bx	lr
    260a:	bf00      	nop
    260c:	e000e100 	.word	0xe000e100

00002610 <z_arch_irq_disable>:
 *
 * @return N/A
 */
void z_arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    2610:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2612:	2b00      	cmp	r3, #0
    2614:	db0d      	blt.n	2632 <z_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2616:	2201      	movs	r2, #1
    2618:	095b      	lsrs	r3, r3, #5
    261a:	f000 001f 	and.w	r0, r0, #31
    261e:	fa02 f000 	lsl.w	r0, r2, r0
    2622:	3320      	adds	r3, #32
    2624:	4a03      	ldr	r2, [pc, #12]	; (2634 <z_arch_irq_disable+0x24>)
    2626:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    262a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    262e:	f3bf 8f6f 	isb	sy
}
    2632:	4770      	bx	lr
    2634:	e000e100 	.word	0xe000e100

00002638 <z_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2638:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    263a:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    263c:	bfa8      	it	ge
    263e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    2642:	f101 0101 	add.w	r1, r1, #1
    2646:	ea4f 1141 	mov.w	r1, r1, lsl #5
    264a:	bfae      	itee	ge
    264c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2650:	f000 000f 	andlt.w	r0, r0, #15
    2654:	4b03      	ldrlt	r3, [pc, #12]	; (2664 <z_irq_priority_set+0x2c>)
    2656:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2658:	bfac      	ite	ge
    265a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    265e:	5419      	strblt	r1, [r3, r0]
}
    2660:	4770      	bx	lr
    2662:	bf00      	nop
    2664:	e000ed14 	.word	0xe000ed14

00002668 <z_new_thread>:

void z_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    2668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    266c:	188c      	adds	r4, r1, r2
{
    266e:	4688      	mov	r8, r1
    2670:	4617      	mov	r7, r2
    2672:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    2674:	2204      	movs	r2, #4
    2676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2678:	9909      	ldr	r1, [sp, #36]	; 0x24
    267a:	4605      	mov	r5, r0
    267c:	f004 f8c9 	bl	6812 <z_init_thread_base>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    2680:	f1a4 0320 	sub.w	r3, r4, #32
#else
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    2684:	490c      	ldr	r1, [pc, #48]	; (26b8 <z_new_thread+0x50>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    2686:	f023 0307 	bic.w	r3, r3, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    268a:	2200      	movs	r2, #0
	pInitCtx->basic.pc &= 0xfffffffe;
    268c:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
    2690:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    2694:	e9c5 8716 	strd	r8, r7, [r5, #88]	; 0x58
    2698:	6199      	str	r1, [r3, #24]

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    269a:	9906      	ldr	r1, [sp, #24]
    269c:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    269e:	9907      	ldr	r1, [sp, #28]
    26a0:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    26a2:	9908      	ldr	r1, [sp, #32]
    26a4:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
    26a6:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
    26aa:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
    26ac:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    26ae:	64ab      	str	r3, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    26b0:	666a      	str	r2, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    26b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    26b6:	bf00      	nop
    26b8:	00004d01 	.word	0x00004d01

000026bc <z_CpuIdleInit>:
 *
 * void z_CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, z_CpuIdleInit)
	ldr r1, =_SCB_SCR
    26bc:	4901      	ldr	r1, [pc, #4]	; (26c4 <z_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    26be:	2210      	movs	r2, #16
	str r2, [r1]
    26c0:	600a      	str	r2, [r1, #0]
	bx lr
    26c2:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    26c4:	e000ed10 	.word	0xe000ed10

000026c8 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    26c8:	4040      	eors	r0, r0
	msr BASEPRI, r0
    26ca:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    26ce:	bf30      	wfi

	bx lr
    26d0:	4770      	bx	lr
    26d2:	bf00      	nop

000026d4 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    26d4:	4040      	eors	r0, r0
	msr BASEPRI, r0
    26d6:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE) && \
	!defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    26da:	f8df c01c 	ldr.w	ip, [pc, #28]	; 26f8 <__bus_fault+0x24>
	ldr ip, [ip]
    26de:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    26e2:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    26e6:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    26e8:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    26ec:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    26f0:	b501      	push	{r0, lr}
	bl _Fault
    26f2:	f000 f95d 	bl	29b0 <_Fault>

	pop {r0, pc}
    26f6:	bd01      	pop	{r0, pc}
	ldr ip, =_SCS_ICSR
    26f8:	e000ed04 	.word	0xe000ed04

000026fc <z_arm_fatal_error>:
	z_fatal_print("Faulting instruction address (r15/pc): 0x%08x",
		      esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    26fc:	b538      	push	{r3, r4, r5, lr}
    26fe:	4605      	mov	r5, r0

	if (esf != NULL) {
    2700:	460c      	mov	r4, r1
    2702:	b199      	cbz	r1, 272c <z_arm_fatal_error+0x30>
	z_fatal_print("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2704:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    2708:	480b      	ldr	r0, [pc, #44]	; (2738 <z_arm_fatal_error+0x3c>)
    270a:	6809      	ldr	r1, [r1, #0]
    270c:	f001 fb28 	bl	3d60 <z_fatal_print>
	z_fatal_print("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2710:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    2714:	68e1      	ldr	r1, [r4, #12]
    2716:	4809      	ldr	r0, [pc, #36]	; (273c <z_arm_fatal_error+0x40>)
    2718:	f001 fb22 	bl	3d60 <z_fatal_print>
	z_fatal_print(" xpsr:  0x%08x", esf->basic.xpsr);
    271c:	69e1      	ldr	r1, [r4, #28]
    271e:	4808      	ldr	r0, [pc, #32]	; (2740 <z_arm_fatal_error+0x44>)
    2720:	f001 fb1e 	bl	3d60 <z_fatal_print>
	z_fatal_print("Faulting instruction address (r15/pc): 0x%08x",
    2724:	69a1      	ldr	r1, [r4, #24]
    2726:	4807      	ldr	r0, [pc, #28]	; (2744 <z_arm_fatal_error+0x48>)
    2728:	f001 fb1a 	bl	3d60 <z_fatal_print>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    272c:	4621      	mov	r1, r4
    272e:	4628      	mov	r0, r5
}
    2730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_fatal_error(reason, esf);
    2734:	f001 bb38 	b.w	3da8 <z_fatal_error>
    2738:	000079d7 	.word	0x000079d7
    273c:	00007a06 	.word	0x00007a06
    2740:	00007a35 	.word	0x00007a35
    2744:	00007a44 	.word	0x00007a44

00002748 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2748:	bf30      	wfi
    b z_SysNmiOnReset
    274a:	f7ff bffd 	b.w	2748 <z_SysNmiOnReset>
    274e:	bf00      	nop

00002750 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    2750:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2752:	4b08      	ldr	r3, [pc, #32]	; (2774 <_PrepC+0x24>)
    2754:	4a08      	ldr	r2, [pc, #32]	; (2778 <_PrepC+0x28>)
    2756:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    275a:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    275c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2760:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    2764:	f001 fb6e 	bl	3e44 <z_bss_zero>
	z_data_copy();
    2768:	f001 fb76 	bl	3e58 <z_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	z_IntLibInit();
    276c:	f000 f99e 	bl	2aac <z_IntLibInit>
	z_cstart();
    2770:	f001 fba4 	bl	3ebc <z_cstart>
    2774:	00000000 	.word	0x00000000
    2778:	e000ed00 	.word	0xe000ed00

0000277c <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {r0,lr}		/* r0, lr are now the first items on the stack */
    277c:	b501      	push	{r0, lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, z_sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    277e:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2780:	4a0b      	ldr	r2, [pc, #44]	; (27b0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2782:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    2784:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2786:	bf1e      	ittt	ne
	movne	r1, #0
    2788:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    278a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    278c:	f003 ff15 	blne	65ba <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2790:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    2792:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2796:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    279a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    279e:	4905      	ldr	r1, [pc, #20]	; (27b4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    27a0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    27a2:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    27a4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    27a6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
    27aa:	4803      	ldr	r0, [pc, #12]	; (27b8 <_isr_wrapper+0x3c>)
	bx r0
    27ac:	4700      	bx	r0
    27ae:	0000      	.short	0x0000
	ldr r2, =_kernel
    27b0:	200004b8 	.word	0x200004b8
	ldr r1, =_sw_isr_table
    27b4:	000069e8 	.word	0x000069e8
	ldr r0, =_IntExit
    27b8:	00002525 	.word	0x00002525

000027bc <__reset>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    27bc:	f002 fce7 	bl	518e <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    27c0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    27c2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    27c6:	4808      	ldr	r0, [pc, #32]	; (27e8 <__reset+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    27c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    27cc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    27ce:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    27d2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    27d6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    27d8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    27da:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    27de:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
    27e2:	f7ff ffb5 	bl	2750 <_PrepC>
    27e6:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    27e8:	200012a8 	.word	0x200012a8

000027ec <MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t MpuFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
    27ec:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    27ee:	4c1d      	ldr	r4, [pc, #116]	; (2864 <MpuFault.isra.2+0x78>)
static u32_t MpuFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
    27f0:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    27f2:	481d      	ldr	r0, [pc, #116]	; (2868 <MpuFault.isra.2+0x7c>)
static u32_t MpuFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
    27f4:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    27f6:	f001 fab3 	bl	3d60 <z_fatal_print>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    27fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    27fc:	06d1      	lsls	r1, r2, #27
    27fe:	d502      	bpl.n	2806 <MpuFault.isra.2+0x1a>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2800:	481a      	ldr	r0, [pc, #104]	; (286c <MpuFault.isra.2+0x80>)
    2802:	f001 faad 	bl	3d60 <z_fatal_print>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2806:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2808:	071a      	lsls	r2, r3, #28
    280a:	d502      	bpl.n	2812 <MpuFault.isra.2+0x26>
		PR_FAULT_INFO("  Unstacking error");
    280c:	4818      	ldr	r0, [pc, #96]	; (2870 <MpuFault.isra.2+0x84>)
    280e:	f001 faa7 	bl	3d60 <z_fatal_print>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2812:	4c14      	ldr	r4, [pc, #80]	; (2864 <MpuFault.isra.2+0x78>)
    2814:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2816:	079b      	lsls	r3, r3, #30
    2818:	d50e      	bpl.n	2838 <MpuFault.isra.2+0x4c>
		PR_FAULT_INFO("  Data Access Violation");
    281a:	4816      	ldr	r0, [pc, #88]	; (2874 <MpuFault.isra.2+0x88>)
    281c:	f001 faa0 	bl	3d60 <z_fatal_print>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    2820:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2822:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2824:	0618      	lsls	r0, r3, #24
    2826:	d507      	bpl.n	2838 <MpuFault.isra.2+0x4c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2828:	4813      	ldr	r0, [pc, #76]	; (2878 <MpuFault.isra.2+0x8c>)
    282a:	f001 fa99 	bl	3d60 <z_fatal_print>
			if (fromHardFault) {
    282e:	b11e      	cbz	r6, 2838 <MpuFault.isra.2+0x4c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2830:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2836:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2838:	4c0a      	ldr	r4, [pc, #40]	; (2864 <MpuFault.isra.2+0x78>)
    283a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    283c:	07d2      	lsls	r2, r2, #31
    283e:	d502      	bpl.n	2846 <MpuFault.isra.2+0x5a>
		PR_FAULT_INFO("  Instruction Access Violation");
    2840:	480e      	ldr	r0, [pc, #56]	; (287c <MpuFault.isra.2+0x90>)
    2842:	f001 fa8d 	bl	3d60 <z_fatal_print>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2846:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2848:	069b      	lsls	r3, r3, #26
    284a:	d502      	bpl.n	2852 <MpuFault.isra.2+0x66>
		PR_FAULT_INFO(
    284c:	480c      	ldr	r0, [pc, #48]	; (2880 <MpuFault.isra.2+0x94>)
    284e:	f001 fa87 	bl	3d60 <z_fatal_print>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    2852:	4b04      	ldr	r3, [pc, #16]	; (2864 <MpuFault.isra.2+0x78>)
    2854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2856:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    2858:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    285a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    285e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    2860:	7028      	strb	r0, [r5, #0]

	return reason;
}
    2862:	bd70      	pop	{r4, r5, r6, pc}
    2864:	e000ed00 	.word	0xe000ed00
    2868:	00007afa 	.word	0x00007afa
    286c:	00007b10 	.word	0x00007b10
    2870:	00007b43 	.word	0x00007b43
    2874:	00007b56 	.word	0x00007b56
    2878:	00007b6e 	.word	0x00007b6e
    287c:	00007b84 	.word	0x00007b84
    2880:	00007ba3 	.word	0x00007ba3

00002884 <BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int BusFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
    2884:	b570      	push	{r4, r5, r6, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2886:	4c1f      	ldr	r4, [pc, #124]	; (2904 <BusFault.isra.3+0x80>)
static int BusFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
    2888:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    288a:	481f      	ldr	r0, [pc, #124]	; (2908 <BusFault.isra.3+0x84>)
static int BusFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
    288c:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    288e:	f001 fa67 	bl	3d60 <z_fatal_print>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2892:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2894:	04d1      	lsls	r1, r2, #19
    2896:	d502      	bpl.n	289e <BusFault.isra.3+0x1a>
		PR_FAULT_INFO("  Stacking error");
    2898:	481c      	ldr	r0, [pc, #112]	; (290c <BusFault.isra.3+0x88>)
    289a:	f001 fa61 	bl	3d60 <z_fatal_print>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    289e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    28a0:	051a      	lsls	r2, r3, #20
    28a2:	d502      	bpl.n	28aa <BusFault.isra.3+0x26>
		PR_FAULT_INFO("  Unstacking error");
    28a4:	481a      	ldr	r0, [pc, #104]	; (2910 <BusFault.isra.3+0x8c>)
    28a6:	f001 fa5b 	bl	3d60 <z_fatal_print>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    28aa:	4c16      	ldr	r4, [pc, #88]	; (2904 <BusFault.isra.3+0x80>)
    28ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    28ae:	059b      	lsls	r3, r3, #22
    28b0:	d50e      	bpl.n	28d0 <BusFault.isra.3+0x4c>
		PR_FAULT_INFO("  Precise data bus error");
    28b2:	4818      	ldr	r0, [pc, #96]	; (2914 <BusFault.isra.3+0x90>)
    28b4:	f001 fa54 	bl	3d60 <z_fatal_print>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    28b8:	6ba1      	ldr	r1, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    28ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    28bc:	0418      	lsls	r0, r3, #16
    28be:	d507      	bpl.n	28d0 <BusFault.isra.3+0x4c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    28c0:	4815      	ldr	r0, [pc, #84]	; (2918 <BusFault.isra.3+0x94>)
    28c2:	f001 fa4d 	bl	3d60 <z_fatal_print>
			if (fromHardFault) {
    28c6:	b11e      	cbz	r6, 28d0 <BusFault.isra.3+0x4c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    28c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    28ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    28ce:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    28d0:	4c0c      	ldr	r4, [pc, #48]	; (2904 <BusFault.isra.3+0x80>)
    28d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    28d4:	0559      	lsls	r1, r3, #21
    28d6:	d502      	bpl.n	28de <BusFault.isra.3+0x5a>
		PR_FAULT_INFO("  Imprecise data bus error");
    28d8:	4810      	ldr	r0, [pc, #64]	; (291c <BusFault.isra.3+0x98>)
    28da:	f001 fa41 	bl	3d60 <z_fatal_print>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    28de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    28e0:	05da      	lsls	r2, r3, #23
    28e2:	d50a      	bpl.n	28fa <BusFault.isra.3+0x76>
		PR_FAULT_INFO("  Instruction bus error");
    28e4:	480e      	ldr	r0, [pc, #56]	; (2920 <BusFault.isra.3+0x9c>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    28e6:	f001 fa3b 	bl	3d60 <z_fatal_print>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    28ea:	4a06      	ldr	r2, [pc, #24]	; (2904 <BusFault.isra.3+0x80>)
    28ec:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    28ee:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    28f0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    28f4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    28f6:	7028      	strb	r0, [r5, #0]

	return reason;
}
    28f8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    28fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    28fc:	049b      	lsls	r3, r3, #18
    28fe:	d5f4      	bpl.n	28ea <BusFault.isra.3+0x66>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2900:	4808      	ldr	r0, [pc, #32]	; (2924 <BusFault.isra.3+0xa0>)
    2902:	e7f0      	b.n	28e6 <BusFault.isra.3+0x62>
    2904:	e000ed00 	.word	0xe000ed00
    2908:	00007a72 	.word	0x00007a72
    290c:	00007a88 	.word	0x00007a88
    2910:	00007b43 	.word	0x00007b43
    2914:	00007a99 	.word	0x00007a99
    2918:	00007ab2 	.word	0x00007ab2
    291c:	00007ac7 	.word	0x00007ac7
    2920:	00007ae2 	.word	0x00007ae2
    2924:	00007ba3 	.word	0x00007ba3

00002928 <UsageFault.isra.4>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t UsageFault(const z_arch_esf_t *esf)
    2928:	b510      	push	{r4, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    292a:	4c19      	ldr	r4, [pc, #100]	; (2990 <UsageFault.isra.4+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    292c:	4819      	ldr	r0, [pc, #100]	; (2994 <UsageFault.isra.4+0x6c>)
    292e:	f001 fa17 	bl	3d60 <z_fatal_print>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2932:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2934:	0193      	lsls	r3, r2, #6
    2936:	d502      	bpl.n	293e <UsageFault.isra.4+0x16>
		PR_FAULT_INFO("  Division by zero");
    2938:	4817      	ldr	r0, [pc, #92]	; (2998 <UsageFault.isra.4+0x70>)
    293a:	f001 fa11 	bl	3d60 <z_fatal_print>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    293e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2940:	01dc      	lsls	r4, r3, #7
    2942:	d502      	bpl.n	294a <UsageFault.isra.4+0x22>
		PR_FAULT_INFO("  Unaligned memory access");
    2944:	4815      	ldr	r0, [pc, #84]	; (299c <UsageFault.isra.4+0x74>)
    2946:	f001 fa0b 	bl	3d60 <z_fatal_print>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    294a:	4c11      	ldr	r4, [pc, #68]	; (2990 <UsageFault.isra.4+0x68>)
    294c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    294e:	0310      	lsls	r0, r2, #12
    2950:	d502      	bpl.n	2958 <UsageFault.isra.4+0x30>
		PR_FAULT_INFO("  No coprocessor instructions");
    2952:	4813      	ldr	r0, [pc, #76]	; (29a0 <UsageFault.isra.4+0x78>)
    2954:	f001 fa04 	bl	3d60 <z_fatal_print>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2958:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    295a:	0359      	lsls	r1, r3, #13
    295c:	d502      	bpl.n	2964 <UsageFault.isra.4+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    295e:	4811      	ldr	r0, [pc, #68]	; (29a4 <UsageFault.isra.4+0x7c>)
    2960:	f001 f9fe 	bl	3d60 <z_fatal_print>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2964:	4c0a      	ldr	r4, [pc, #40]	; (2990 <UsageFault.isra.4+0x68>)
    2966:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2968:	0392      	lsls	r2, r2, #14
    296a:	d502      	bpl.n	2972 <UsageFault.isra.4+0x4a>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    296c:	480e      	ldr	r0, [pc, #56]	; (29a8 <UsageFault.isra.4+0x80>)
    296e:	f001 f9f7 	bl	3d60 <z_fatal_print>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2972:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2974:	03db      	lsls	r3, r3, #15
    2976:	d502      	bpl.n	297e <UsageFault.isra.4+0x56>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2978:	480c      	ldr	r0, [pc, #48]	; (29ac <UsageFault.isra.4+0x84>)
    297a:	f001 f9f1 	bl	3d60 <z_fatal_print>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    297e:	4a04      	ldr	r2, [pc, #16]	; (2990 <UsageFault.isra.4+0x68>)
    2980:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2982:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2986:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    298a:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    298c:	2000      	movs	r0, #0
    298e:	bd10      	pop	{r4, pc}
    2990:	e000ed00 	.word	0xe000ed00
    2994:	00007bd2 	.word	0x00007bd2
    2998:	00007bea 	.word	0x00007bea
    299c:	00007bfd 	.word	0x00007bfd
    29a0:	00007c17 	.word	0x00007c17
    29a4:	00007c35 	.word	0x00007c35
    29a8:	00007c5a 	.word	0x00007c5a
    29ac:	00007c74 	.word	0x00007c74

000029b0 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(z_arch_esf_t *esf, u32_t exc_return)
{
    29b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    29b2:	4d2f      	ldr	r5, [pc, #188]	; (2a70 <_Fault+0xc0>)
    29b4:	6869      	ldr	r1, [r5, #4]
    29b6:	f3c1 0208 	ubfx	r2, r1, #0, #9
	*recoverable = false;
    29ba:	2300      	movs	r3, #0
{
    29bc:	4606      	mov	r6, r0
	switch (fault) {
    29be:	1ed0      	subs	r0, r2, #3
	*recoverable = false;
    29c0:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    29c4:	461c      	mov	r4, r3
    29c6:	2809      	cmp	r0, #9
    29c8:	d846      	bhi.n	2a58 <_Fault+0xa8>
    29ca:	e8df f000 	tbb	[pc, r0]
    29ce:	3b05      	.short	0x3b05
    29d0:	45452f3f 	.word	0x45452f3f
    29d4:	43454545 	.word	0x43454545
	PR_FAULT_INFO("***** HARD FAULT *****");
    29d8:	4826      	ldr	r0, [pc, #152]	; (2a74 <_Fault+0xc4>)
    29da:	f001 f9c1 	bl	3d60 <z_fatal_print>
	*recoverable = false;
    29de:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    29e2:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    29e4:	f014 0402 	ands.w	r4, r4, #2
    29e8:	d004      	beq.n	29f4 <_Fault+0x44>
		PR_EXC("  Bus fault on vector table read");
    29ea:	4823      	ldr	r0, [pc, #140]	; (2a78 <_Fault+0xc8>)
	PR_FAULT_INFO(
    29ec:	f001 f9b8 	bl	3d60 <z_fatal_print>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    29f0:	2400      	movs	r4, #0
    29f2:	e01e      	b.n	2a32 <_Fault+0x82>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    29f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    29f6:	005b      	lsls	r3, r3, #1
    29f8:	d51b      	bpl.n	2a32 <_Fault+0x82>
		PR_EXC("  Fault escalation (see below)");
    29fa:	4820      	ldr	r0, [pc, #128]	; (2a7c <_Fault+0xcc>)
    29fc:	f001 f9b0 	bl	3d60 <z_fatal_print>
		if (SCB_MMFSR != 0) {
    2a00:	4b1f      	ldr	r3, [pc, #124]	; (2a80 <_Fault+0xd0>)
    2a02:	781b      	ldrb	r3, [r3, #0]
    2a04:	b12b      	cbz	r3, 2a12 <_Fault+0x62>
			reason = MpuFault(esf, 1, recoverable);
    2a06:	f10d 0107 	add.w	r1, sp, #7
    2a0a:	2001      	movs	r0, #1
		reason = MpuFault(esf, 0, recoverable);
    2a0c:	f7ff feee 	bl	27ec <MpuFault.isra.2>
    2a10:	e00e      	b.n	2a30 <_Fault+0x80>
		} else if (SCB_BFSR != 0) {
    2a12:	4b1c      	ldr	r3, [pc, #112]	; (2a84 <_Fault+0xd4>)
    2a14:	781b      	ldrb	r3, [r3, #0]
    2a16:	b12b      	cbz	r3, 2a24 <_Fault+0x74>
			reason = BusFault(esf, 1, recoverable);
    2a18:	f10d 0107 	add.w	r1, sp, #7
    2a1c:	2001      	movs	r0, #1
		reason = BusFault(esf, 0, recoverable);
    2a1e:	f7ff ff31 	bl	2884 <BusFault.isra.3>
    2a22:	e005      	b.n	2a30 <_Fault+0x80>
		} else if (SCB_UFSR != 0) {
    2a24:	4b18      	ldr	r3, [pc, #96]	; (2a88 <_Fault+0xd8>)
    2a26:	881b      	ldrh	r3, [r3, #0]
    2a28:	b29b      	uxth	r3, r3
    2a2a:	b113      	cbz	r3, 2a32 <_Fault+0x82>
			reason = UsageFault(esf);
    2a2c:	f7ff ff7c 	bl	2928 <UsageFault.isra.4>
    2a30:	4604      	mov	r4, r0
#else
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = FaultHandle(esf, fault, &recoverable);
	if (recoverable) {
    2a32:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2a36:	b91b      	cbnz	r3, 2a40 <_Fault+0x90>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_arm_fatal_error(reason, esf);
    2a38:	4631      	mov	r1, r6
    2a3a:	4620      	mov	r0, r4
    2a3c:	f7ff fe5e 	bl	26fc <z_arm_fatal_error>
}
    2a40:	b002      	add	sp, #8
    2a42:	bd70      	pop	{r4, r5, r6, pc}
		reason = MpuFault(esf, 0, recoverable);
    2a44:	f10d 0107 	add.w	r1, sp, #7
    2a48:	2000      	movs	r0, #0
    2a4a:	e7df      	b.n	2a0c <_Fault+0x5c>
		reason = BusFault(esf, 0, recoverable);
    2a4c:	f10d 0107 	add.w	r1, sp, #7
    2a50:	2000      	movs	r0, #0
    2a52:	e7e4      	b.n	2a1e <_Fault+0x6e>
	PR_FAULT_INFO(
    2a54:	480d      	ldr	r0, [pc, #52]	; (2a8c <_Fault+0xdc>)
    2a56:	e7c9      	b.n	29ec <_Fault+0x3c>
	PR_FAULT_INFO("***** %s %d) *****",
    2a58:	4b0d      	ldr	r3, [pc, #52]	; (2a90 <_Fault+0xe0>)
    2a5a:	480e      	ldr	r0, [pc, #56]	; (2a94 <_Fault+0xe4>)
    2a5c:	f411 7ff8 	tst.w	r1, #496	; 0x1f0
    2a60:	f1a2 0210 	sub.w	r2, r2, #16
    2a64:	490c      	ldr	r1, [pc, #48]	; (2a98 <_Fault+0xe8>)
    2a66:	bf18      	it	ne
    2a68:	4619      	movne	r1, r3
    2a6a:	f001 f979 	bl	3d60 <z_fatal_print>
    2a6e:	e7bf      	b.n	29f0 <_Fault+0x40>
    2a70:	e000ed00 	.word	0xe000ed00
    2a74:	00007ccd 	.word	0x00007ccd
    2a78:	00007ce4 	.word	0x00007ce4
    2a7c:	00007d05 	.word	0x00007d05
    2a80:	e000ed28 	.word	0xe000ed28
    2a84:	e000ed29 	.word	0xe000ed29
    2a88:	e000ed2a 	.word	0xe000ed2a
    2a8c:	00007d24 	.word	0x00007d24
    2a90:	00007cb4 	.word	0x00007cb4
    2a94:	00007d5a 	.word	0x00007d5a
    2a98:	00007c9f 	.word	0x00007c9f

00002a9c <z_FaultInit>:
 */
void z_FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2a9c:	4a02      	ldr	r2, [pc, #8]	; (2aa8 <z_FaultInit+0xc>)
    2a9e:	6953      	ldr	r3, [r2, #20]
    2aa0:	f043 0310 	orr.w	r3, r3, #16
    2aa4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2aa6:	4770      	bx	lr
    2aa8:	e000ed00 	.word	0xe000ed00

00002aac <z_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2aac:	4804      	ldr	r0, [pc, #16]	; (2ac0 <z_IntLibInit+0x14>)
 * @return N/A
 */

void z_IntLibInit(void)
{
	int irq = 0;
    2aae:	2300      	movs	r3, #0
    2ab0:	2120      	movs	r1, #32
    2ab2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2ab4:	3301      	adds	r3, #1
    2ab6:	2b27      	cmp	r3, #39	; 0x27
    2ab8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2abc:	d1f9      	bne.n	2ab2 <z_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2abe:	4770      	bx	lr
    2ac0:	e000e100 	.word	0xe000e100

00002ac4 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    2ac4:	b538      	push	{r3, r4, r5, lr}
    2ac6:	4605      	mov	r5, r0
	__asm__ volatile(
    2ac8:	f04f 0320 	mov.w	r3, #32
    2acc:	f3ef 8411 	mrs	r4, BASEPRI
    2ad0:	f383 8811 	msr	BASEPRI, r3
    2ad4:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    2ad8:	f003 fe7c 	bl	67d4 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    2adc:	4b0a      	ldr	r3, [pc, #40]	; (2b08 <z_impl_k_thread_abort+0x44>)
    2ade:	689b      	ldr	r3, [r3, #8]
    2ae0:	42ab      	cmp	r3, r5
    2ae2:	d10b      	bne.n	2afc <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    2ae4:	4b09      	ldr	r3, [pc, #36]	; (2b0c <z_impl_k_thread_abort+0x48>)
    2ae6:	685a      	ldr	r2, [r3, #4]
    2ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
    2aec:	b912      	cbnz	r2, 2af4 <z_impl_k_thread_abort+0x30>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
    2aee:	4620      	mov	r0, r4
    2af0:	f7ff fd26 	bl	2540 <__swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2af4:	685a      	ldr	r2, [r3, #4]
    2af6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2afa:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    2afc:	4620      	mov	r0, r4
}
    2afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    2b02:	f003 bd9c 	b.w	663e <z_reschedule_irqlock>
    2b06:	bf00      	nop
    2b08:	200004b8 	.word	0x200004b8
    2b0c:	e000ed00 	.word	0xe000ed00

00002b10 <z_arch_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_static_mpu_regions(void)
{
    2b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    2b12:	4b08      	ldr	r3, [pc, #32]	; (2b34 <z_arch_configure_static_mpu_regions+0x24>)
    2b14:	9301      	str	r3, [sp, #4]
    2b16:	4b08      	ldr	r3, [pc, #32]	; (2b38 <z_arch_configure_static_mpu_regions+0x28>)
    2b18:	9302      	str	r3, [sp, #8]
    2b1a:	4b08      	ldr	r3, [pc, #32]	; (2b3c <z_arch_configure_static_mpu_regions+0x2c>)
    2b1c:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    2b1e:	ab01      	add	r3, sp, #4
    2b20:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2b22:	4a07      	ldr	r2, [pc, #28]	; (2b40 <z_arch_configure_static_mpu_regions+0x30>)
    2b24:	4b07      	ldr	r3, [pc, #28]	; (2b44 <z_arch_configure_static_mpu_regions+0x34>)
    2b26:	2101      	movs	r1, #1
    2b28:	4668      	mov	r0, sp
    2b2a:	f000 f891 	bl	2c50 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    2b2e:	b005      	add	sp, #20
    2b30:	f85d fb04 	ldr.w	pc, [sp], #4
    2b34:	20000000 	.word	0x20000000
    2b38:	00000000 	.word	0x00000000
    2b3c:	060b0000 	.word	0x060b0000
    2b40:	20000000 	.word	0x20000000
    2b44:	20010000 	.word	0x20010000

00002b48 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    2b48:	b5f0      	push	{r4, r5, r6, r7, lr}
	MPU->RNR = index;
    2b4a:	4f20      	ldr	r7, [pc, #128]	; (2bcc <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2b4c:	2600      	movs	r6, #0
    2b4e:	428e      	cmp	r6, r1
    2b50:	db01      	blt.n	2b56 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2b52:	4610      	mov	r0, r2
    2b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
    2b56:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
    2b5a:	f8dc 4004 	ldr.w	r4, [ip, #4]
    2b5e:	b394      	cbz	r4, 2bc6 <mpu_configure_regions+0x7e>
		if (do_sanity_check &&
    2b60:	b15b      	cbz	r3, 2b7a <mpu_configure_regions+0x32>
		((part->size & (part->size - 1)) == 0U)
    2b62:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
    2b66:	ea14 0f0e 	tst.w	r4, lr
    2b6a:	d11a      	bne.n	2ba2 <mpu_configure_regions+0x5a>
		&&
    2b6c:	2c1f      	cmp	r4, #31
    2b6e:	d918      	bls.n	2ba2 <mpu_configure_regions+0x5a>
		((part->start & (part->size - 1)) == 0U);
    2b70:	f8dc 5000 	ldr.w	r5, [ip]
		&&
    2b74:	ea1e 0f05 	tst.w	lr, r5
    2b78:	d113      	bne.n	2ba2 <mpu_configure_regions+0x5a>
	if (size <= 32U) {
    2b7a:	2c20      	cmp	r4, #32
	struct arm_mpu_region region_conf;

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
    2b7c:	f8dc 5000 	ldr.w	r5, [ip]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    2b80:	f8dc c008 	ldr.w	ip, [ip, #8]
		reg_index = mpu_configure_region(reg_index, regions[i]);
    2b84:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    2b86:	d90f      	bls.n	2ba8 <mpu_configure_regions+0x60>
	if (size > (1UL << 31)) {
    2b88:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2b8c:	d80e      	bhi.n	2bac <mpu_configure_regions+0x64>
	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2b8e:	3c01      	subs	r4, #1
    2b90:	fab4 f484 	clz	r4, r4
    2b94:	f1c4 041f 	rsb	r4, r4, #31
    2b98:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    2b9a:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2b9c:	ea4c 0404 	orr.w	r4, ip, r4
    2ba0:	d906      	bls.n	2bb0 <mpu_configure_regions+0x68>
			return -EINVAL;
    2ba2:	f06f 0215 	mvn.w	r2, #21
    2ba6:	e7d4      	b.n	2b52 <mpu_configure_regions+0xa>
		return REGION_32B;
    2ba8:	2408      	movs	r4, #8
    2baa:	e7f6      	b.n	2b9a <mpu_configure_regions+0x52>
		return REGION_4G;
    2bac:	243e      	movs	r4, #62	; 0x3e
    2bae:	e7f4      	b.n	2b9a <mpu_configure_regions+0x52>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2bb0:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    2bb4:	4315      	orrs	r5, r2
    2bb6:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2bba:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    2bbe:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2bc0:	60fd      	str	r5, [r7, #12]
		reg_index++;
    2bc2:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2bc4:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    2bc6:	3601      	adds	r6, #1
    2bc8:	e7c1      	b.n	2b4e <mpu_configure_regions+0x6>
    2bca:	bf00      	nop
    2bcc:	e000ed90 	.word	0xe000ed90

00002bd0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2bd0:	4b03      	ldr	r3, [pc, #12]	; (2be0 <arm_core_mpu_enable+0x10>)
    2bd2:	2205      	movs	r2, #5
    2bd4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2bd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2bda:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2bde:	4770      	bx	lr
    2be0:	e000ed90 	.word	0xe000ed90

00002be4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2be4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2be8:	4b01      	ldr	r3, [pc, #4]	; (2bf0 <arm_core_mpu_disable+0xc>)
    2bea:	2200      	movs	r2, #0
    2bec:	605a      	str	r2, [r3, #4]
}
    2bee:	4770      	bx	lr
    2bf0:	e000ed90 	.word	0xe000ed90

00002bf4 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2bf4:	4913      	ldr	r1, [pc, #76]	; (2c44 <arm_mpu_init+0x50>)
    2bf6:	6808      	ldr	r0, [r1, #0]
    2bf8:	2808      	cmp	r0, #8
{
    2bfa:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2bfc:	d81e      	bhi.n	2c3c <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2bfe:	f7ff fff1 	bl	2be4 <arm_core_mpu_disable>
	MPU->RNR = index;
    2c02:	4c11      	ldr	r4, [pc, #68]	; (2c48 <arm_mpu_init+0x54>)
    2c04:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2c06:	2200      	movs	r2, #0
    2c08:	4290      	cmp	r0, r2
    2c0a:	f101 010c 	add.w	r1, r1, #12
    2c0e:	d105      	bne.n	2c1c <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2c10:	4b0e      	ldr	r3, [pc, #56]	; (2c4c <arm_mpu_init+0x58>)
    2c12:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    2c14:	f7ff ffdc 	bl	2bd0 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    2c18:	2000      	movs	r0, #0
}
    2c1a:	bd10      	pop	{r4, pc}
    2c1c:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2c1e:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    2c22:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2c26:	4313      	orrs	r3, r2
    2c28:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2c2c:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2c32:	f043 0301 	orr.w	r3, r3, #1
    2c36:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2c38:	3201      	adds	r2, #1
    2c3a:	e7e5      	b.n	2c08 <arm_mpu_init+0x14>
		return -1;
    2c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2c40:	e7eb      	b.n	2c1a <arm_mpu_init+0x26>
    2c42:	bf00      	nop
    2c44:	00006bd8 	.word	0x00006bd8
    2c48:	e000ed90 	.word	0xe000ed90
    2c4c:	20000561 	.word	0x20000561

00002c50 <arm_core_mpu_configure_static_mpu_regions>:
{
    2c50:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2c52:	4c03      	ldr	r4, [pc, #12]	; (2c60 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2c54:	2301      	movs	r3, #1
    2c56:	7822      	ldrb	r2, [r4, #0]
    2c58:	f7ff ff76 	bl	2b48 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2c5c:	7020      	strb	r0, [r4, #0]
}
    2c5e:	bd10      	pop	{r4, pc}
    2c60:	20000561 	.word	0x20000561

00002c64 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    2c64:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2c66:	4a08      	ldr	r2, [pc, #32]	; (2c88 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    2c68:	2300      	movs	r3, #0
    2c6a:	7812      	ldrb	r2, [r2, #0]
    2c6c:	f7ff ff6c 	bl	2b48 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2c70:	f110 0f16 	cmn.w	r0, #22
    2c74:	d003      	beq.n	2c7e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    2c76:	4b05      	ldr	r3, [pc, #20]	; (2c8c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    2c78:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2c7a:	2807      	cmp	r0, #7
    2c7c:	dd00      	ble.n	2c80 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    2c7e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    2c80:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    2c82:	611a      	str	r2, [r3, #16]
    2c84:	3001      	adds	r0, #1
    2c86:	e7f8      	b.n	2c7a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    2c88:	20000561 	.word	0x20000561
    2c8c:	e000ed90 	.word	0xe000ed90

00002c90 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    2c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c94:	b09f      	sub	sp, #124	; 0x7c
    2c96:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    2c98:	2300      	movs	r3, #0
{
    2c9a:	9001      	str	r0, [sp, #4]
    2c9c:	9104      	str	r1, [sp, #16]
	count = 0;
    2c9e:	9300      	str	r3, [sp, #0]

	while ((c = *format++)) {
    2ca0:	4613      	mov	r3, r2
    2ca2:	f813 0b01 	ldrb.w	r0, [r3], #1
    2ca6:	9305      	str	r3, [sp, #20]
    2ca8:	b158      	cbz	r0, 2cc2 <z_prf+0x32>
		if (c != '%') {
    2caa:	2825      	cmp	r0, #37	; 0x25
    2cac:	f000 8085 	beq.w	2dba <z_prf+0x12a>
			PUTC(c);
    2cb0:	9904      	ldr	r1, [sp, #16]
    2cb2:	9b01      	ldr	r3, [sp, #4]
    2cb4:	4798      	blx	r3
    2cb6:	3001      	adds	r0, #1
    2cb8:	f040 840d 	bne.w	34d6 <z_prf+0x846>
    2cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2cc0:	9300      	str	r3, [sp, #0]
		}
	}
	return count;

#undef PUTC
}
    2cc2:	9800      	ldr	r0, [sp, #0]
    2cc4:	b01f      	add	sp, #124	; 0x7c
    2cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    2cca:	2c23      	cmp	r4, #35	; 0x23
    2ccc:	d06c      	beq.n	2da8 <z_prf+0x118>
    2cce:	d861      	bhi.n	2d94 <z_prf+0x104>
    2cd0:	2c00      	cmp	r4, #0
    2cd2:	d0f6      	beq.n	2cc2 <z_prf+0x32>
					fspace = true;
    2cd4:	2c20      	cmp	r4, #32
    2cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2cd8:	bf08      	it	eq
    2cda:	2301      	moveq	r3, #1
    2cdc:	930a      	str	r3, [sp, #40]	; 0x28
					fminus = true;
    2cde:	f8cd 8014 	str.w	r8, [sp, #20]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    2ce2:	f8dd 8014 	ldr.w	r8, [sp, #20]
    2ce6:	48b9      	ldr	r0, [pc, #740]	; (2fcc <z_prf+0x33c>)
    2ce8:	f818 4b01 	ldrb.w	r4, [r8], #1
    2cec:	4621      	mov	r1, r4
    2cee:	f003 f9e7 	bl	60c0 <strchr>
    2cf2:	2800      	cmp	r0, #0
    2cf4:	d1e9      	bne.n	2cca <z_prf+0x3a>
			if (c == '*') {
    2cf6:	2c2a      	cmp	r4, #42	; 0x2a
    2cf8:	d166      	bne.n	2dc8 <z_prf+0x138>
				width = va_arg(vargs, int);
    2cfa:	f856 3b04 	ldr.w	r3, [r6], #4
    2cfe:	9307      	str	r3, [sp, #28]
				if (width < 0) {
    2d00:	2b00      	cmp	r3, #0
					width = -width;
    2d02:	bfbf      	itttt	lt
    2d04:	425b      	neglt	r3, r3
    2d06:	9307      	strlt	r3, [sp, #28]
					fminus = true;
    2d08:	2301      	movlt	r3, #1
    2d0a:	930b      	strlt	r3, [sp, #44]	; 0x2c
				c = *format++;
    2d0c:	9b05      	ldr	r3, [sp, #20]
    2d0e:	f898 4000 	ldrb.w	r4, [r8]
    2d12:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    2d16:	2c2e      	cmp	r4, #46	; 0x2e
    2d18:	d17c      	bne.n	2e14 <z_prf+0x184>
				if (c == '*') {
    2d1a:	f898 3000 	ldrb.w	r3, [r8]
    2d1e:	2b2a      	cmp	r3, #42	; 0x2a
    2d20:	d175      	bne.n	2e0e <z_prf+0x17e>
					precision = va_arg(vargs, int);
    2d22:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
    2d26:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    2d2a:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
    2d2e:	48a8      	ldr	r0, [pc, #672]	; (2fd0 <z_prf+0x340>)
    2d30:	4621      	mov	r1, r4
    2d32:	4627      	mov	r7, r4
    2d34:	f003 f9c4 	bl	60c0 <strchr>
    2d38:	2800      	cmp	r0, #0
    2d3a:	d06e      	beq.n	2e1a <z_prf+0x18a>
				c = *format++;
    2d3c:	4643      	mov	r3, r8
				} else if (i == 'h' && c == 'h') {
    2d3e:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    2d40:	f813 4b01 	ldrb.w	r4, [r3], #1
    2d44:	9305      	str	r3, [sp, #20]
				} else if (i == 'h' && c == 'h') {
    2d46:	d107      	bne.n	2d58 <z_prf+0xc8>
    2d48:	2c68      	cmp	r4, #104	; 0x68
    2d4a:	d105      	bne.n	2d58 <z_prf+0xc8>
					c = *format++;
    2d4c:	f108 0302 	add.w	r3, r8, #2
    2d50:	f898 4001 	ldrb.w	r4, [r8, #1]
    2d54:	9305      	str	r3, [sp, #20]
					i = 'H';
    2d56:	2748      	movs	r7, #72	; 0x48
			switch (c) {
    2d58:	2c67      	cmp	r4, #103	; 0x67
    2d5a:	d87c      	bhi.n	2e56 <z_prf+0x1c6>
    2d5c:	2c65      	cmp	r4, #101	; 0x65
    2d5e:	f080 8139 	bcs.w	2fd4 <z_prf+0x344>
    2d62:	2c47      	cmp	r4, #71	; 0x47
    2d64:	d85d      	bhi.n	2e22 <z_prf+0x192>
    2d66:	2c45      	cmp	r4, #69	; 0x45
    2d68:	f080 8134 	bcs.w	2fd4 <z_prf+0x344>
    2d6c:	2c00      	cmp	r4, #0
    2d6e:	d0a8      	beq.n	2cc2 <z_prf+0x32>
    2d70:	2c25      	cmp	r4, #37	; 0x25
    2d72:	f000 83ac 	beq.w	34ce <z_prf+0x83e>
				PUTC('%');
    2d76:	9904      	ldr	r1, [sp, #16]
    2d78:	9b01      	ldr	r3, [sp, #4]
    2d7a:	2025      	movs	r0, #37	; 0x25
    2d7c:	4798      	blx	r3
    2d7e:	3001      	adds	r0, #1
    2d80:	d09c      	beq.n	2cbc <z_prf+0x2c>
				PUTC(c);
    2d82:	9904      	ldr	r1, [sp, #16]
    2d84:	9b01      	ldr	r3, [sp, #4]
    2d86:	4620      	mov	r0, r4
    2d88:	4798      	blx	r3
    2d8a:	3001      	adds	r0, #1
    2d8c:	d096      	beq.n	2cbc <z_prf+0x2c>
				count += 2;
    2d8e:	9b00      	ldr	r3, [sp, #0]
    2d90:	3302      	adds	r3, #2
    2d92:	e3a2      	b.n	34da <z_prf+0x84a>
				switch (c) {
    2d94:	2c2d      	cmp	r4, #45	; 0x2d
    2d96:	d00a      	beq.n	2dae <z_prf+0x11e>
    2d98:	2c30      	cmp	r4, #48	; 0x30
    2d9a:	d00b      	beq.n	2db4 <z_prf+0x124>
					fplus = true;
    2d9c:	2c2b      	cmp	r4, #43	; 0x2b
    2d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2da0:	bf08      	it	eq
    2da2:	2301      	moveq	r3, #1
    2da4:	9309      	str	r3, [sp, #36]	; 0x24
    2da6:	e79a      	b.n	2cde <z_prf+0x4e>
					falt = true;
    2da8:	2301      	movs	r3, #1
    2daa:	9306      	str	r3, [sp, #24]
    2dac:	e797      	b.n	2cde <z_prf+0x4e>
					fminus = true;
    2dae:	2301      	movs	r3, #1
    2db0:	930b      	str	r3, [sp, #44]	; 0x2c
    2db2:	e794      	b.n	2cde <z_prf+0x4e>
					fzero = true;
    2db4:	2301      	movs	r3, #1
    2db6:	9308      	str	r3, [sp, #32]
    2db8:	e791      	b.n	2cde <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
    2dba:	2300      	movs	r3, #0
    2dbc:	9308      	str	r3, [sp, #32]
    2dbe:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    2dc2:	930b      	str	r3, [sp, #44]	; 0x2c
    2dc4:	9306      	str	r3, [sp, #24]
    2dc6:	e78c      	b.n	2ce2 <z_prf+0x52>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    2dc8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    2dcc:	2b09      	cmp	r3, #9
				width = 0;
    2dce:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
    2dd0:	d8a1      	bhi.n	2d16 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    2dd2:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    2dd4:	f8dd 8014 	ldr.w	r8, [sp, #20]
    2dd8:	f818 4b01 	ldrb.w	r4, [r8], #1
    2ddc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    2de0:	2b09      	cmp	r3, #9
    2de2:	d898      	bhi.n	2d16 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    2de4:	9b07      	ldr	r3, [sp, #28]
    2de6:	f8cd 8014 	str.w	r8, [sp, #20]
    2dea:	fb02 4403 	mla	r4, r2, r3, r4
    2dee:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    2df2:	9307      	str	r3, [sp, #28]
    2df4:	e7ee      	b.n	2dd4 <z_prf+0x144>
    2df6:	fb01 3505 	mla	r5, r1, r5, r3
    2dfa:	3d30      	subs	r5, #48	; 0x30
    2dfc:	4690      	mov	r8, r2
	while (isdigit(*p)) {
    2dfe:	4642      	mov	r2, r8
    2e00:	f812 3b01 	ldrb.w	r3, [r2], #1
    2e04:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    2e08:	2809      	cmp	r0, #9
    2e0a:	d9f4      	bls.n	2df6 <z_prf+0x166>
    2e0c:	e78d      	b.n	2d2a <z_prf+0x9a>
	int i = 0;
    2e0e:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    2e10:	210a      	movs	r1, #10
    2e12:	e7f4      	b.n	2dfe <z_prf+0x16e>
			precision = -1;
    2e14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    2e18:	e789      	b.n	2d2e <z_prf+0x9e>
    2e1a:	f8cd 8014 	str.w	r8, [sp, #20]
			i = 0;
    2e1e:	4607      	mov	r7, r0
    2e20:	e79a      	b.n	2d58 <z_prf+0xc8>
			switch (c) {
    2e22:	2c63      	cmp	r4, #99	; 0x63
    2e24:	d05a      	beq.n	2edc <z_prf+0x24c>
    2e26:	d820      	bhi.n	2e6a <z_prf+0x1da>
    2e28:	2c58      	cmp	r4, #88	; 0x58
    2e2a:	d1a4      	bne.n	2d76 <z_prf+0xe6>
				if (c == 'o') {
    2e2c:	2c6f      	cmp	r4, #111	; 0x6f
    2e2e:	f106 0904 	add.w	r9, r6, #4
    2e32:	6831      	ldr	r1, [r6, #0]
    2e34:	f040 831c 	bne.w	3470 <z_prf+0x7e0>
	if (alt_form) {
    2e38:	9b06      	ldr	r3, [sp, #24]
    2e3a:	2b00      	cmp	r3, #0
    2e3c:	f000 830a 	beq.w	3454 <z_prf+0x7c4>
		*buf++ = '0';
    2e40:	2330      	movs	r3, #48	; 0x30
    2e42:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		if (!value) {
    2e46:	2900      	cmp	r1, #0
    2e48:	f040 830f 	bne.w	346a <z_prf+0x7da>
			*buf++ = 0;
    2e4c:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
			prefix = 0;
    2e50:	4688      	mov	r8, r1
			return 1;
    2e52:	2601      	movs	r6, #1
    2e54:	e026      	b.n	2ea4 <z_prf+0x214>
			switch (c) {
    2e56:	2c70      	cmp	r4, #112	; 0x70
    2e58:	f000 82e7 	beq.w	342a <z_prf+0x79a>
    2e5c:	d828      	bhi.n	2eb0 <z_prf+0x220>
    2e5e:	2c6e      	cmp	r4, #110	; 0x6e
    2e60:	f000 82d0 	beq.w	3404 <z_prf+0x774>
    2e64:	d8e2      	bhi.n	2e2c <z_prf+0x19c>
    2e66:	2c69      	cmp	r4, #105	; 0x69
    2e68:	d185      	bne.n	2d76 <z_prf+0xe6>
				switch (i) {
    2e6a:	6834      	ldr	r4, [r6, #0]
	if (value < 0) {
    2e6c:	2c00      	cmp	r4, #0
    2e6e:	f106 0904 	add.w	r9, r6, #4
    2e72:	f280 809c 	bge.w	2fae <z_prf+0x31e>
		*buf++ = '-';
    2e76:	232d      	movs	r3, #45	; 0x2d
    2e78:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		value = -value;
    2e7c:	4261      	negs	r1, r4
		*buf++ = ' ';
    2e7e:	f10d 065d 	add.w	r6, sp, #93	; 0x5d
	return _to_x(buf, value, 10);
    2e82:	4630      	mov	r0, r6
    2e84:	220a      	movs	r2, #10
    2e86:	f003 f9be 	bl	6206 <_to_x>
				if (fplus || fspace || val < 0) {
    2e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
    2e8c:	4406      	add	r6, r0
    2e8e:	a817      	add	r0, sp, #92	; 0x5c
    2e90:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    2e92:	2b00      	cmp	r3, #0
    2e94:	f040 8324 	bne.w	34e0 <z_prf+0x850>
    2e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	f040 8320 	bne.w	34e0 <z_prf+0x850>
    2ea0:	ea4f 78d4 	mov.w	r8, r4, lsr #31
			if (precision >= 0) {
    2ea4:	2d00      	cmp	r5, #0
    2ea6:	da22      	bge.n	2eee <z_prf+0x25e>
			zero.predot = zero.postdot = zero.trail = 0;
    2ea8:	2500      	movs	r5, #0
    2eaa:	462f      	mov	r7, r5
    2eac:	46aa      	mov	sl, r5
    2eae:	e0e5      	b.n	307c <z_prf+0x3ec>
			switch (c) {
    2eb0:	2c75      	cmp	r4, #117	; 0x75
    2eb2:	d0bb      	beq.n	2e2c <z_prf+0x19c>
    2eb4:	2c78      	cmp	r4, #120	; 0x78
    2eb6:	d0b9      	beq.n	2e2c <z_prf+0x19c>
    2eb8:	2c73      	cmp	r4, #115	; 0x73
    2eba:	f47f af5c 	bne.w	2d76 <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
    2ebe:	46b1      	mov	r9, r6
					precision = INT_MAX;
    2ec0:	2d00      	cmp	r5, #0
				cptr = va_arg(vargs, char *);
    2ec2:	f859 3b04 	ldr.w	r3, [r9], #4
					precision = INT_MAX;
    2ec6:	bfb8      	it	lt
    2ec8:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    2ecc:	2600      	movs	r6, #0
    2ece:	42b5      	cmp	r5, r6
    2ed0:	f040 82bb 	bne.w	344a <z_prf+0x7ba>
    2ed4:	462e      	mov	r6, r5
    2ed6:	2500      	movs	r5, #0
    2ed8:	46a8      	mov	r8, r5
    2eda:	e009      	b.n	2ef0 <z_prf+0x260>
				buf[0] = va_arg(vargs, int);
    2edc:	46b1      	mov	r9, r6
				break;
    2ede:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
    2ee2:	f859 3b04 	ldr.w	r3, [r9], #4
    2ee6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
				clen = 1;
    2eea:	2601      	movs	r6, #1
				break;
    2eec:	4645      	mov	r5, r8
    2eee:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = precision - clen + prefix;
    2ef0:	eb05 0208 	add.w	r2, r5, r8
			zero.predot = zero.postdot = zero.trail = 0;
    2ef4:	2500      	movs	r5, #0
				zero_head = precision - clen + prefix;
    2ef6:	1b92      	subs	r2, r2, r6
			zero.predot = zero.postdot = zero.trail = 0;
    2ef8:	462f      	mov	r7, r5
    2efa:	46aa      	mov	sl, r5
			if (zero_head < 0) {
    2efc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
    2f00:	1991      	adds	r1, r2, r6
    2f02:	9106      	str	r1, [sp, #24]
    2f04:	9907      	ldr	r1, [sp, #28]
    2f06:	1990      	adds	r0, r2, r6
    2f08:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
    2f0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2f0c:	b911      	cbnz	r1, 2f14 <z_prf+0x284>
    2f0e:	2c00      	cmp	r4, #0
    2f10:	f300 8304 	bgt.w	351c <z_prf+0x88c>
			while (prefix-- > 0) {
    2f14:	eb03 0b08 	add.w	fp, r3, r8
    2f18:	455b      	cmp	r3, fp
    2f1a:	f040 8301 	bne.w	3520 <z_prf+0x890>
			while (zero_head-- > 0) {
    2f1e:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    2f22:	f080 830d 	bcs.w	3540 <z_prf+0x8b0>
			clen -= prefix;
    2f26:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
    2f2a:	f1ba 0f00 	cmp.w	sl, #0
    2f2e:	d011      	beq.n	2f54 <z_prf+0x2c4>
				c = *cptr;
    2f30:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c)) {
    2f34:	eb0b 0806 	add.w	r8, fp, r6
    2f38:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    2f3c:	2b09      	cmp	r3, #9
    2f3e:	eba8 060b 	sub.w	r6, r8, fp
    2f42:	f240 8308 	bls.w	3556 <z_prf+0x8c6>
    2f46:	46d0      	mov	r8, sl
				while (zero.predot-- > 0) {
    2f48:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
    2f4c:	f080 830c 	bcs.w	3568 <z_prf+0x8d8>
				clen -= zero.predot;
    2f50:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.postdot) {
    2f54:	b1af      	cbz	r7, 2f82 <z_prf+0x2f2>
    2f56:	eb0b 0806 	add.w	r8, fp, r6
					c = *cptr++;
    2f5a:	f81b ab01 	ldrb.w	sl, [fp], #1
					PUTC(c);
    2f5e:	9904      	ldr	r1, [sp, #16]
    2f60:	9b01      	ldr	r3, [sp, #4]
    2f62:	4650      	mov	r0, sl
    2f64:	4798      	blx	r3
    2f66:	3001      	adds	r0, #1
    2f68:	f43f aea8 	beq.w	2cbc <z_prf+0x2c>
				} while (c != '.');
    2f6c:	f1ba 0f2e 	cmp.w	sl, #46	; 0x2e
    2f70:	eba8 060b 	sub.w	r6, r8, fp
    2f74:	d1f1      	bne.n	2f5a <z_prf+0x2ca>
				while (zero.postdot-- > 0) {
    2f76:	46b8      	mov	r8, r7
    2f78:	f1b8 0f00 	cmp.w	r8, #0
    2f7c:	f300 82fd 	bgt.w	357a <z_prf+0x8ea>
				clen -= zero.postdot;
    2f80:	1bf6      	subs	r6, r6, r7
			if (zero.trail) {
    2f82:	b195      	cbz	r5, 2faa <z_prf+0x31a>
				c = *cptr;
    2f84:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c) || c == '.') {
    2f88:	eb0b 0806 	add.w	r8, fp, r6
    2f8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    2f90:	2b09      	cmp	r3, #9
    2f92:	eba8 060b 	sub.w	r6, r8, fp
    2f96:	f240 82fb 	bls.w	3590 <z_prf+0x900>
    2f9a:	282e      	cmp	r0, #46	; 0x2e
    2f9c:	f000 82f8 	beq.w	3590 <z_prf+0x900>
				while (zero.trail-- > 0) {
    2fa0:	462f      	mov	r7, r5
    2fa2:	2f00      	cmp	r7, #0
    2fa4:	f300 82fd 	bgt.w	35a2 <z_prf+0x912>
				clen -= zero.trail;
    2fa8:	1b76      	subs	r6, r6, r5
    2faa:	445e      	add	r6, fp
    2fac:	e30c      	b.n	35c8 <z_prf+0x938>
	} else if (fplus) {
    2fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2fb0:	b123      	cbz	r3, 2fbc <z_prf+0x32c>
		*buf++ = '+';
    2fb2:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    2fb4:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    2fb8:	4621      	mov	r1, r4
    2fba:	e760      	b.n	2e7e <z_prf+0x1ee>
	} else if (fspace) {
    2fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2fbe:	b10b      	cbz	r3, 2fc4 <z_prf+0x334>
		*buf++ = ' ';
    2fc0:	2320      	movs	r3, #32
    2fc2:	e7f7      	b.n	2fb4 <z_prf+0x324>
	} else if (fspace) {
    2fc4:	4621      	mov	r1, r4
    2fc6:	ae17      	add	r6, sp, #92	; 0x5c
    2fc8:	e75b      	b.n	2e82 <z_prf+0x1f2>
    2fca:	bf00      	nop
    2fcc:	00007d6d 	.word	0x00007d6d
    2fd0:	00007d73 	.word	0x00007d73
				u.d = va_arg(vargs, double);
    2fd4:	f106 0907 	add.w	r9, r6, #7
    2fd8:	f029 0907 	bic.w	r9, r9, #7
    2fdc:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    2fe0:	02d8      	lsls	r0, r3, #11
    2fe2:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    2fe6:	02d6      	lsls	r6, r2, #11
    2fe8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    2fec:	9602      	str	r6, [sp, #8]
    2fee:	9003      	str	r0, [sp, #12]
    2ff0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
	if (sign) {
    2ff4:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
    2ff6:	f3c3 510a 	ubfx	r1, r3, #20, #11
	if (sign) {
    2ffa:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    2ffe:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
	if (sign) {
    3002:	da43      	bge.n	308c <z_prf+0x3fc>
		*buf++ = '-';
    3004:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    3006:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    300a:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
	if (exp == 0x7ff) {
    300e:	f240 73ff 	movw	r3, #2047	; 0x7ff
    3012:	4299      	cmp	r1, r3
    3014:	d155      	bne.n	30c2 <z_prf+0x432>
		if (!fract) {
    3016:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    301a:	4313      	orrs	r3, r2
    301c:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    3020:	f107 0b03 	add.w	fp, r7, #3
    3024:	d142      	bne.n	30ac <z_prf+0x41c>
			if (isupper(c)) {
    3026:	2c19      	cmp	r4, #25
    3028:	d83a      	bhi.n	30a0 <z_prf+0x410>
				*buf++ = 'I';
    302a:	2349      	movs	r3, #73	; 0x49
    302c:	703b      	strb	r3, [r7, #0]
				*buf++ = 'N';
    302e:	234e      	movs	r3, #78	; 0x4e
    3030:	707b      	strb	r3, [r7, #1]
				*buf++ = 'F';
    3032:	2346      	movs	r3, #70	; 0x46
		*buf = 0;
    3034:	2500      	movs	r5, #0
		return buf - start;
    3036:	ae17      	add	r6, sp, #92	; 0x5c
				*buf++ = 'n';
    3038:	70bb      	strb	r3, [r7, #2]
		*buf = 0;
    303a:	70fd      	strb	r5, [r7, #3]
		return buf - start;
    303c:	ebab 0b06 	sub.w	fp, fp, r6
			zero.predot = zero.postdot = zero.trail = 0;
    3040:	462f      	mov	r7, r5
    3042:	46aa      	mov	sl, r5
				if (fplus || fspace || (buf[0] == '-')) {
    3044:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3046:	2b00      	cmp	r3, #0
    3048:	f040 81d9 	bne.w	33fe <z_prf+0x76e>
    304c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    304e:	2b00      	cmp	r3, #0
    3050:	f040 81d5 	bne.w	33fe <z_prf+0x76e>
    3054:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    3058:	f1a8 032d 	sub.w	r3, r8, #45	; 0x2d
    305c:	f1d3 0800 	rsbs	r8, r3, #0
    3060:	eb48 0803 	adc.w	r8, r8, r3
				if (!isdigit(buf[prefix])) {
    3064:	ab1e      	add	r3, sp, #120	; 0x78
    3066:	4443      	add	r3, r8
				clen += zero.predot + zero.postdot + zero.trail;
    3068:	44bb      	add	fp, r7
    306a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    306e:	3b30      	subs	r3, #48	; 0x30
    3070:	eb0b 060a 	add.w	r6, fp, sl
				if (!isdigit(buf[prefix])) {
    3074:	2b09      	cmp	r3, #9
				clen += zero.predot + zero.postdot + zero.trail;
    3076:	442e      	add	r6, r5
				if (!isdigit(buf[prefix])) {
    3078:	f200 8237 	bhi.w	34ea <z_prf+0x85a>
			} else if (fzero) {
    307c:	9b08      	ldr	r3, [sp, #32]
    307e:	2b00      	cmp	r3, #0
    3080:	f000 8236 	beq.w	34f0 <z_prf+0x860>
    3084:	9b07      	ldr	r3, [sp, #28]
    3086:	1b9a      	subs	r2, r3, r6
    3088:	ab17      	add	r3, sp, #92	; 0x5c
    308a:	e737      	b.n	2efc <z_prf+0x26c>
	} else if (fplus) {
    308c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    308e:	b10b      	cbz	r3, 3094 <z_prf+0x404>
		*buf++ = '+';
    3090:	232b      	movs	r3, #43	; 0x2b
    3092:	e7b8      	b.n	3006 <z_prf+0x376>
	} else if (fspace) {
    3094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3096:	b10b      	cbz	r3, 309c <z_prf+0x40c>
		*buf++ = ' ';
    3098:	2320      	movs	r3, #32
    309a:	e7b4      	b.n	3006 <z_prf+0x376>
	} else if (fspace) {
    309c:	af17      	add	r7, sp, #92	; 0x5c
    309e:	e7b6      	b.n	300e <z_prf+0x37e>
				*buf++ = 'i';
    30a0:	2369      	movs	r3, #105	; 0x69
    30a2:	703b      	strb	r3, [r7, #0]
				*buf++ = 'n';
    30a4:	236e      	movs	r3, #110	; 0x6e
    30a6:	707b      	strb	r3, [r7, #1]
				*buf++ = 'f';
    30a8:	2366      	movs	r3, #102	; 0x66
    30aa:	e7c3      	b.n	3034 <z_prf+0x3a4>
			if (isupper(c)) {
    30ac:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    30ae:	bf99      	ittee	ls
    30b0:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    30b2:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    30b4:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    30b6:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    30b8:	bf94      	ite	ls
    30ba:	703b      	strbls	r3, [r7, #0]
				*buf++ = 'n';
    30bc:	703b      	strbhi	r3, [r7, #0]
				*buf++ = 'a';
    30be:	707a      	strb	r2, [r7, #1]
    30c0:	e7b8      	b.n	3034 <z_prf+0x3a4>
	if ((exp | fract) != 0) {
    30c2:	9b02      	ldr	r3, [sp, #8]
    30c4:	9803      	ldr	r0, [sp, #12]
    30c6:	430b      	orrs	r3, r1
    30c8:	930c      	str	r3, [sp, #48]	; 0x30
    30ca:	17cb      	asrs	r3, r1, #31
    30cc:	4303      	orrs	r3, r0
    30ce:	930d      	str	r3, [sp, #52]	; 0x34
    30d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
		c = 'f';
    30d4:	2c46      	cmp	r4, #70	; 0x46
    30d6:	bf08      	it	eq
    30d8:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    30da:	4313      	orrs	r3, r2
    30dc:	f000 80ff 	beq.w	32de <z_prf+0x64e>
		if (exp == 0) {
    30e0:	2900      	cmp	r1, #0
    30e2:	f000 809f 	beq.w	3224 <z_prf+0x594>
		fract |= HIGHBIT64;
    30e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    30e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    30ec:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    30f0:	9313      	str	r3, [sp, #76]	; 0x4c
    30f2:	2600      	movs	r6, #0
	while (exp <= -3) {
    30f4:	f118 0f02 	cmn.w	r8, #2
    30f8:	f2c0 80a8 	blt.w	324c <z_prf+0x5bc>
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    30fc:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    3100:	f04f 0b00 	mov.w	fp, #0
	while (exp > 0) {
    3104:	f1b8 0f00 	cmp.w	r8, #0
    3108:	f300 80cc 	bgt.w	32a4 <z_prf+0x614>
		_rlrshift(&fract);
    310c:	a812      	add	r0, sp, #72	; 0x48
		exp++;
    310e:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    3112:	f003 f89a 	bl	624a <_rlrshift>
	while (exp < (0 + 4)) {
    3116:	f1b8 0f04 	cmp.w	r8, #4
    311a:	d1f7      	bne.n	310c <z_prf+0x47c>
		precision = 6;		/* Default precision if none given */
    311c:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    311e:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    3122:	bfb8      	it	lt
    3124:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    3126:	2b47      	cmp	r3, #71	; 0x47
    3128:	f040 80e1 	bne.w	32ee <z_prf+0x65e>
		if (decexp < (-4 + 1) || decexp > precision) {
    312c:	1cf2      	adds	r2, r6, #3
    312e:	db02      	blt.n	3136 <z_prf+0x4a6>
    3130:	42ae      	cmp	r6, r5
    3132:	f340 80d7 	ble.w	32e4 <z_prf+0x654>
			c += 'e' - 'g';
    3136:	3c02      	subs	r4, #2
    3138:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
    313a:	2d00      	cmp	r5, #0
    313c:	f000 80dd 	beq.w	32fa <z_prf+0x66a>
		if (!falt && (precision > 0)) {
    3140:	9b06      	ldr	r3, [sp, #24]
				precision--;
    3142:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
    3144:	2b00      	cmp	r3, #0
    3146:	f040 80d8 	bne.w	32fa <z_prf+0x66a>
    314a:	2d00      	cmp	r5, #0
    314c:	bfd4      	ite	le
    314e:	f04f 0800 	movle.w	r8, #0
    3152:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
    3156:	2c66      	cmp	r4, #102	; 0x66
    3158:	f040 80d1 	bne.w	32fe <z_prf+0x66e>
		if (exp < 0) {
    315c:	eb16 0a05 	adds.w	sl, r6, r5
    3160:	f140 80d5 	bpl.w	330e <z_prf+0x67e>
	digit_count = 16;
    3164:	2310      	movs	r3, #16
    3166:	9311      	str	r3, [sp, #68]	; 0x44
    3168:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    316a:	f04f 0a00 	mov.w	sl, #0
	ltemp = 0x0800000000000000;
    316e:	2200      	movs	r2, #0
    3170:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    3174:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	while (exp--) {
    3178:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
    317c:	f080 80c9 	bcs.w	3312 <z_prf+0x682>
	fract += ltemp;
    3180:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3182:	9a14      	ldr	r2, [sp, #80]	; 0x50
    3184:	9915      	ldr	r1, [sp, #84]	; 0x54
    3186:	189b      	adds	r3, r3, r2
    3188:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    318a:	eb41 0202 	adc.w	r2, r1, r2
    318e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
	if ((fract >> 32) & 0xF0000000) {
    3192:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    3196:	930e      	str	r3, [sp, #56]	; 0x38
    3198:	2300      	movs	r3, #0
    319a:	930f      	str	r3, [sp, #60]	; 0x3c
    319c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    31a0:	4313      	orrs	r3, r2
    31a2:	d006      	beq.n	31b2 <z_prf+0x522>
		_ldiv5(&fract);
    31a4:	a812      	add	r0, sp, #72	; 0x48
    31a6:	f003 f862 	bl	626e <_ldiv5>
		_rlrshift(&fract);
    31aa:	a812      	add	r0, sp, #72	; 0x48
    31ac:	f003 f84d 	bl	624a <_rlrshift>
		decexp++;
    31b0:	3601      	adds	r6, #1
	if (c == 'f') {
    31b2:	2c66      	cmp	r4, #102	; 0x66
    31b4:	f040 80c7 	bne.w	3346 <z_prf+0x6b6>
		if (decexp > 0) {
    31b8:	2e00      	cmp	r6, #0
    31ba:	f340 80b1 	ble.w	3320 <z_prf+0x690>
			while (decexp > 0 && digit_count > 0) {
    31be:	9b11      	ldr	r3, [sp, #68]	; 0x44
    31c0:	2b00      	cmp	r3, #0
    31c2:	dd07      	ble.n	31d4 <z_prf+0x544>
				*buf++ = _get_digit(&fract, &digit_count);
    31c4:	a911      	add	r1, sp, #68	; 0x44
    31c6:	a812      	add	r0, sp, #72	; 0x48
    31c8:	f003 f87d 	bl	62c6 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    31cc:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    31ce:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    31d2:	d1f4      	bne.n	31be <z_prf+0x52e>
			zp->predot = decexp;
    31d4:	46b2      	mov	sl, r6
    31d6:	46bb      	mov	fp, r7
			decexp = 0;
    31d8:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    31da:	9b06      	ldr	r3, [sp, #24]
    31dc:	b913      	cbnz	r3, 31e4 <z_prf+0x554>
    31de:	2d00      	cmp	r5, #0
    31e0:	f340 80af 	ble.w	3342 <z_prf+0x6b2>
			*buf++ = '.';
    31e4:	232e      	movs	r3, #46	; 0x2e
    31e6:	f80b 3b01 	strb.w	r3, [fp], #1
		if (decexp < 0 && precision > 0) {
    31ea:	2e00      	cmp	r6, #0
    31ec:	f000 80a7 	beq.w	333e <z_prf+0x6ae>
    31f0:	2d00      	cmp	r5, #0
    31f2:	f340 80a6 	ble.w	3342 <z_prf+0x6b2>
			zp->postdot = -decexp;
    31f6:	4277      	negs	r7, r6
    31f8:	42af      	cmp	r7, r5
    31fa:	bfa8      	it	ge
    31fc:	462f      	movge	r7, r5
			precision -= zp->postdot;
    31fe:	1bed      	subs	r5, r5, r7
		while (precision > 0 && digit_count > 0) {
    3200:	2d00      	cmp	r5, #0
    3202:	dd03      	ble.n	320c <z_prf+0x57c>
    3204:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3206:	2b00      	cmp	r3, #0
    3208:	f300 8091 	bgt.w	332e <z_prf+0x69e>
	if (prune_zero) {
    320c:	f1b8 0f00 	cmp.w	r8, #0
    3210:	f040 80af 	bne.w	3372 <z_prf+0x6e2>
	*buf = 0;
    3214:	2300      	movs	r3, #0
	return buf - start;
    3216:	ae17      	add	r6, sp, #92	; 0x5c
	*buf = 0;
    3218:	f88b 3000 	strb.w	r3, [fp]
	return buf - start;
    321c:	ebab 0b06 	sub.w	fp, fp, r6
    3220:	e710      	b.n	3044 <z_prf+0x3b4>
				exp--;
    3222:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    3224:	9b02      	ldr	r3, [sp, #8]
    3226:	18db      	adds	r3, r3, r3
    3228:	9302      	str	r3, [sp, #8]
    322a:	9b03      	ldr	r3, [sp, #12]
    322c:	415b      	adcs	r3, r3
    322e:	9303      	str	r3, [sp, #12]
    3230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3234:	2a00      	cmp	r2, #0
    3236:	f173 0300 	sbcs.w	r3, r3, #0
    323a:	daf2      	bge.n	3222 <z_prf+0x592>
    323c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3240:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    3244:	e74f      	b.n	30e6 <z_prf+0x456>
			_rlrshift(&fract);
    3246:	a812      	add	r0, sp, #72	; 0x48
    3248:	f002 ffff 	bl	624a <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    324c:	e9dd 2c12 	ldrd	r2, ip, [sp, #72]	; 0x48
    3250:	f04f 0b00 	mov.w	fp, #0
    3254:	48b9      	ldr	r0, [pc, #740]	; (353c <z_prf+0x8ac>)
    3256:	2100      	movs	r1, #0
    3258:	4559      	cmp	r1, fp
    325a:	bf08      	it	eq
    325c:	4560      	cmpeq	r0, ip
    325e:	f108 0801 	add.w	r8, r8, #1
    3262:	d3f0      	bcc.n	3246 <z_prf+0x5b6>
		fract *= 5U;
    3264:	2005      	movs	r0, #5
    3266:	fba2 2300 	umull	r2, r3, r2, r0
    326a:	fb00 330c 	mla	r3, r0, ip, r3
    326e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		decexp--;
    3272:	46dc      	mov	ip, fp
    3274:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    3276:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    327a:	f04f 0b00 	mov.w	fp, #0
    327e:	2100      	movs	r1, #0
    3280:	458b      	cmp	fp, r1
    3282:	bf08      	it	eq
    3284:	459a      	cmpeq	sl, r3
    3286:	d206      	bcs.n	3296 <z_prf+0x606>
    3288:	f1bc 0f00 	cmp.w	ip, #0
    328c:	f43f af32 	beq.w	30f4 <z_prf+0x464>
    3290:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    3294:	e72e      	b.n	30f4 <z_prf+0x464>
			fract <<= 1;
    3296:	1892      	adds	r2, r2, r2
    3298:	415b      	adcs	r3, r3
			exp--;
    329a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    329e:	f04f 0c01 	mov.w	ip, #1
    32a2:	e7ec      	b.n	327e <z_prf+0x5ee>
		_ldiv5(&fract);
    32a4:	a812      	add	r0, sp, #72	; 0x48
    32a6:	f002 ffe2 	bl	626e <_ldiv5>
		exp--;
    32aa:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
    32ae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    32b2:	3601      	adds	r6, #1
    32b4:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    32b8:	2300      	movs	r3, #0
    32ba:	459b      	cmp	fp, r3
    32bc:	bf08      	it	eq
    32be:	4582      	cmpeq	sl, r0
    32c0:	d206      	bcs.n	32d0 <z_prf+0x640>
    32c2:	f1bc 0f00 	cmp.w	ip, #0
    32c6:	f43f af1d 	beq.w	3104 <z_prf+0x474>
    32ca:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    32ce:	e719      	b.n	3104 <z_prf+0x474>
			fract <<= 1;
    32d0:	1849      	adds	r1, r1, r1
    32d2:	4140      	adcs	r0, r0
			exp--;
    32d4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    32d8:	f04f 0c01 	mov.w	ip, #1
    32dc:	e7ec      	b.n	32b8 <z_prf+0x628>
	if ((exp | fract) != 0) {
    32de:	2600      	movs	r6, #0
    32e0:	46b0      	mov	r8, r6
    32e2:	e713      	b.n	310c <z_prf+0x47c>
		if (!falt && (precision > 0)) {
    32e4:	9b06      	ldr	r3, [sp, #24]
			precision -= decexp;
    32e6:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
    32e8:	b923      	cbnz	r3, 32f4 <z_prf+0x664>
			c = 'f';
    32ea:	2466      	movs	r4, #102	; 0x66
    32ec:	e72d      	b.n	314a <z_prf+0x4ba>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    32ee:	f04f 0800 	mov.w	r8, #0
    32f2:	e730      	b.n	3156 <z_prf+0x4c6>
    32f4:	f04f 0800 	mov.w	r8, #0
    32f8:	e730      	b.n	315c <z_prf+0x4cc>
    32fa:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
    32fe:	f105 0a01 	add.w	sl, r5, #1
	digit_count = 16;
    3302:	2310      	movs	r3, #16
    3304:	459a      	cmp	sl, r3
    3306:	9311      	str	r3, [sp, #68]	; 0x44
	if (exp > 16) {
    3308:	bfa8      	it	ge
    330a:	469a      	movge	sl, r3
    330c:	e72f      	b.n	316e <z_prf+0x4de>
		if (exp < 0) {
    330e:	2466      	movs	r4, #102	; 0x66
    3310:	e7f7      	b.n	3302 <z_prf+0x672>
		_ldiv5(&ltemp);
    3312:	a814      	add	r0, sp, #80	; 0x50
    3314:	f002 ffab 	bl	626e <_ldiv5>
		_rlrshift(&ltemp);
    3318:	a814      	add	r0, sp, #80	; 0x50
    331a:	f002 ff96 	bl	624a <_rlrshift>
    331e:	e72b      	b.n	3178 <z_prf+0x4e8>
			*buf++ = '0';
    3320:	46bb      	mov	fp, r7
    3322:	2330      	movs	r3, #48	; 0x30
    3324:	f80b 3b01 	strb.w	r3, [fp], #1
			zero.predot = zero.postdot = zero.trail = 0;
    3328:	f04f 0a00 	mov.w	sl, #0
    332c:	e755      	b.n	31da <z_prf+0x54a>
			*buf++ = _get_digit(&fract, &digit_count);
    332e:	a911      	add	r1, sp, #68	; 0x44
    3330:	a812      	add	r0, sp, #72	; 0x48
    3332:	f002 ffc8 	bl	62c6 <_get_digit>
			precision--;
    3336:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    3338:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
    333c:	e760      	b.n	3200 <z_prf+0x570>
			zero.predot = zero.postdot = zero.trail = 0;
    333e:	4637      	mov	r7, r6
    3340:	e75e      	b.n	3200 <z_prf+0x570>
    3342:	2700      	movs	r7, #0
    3344:	e762      	b.n	320c <z_prf+0x57c>
		*buf = _get_digit(&fract, &digit_count);
    3346:	a911      	add	r1, sp, #68	; 0x44
    3348:	a812      	add	r0, sp, #72	; 0x48
    334a:	f002 ffbc 	bl	62c6 <_get_digit>
		if (falt || (precision > 0)) {
    334e:	9b06      	ldr	r3, [sp, #24]
		*buf = _get_digit(&fract, &digit_count);
    3350:	7038      	strb	r0, [r7, #0]
		if (*buf++ != '0') {
    3352:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    3354:	bf18      	it	ne
    3356:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
    335a:	2b00      	cmp	r3, #0
    335c:	d13b      	bne.n	33d6 <z_prf+0x746>
    335e:	2d00      	cmp	r5, #0
    3360:	dc39      	bgt.n	33d6 <z_prf+0x746>
		if (*buf++ != '0') {
    3362:	f107 0b01 	add.w	fp, r7, #1
	if (prune_zero) {
    3366:	f1b8 0f00 	cmp.w	r8, #0
    336a:	d045      	beq.n	33f8 <z_prf+0x768>
			zero.predot = zero.postdot = zero.trail = 0;
    336c:	f04f 0a00 	mov.w	sl, #0
    3370:	4657      	mov	r7, sl
		while (*--buf == '0')
    3372:	465b      	mov	r3, fp
    3374:	f81b 2d01 	ldrb.w	r2, [fp, #-1]!
    3378:	2a30      	cmp	r2, #48	; 0x30
    337a:	d0fa      	beq.n	3372 <z_prf+0x6e2>
		if (*buf != '.') {
    337c:	2a2e      	cmp	r2, #46	; 0x2e
    337e:	bf18      	it	ne
    3380:	469b      	movne	fp, r3
    3382:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
    3384:	f004 03df 	and.w	r3, r4, #223	; 0xdf
    3388:	2b45      	cmp	r3, #69	; 0x45
    338a:	f47f af43 	bne.w	3214 <z_prf+0x584>
		if (decexp < 0) {
    338e:	2e00      	cmp	r6, #0
		*buf++ = c;
    3390:	465a      	mov	r2, fp
			decexp = -decexp;
    3392:	bfba      	itte	lt
    3394:	4276      	neglt	r6, r6
			*buf++ = '-';
    3396:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    3398:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    339a:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    339c:	f802 4b02 	strb.w	r4, [r2], #2
			*buf++ = '-';
    33a0:	f88b 3001 	strb.w	r3, [fp, #1]
		if (decexp >= 100) {
    33a4:	dd0a      	ble.n	33bc <z_prf+0x72c>
			*buf++ = (decexp / 100) + '0';
    33a6:	2164      	movs	r1, #100	; 0x64
    33a8:	fb96 f3f1 	sdiv	r3, r6, r1
    33ac:	f103 0030 	add.w	r0, r3, #48	; 0x30
    33b0:	f10b 0203 	add.w	r2, fp, #3
    33b4:	f88b 0002 	strb.w	r0, [fp, #2]
			decexp %= 100;
    33b8:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    33bc:	210a      	movs	r1, #10
    33be:	4693      	mov	fp, r2
    33c0:	fb96 f3f1 	sdiv	r3, r6, r1
		decexp %= 10;
    33c4:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    33c8:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = decexp + '0';
    33cc:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    33ce:	f80b 0b02 	strb.w	r0, [fp], #2
		*buf++ = decexp + '0';
    33d2:	7056      	strb	r6, [r2, #1]
    33d4:	e71e      	b.n	3214 <z_prf+0x584>
			*buf++ = '.';
    33d6:	232e      	movs	r3, #46	; 0x2e
    33d8:	f107 0b02 	add.w	fp, r7, #2
    33dc:	707b      	strb	r3, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    33de:	2d00      	cmp	r5, #0
    33e0:	ddc1      	ble.n	3366 <z_prf+0x6d6>
    33e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    33e4:	2b00      	cmp	r3, #0
    33e6:	ddbe      	ble.n	3366 <z_prf+0x6d6>
			*buf++ = _get_digit(&fract, &digit_count);
    33e8:	a911      	add	r1, sp, #68	; 0x44
    33ea:	a812      	add	r0, sp, #72	; 0x48
    33ec:	f002 ff6b 	bl	62c6 <_get_digit>
			precision--;
    33f0:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    33f2:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
    33f6:	e7f2      	b.n	33de <z_prf+0x74e>
			zero.predot = zero.postdot = zero.trail = 0;
    33f8:	46c2      	mov	sl, r8
    33fa:	4647      	mov	r7, r8
    33fc:	e7c2      	b.n	3384 <z_prf+0x6f4>
					prefix = 1;
    33fe:	f04f 0801 	mov.w	r8, #1
    3402:	e62f      	b.n	3064 <z_prf+0x3d4>
				switch (i) {
    3404:	46b1      	mov	r9, r6
    3406:	2f68      	cmp	r7, #104	; 0x68
    3408:	f859 3b04 	ldr.w	r3, [r9], #4
    340c:	d005      	beq.n	341a <z_prf+0x78a>
    340e:	dc01      	bgt.n	3414 <z_prf+0x784>
    3410:	2f48      	cmp	r7, #72	; 0x48
    3412:	d007      	beq.n	3424 <z_prf+0x794>
					*va_arg(vargs, int *) = count;
    3414:	9a00      	ldr	r2, [sp, #0]
    3416:	601a      	str	r2, [r3, #0]
					break;
    3418:	e001      	b.n	341e <z_prf+0x78e>
					*va_arg(vargs, short *) = count;
    341a:	9a00      	ldr	r2, [sp, #0]
    341c:	801a      	strh	r2, [r3, #0]
				continue;
    341e:	464e      	mov	r6, r9
    3420:	9a05      	ldr	r2, [sp, #20]
    3422:	e43d      	b.n	2ca0 <z_prf+0x10>
					*va_arg(vargs, char *) = count;
    3424:	9a00      	ldr	r2, [sp, #0]
    3426:	701a      	strb	r2, [r3, #0]
					break;
    3428:	e7f9      	b.n	341e <z_prf+0x78e>
				val = (uintptr_t) va_arg(vargs, void *);
    342a:	46b1      	mov	r9, r6
		*buf++ = '0';
    342c:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
    3430:	2210      	movs	r2, #16
    3432:	f859 1b04 	ldr.w	r1, [r9], #4
		*buf++ = '0';
    3436:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
	len = _to_x(buf, value, 16);
    343a:	f10d 005e 	add.w	r0, sp, #94	; 0x5e
    343e:	f002 fee2 	bl	6206 <_to_x>
				prefix = 2;
    3442:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
    3446:	1c86      	adds	r6, r0, #2
				break;
    3448:	e52c      	b.n	2ea4 <z_prf+0x214>
					if (cptr[clen] == '\0') {
    344a:	5d9a      	ldrb	r2, [r3, r6]
    344c:	2a00      	cmp	r2, #0
    344e:	d04a      	beq.n	34e6 <z_prf+0x856>
				for (clen = 0; clen < precision; clen++) {
    3450:	3601      	adds	r6, #1
    3452:	e53c      	b.n	2ece <z_prf+0x23e>
	if (alt_form) {
    3454:	ac17      	add	r4, sp, #92	; 0x5c
	return (buf - buf0) + _to_x(buf, value, 8);
    3456:	2208      	movs	r2, #8
    3458:	4620      	mov	r0, r4
    345a:	f002 fed4 	bl	6206 <_to_x>
    345e:	ae17      	add	r6, sp, #92	; 0x5c
    3460:	1ba6      	subs	r6, r4, r6
    3462:	4406      	add	r6, r0
			prefix = 0;
    3464:	f04f 0800 	mov.w	r8, #0
    3468:	e51c      	b.n	2ea4 <z_prf+0x214>
		*buf++ = '0';
    346a:	f10d 045d 	add.w	r4, sp, #93	; 0x5d
    346e:	e7f2      	b.n	3456 <z_prf+0x7c6>
				} else if (c == 'u') {
    3470:	2c75      	cmp	r4, #117	; 0x75
    3472:	d105      	bne.n	3480 <z_prf+0x7f0>
	return _to_x(buf, value, 10);
    3474:	220a      	movs	r2, #10
    3476:	a817      	add	r0, sp, #92	; 0x5c
    3478:	f002 fec5 	bl	6206 <_to_x>
    347c:	4606      	mov	r6, r0
    347e:	e7f1      	b.n	3464 <z_prf+0x7d4>
	if (alt_form) {
    3480:	9b06      	ldr	r3, [sp, #24]
    3482:	b193      	cbz	r3, 34aa <z_prf+0x81a>
		*buf++ = '0';
    3484:	f647 0330 	movw	r3, #30768	; 0x7830
    3488:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
		*buf++ = 'x';
    348c:	f10d 075e 	add.w	r7, sp, #94	; 0x5e
	len = _to_x(buf, value, 16);
    3490:	2210      	movs	r2, #16
    3492:	4638      	mov	r0, r7
    3494:	f002 feb7 	bl	6206 <_to_x>
	if (prefix == 'X') {
    3498:	2c58      	cmp	r4, #88	; 0x58
    349a:	d008      	beq.n	34ae <z_prf+0x81e>
	return len + (buf - buf0);
    349c:	ae17      	add	r6, sp, #92	; 0x5c
						prefix = 2;
    349e:	9b06      	ldr	r3, [sp, #24]
	return len + (buf - buf0);
    34a0:	1bbe      	subs	r6, r7, r6
    34a2:	4406      	add	r6, r0
						prefix = 2;
    34a4:	ea4f 0843 	mov.w	r8, r3, lsl #1
    34a8:	e4fc      	b.n	2ea4 <z_prf+0x214>
	if (alt_form) {
    34aa:	af17      	add	r7, sp, #92	; 0x5c
    34ac:	e7f0      	b.n	3490 <z_prf+0x800>
    34ae:	aa17      	add	r2, sp, #92	; 0x5c
		if (*buf >= 'a' && *buf <= 'z') {
    34b0:	f812 3b01 	ldrb.w	r3, [r2], #1
    34b4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    34b8:	2919      	cmp	r1, #25
    34ba:	d803      	bhi.n	34c4 <z_prf+0x834>
			*buf += 'A' - 'a';
    34bc:	3b20      	subs	r3, #32
    34be:	f802 3c01 	strb.w	r3, [r2, #-1]
    34c2:	e7f5      	b.n	34b0 <z_prf+0x820>
	} while (*buf++);
    34c4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    34c8:	2b00      	cmp	r3, #0
    34ca:	d1f1      	bne.n	34b0 <z_prf+0x820>
    34cc:	e7e6      	b.n	349c <z_prf+0x80c>
				PUTC('%');
    34ce:	9904      	ldr	r1, [sp, #16]
    34d0:	4620      	mov	r0, r4
    34d2:	f7ff bbee 	b.w	2cb2 <z_prf+0x22>
				count++;
    34d6:	9b00      	ldr	r3, [sp, #0]
    34d8:	3301      	adds	r3, #1
				count += 2;
    34da:	9300      	str	r3, [sp, #0]
				continue;
    34dc:	46b1      	mov	r9, r6
    34de:	e79e      	b.n	341e <z_prf+0x78e>
					prefix = 1;
    34e0:	f04f 0801 	mov.w	r8, #1
    34e4:	e4de      	b.n	2ea4 <z_prf+0x214>
    34e6:	4615      	mov	r5, r2
    34e8:	e4f6      	b.n	2ed8 <z_prf+0x248>
			cptr = buf;
    34ea:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = 0;
    34ec:	2200      	movs	r2, #0
    34ee:	e507      	b.n	2f00 <z_prf+0x270>
    34f0:	ab17      	add	r3, sp, #92	; 0x5c
    34f2:	9a08      	ldr	r2, [sp, #32]
    34f4:	e504      	b.n	2f00 <z_prf+0x270>
    34f6:	e9cd 3207 	strd	r3, r2, [sp, #28]
					PUTC(' ');
    34fa:	9904      	ldr	r1, [sp, #16]
    34fc:	9b01      	ldr	r3, [sp, #4]
    34fe:	2020      	movs	r0, #32
    3500:	4798      	blx	r3
    3502:	3001      	adds	r0, #1
    3504:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    3508:	f43f abd8 	beq.w	2cbc <z_prf+0x2c>
				while (width-- > 0) {
    350c:	f11b 3bff 	adds.w	fp, fp, #4294967295	; 0xffffffff
    3510:	d2f1      	bcs.n	34f6 <z_prf+0x866>
				count += width;
    3512:	9900      	ldr	r1, [sp, #0]
    3514:	4421      	add	r1, r4
    3516:	9100      	str	r1, [sp, #0]
				while (width-- > 0) {
    3518:	465c      	mov	r4, fp
    351a:	e4fb      	b.n	2f14 <z_prf+0x284>
    351c:	46a3      	mov	fp, r4
    351e:	e7f5      	b.n	350c <z_prf+0x87c>
				PUTC(*cptr++);
    3520:	f813 0b01 	ldrb.w	r0, [r3], #1
    3524:	9307      	str	r3, [sp, #28]
    3526:	9904      	ldr	r1, [sp, #16]
    3528:	9b01      	ldr	r3, [sp, #4]
    352a:	9208      	str	r2, [sp, #32]
    352c:	4798      	blx	r3
    352e:	3001      	adds	r0, #1
    3530:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    3534:	f47f acf0 	bne.w	2f18 <z_prf+0x288>
    3538:	f7ff bbc0 	b.w	2cbc <z_prf+0x2c>
    353c:	33333332 	.word	0x33333332
				PUTC('0');
    3540:	9904      	ldr	r1, [sp, #16]
    3542:	9b01      	ldr	r3, [sp, #4]
    3544:	9207      	str	r2, [sp, #28]
    3546:	2030      	movs	r0, #48	; 0x30
    3548:	4798      	blx	r3
    354a:	3001      	adds	r0, #1
    354c:	9a07      	ldr	r2, [sp, #28]
    354e:	f47f ace6 	bne.w	2f1e <z_prf+0x28e>
    3552:	f7ff bbb3 	b.w	2cbc <z_prf+0x2c>
					PUTC(c);
    3556:	9904      	ldr	r1, [sp, #16]
    3558:	9b01      	ldr	r3, [sp, #4]
    355a:	4798      	blx	r3
    355c:	3001      	adds	r0, #1
    355e:	f43f abad 	beq.w	2cbc <z_prf+0x2c>
					c = *++cptr;
    3562:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
    3566:	e4e7      	b.n	2f38 <z_prf+0x2a8>
					PUTC('0');
    3568:	9904      	ldr	r1, [sp, #16]
    356a:	9b01      	ldr	r3, [sp, #4]
    356c:	2030      	movs	r0, #48	; 0x30
    356e:	4798      	blx	r3
    3570:	3001      	adds	r0, #1
    3572:	f47f ace9 	bne.w	2f48 <z_prf+0x2b8>
    3576:	f7ff bba1 	b.w	2cbc <z_prf+0x2c>
					PUTC('0');
    357a:	9904      	ldr	r1, [sp, #16]
    357c:	9b01      	ldr	r3, [sp, #4]
    357e:	2030      	movs	r0, #48	; 0x30
    3580:	4798      	blx	r3
    3582:	3001      	adds	r0, #1
    3584:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3588:	f47f acf6 	bne.w	2f78 <z_prf+0x2e8>
    358c:	f7ff bb96 	b.w	2cbc <z_prf+0x2c>
					PUTC(c);
    3590:	9904      	ldr	r1, [sp, #16]
    3592:	9b01      	ldr	r3, [sp, #4]
    3594:	4798      	blx	r3
    3596:	3001      	adds	r0, #1
    3598:	f43f ab90 	beq.w	2cbc <z_prf+0x2c>
					c = *++cptr;
    359c:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
    35a0:	e4f4      	b.n	2f8c <z_prf+0x2fc>
					PUTC('0');
    35a2:	9904      	ldr	r1, [sp, #16]
    35a4:	9b01      	ldr	r3, [sp, #4]
    35a6:	2030      	movs	r0, #48	; 0x30
    35a8:	4798      	blx	r3
    35aa:	3001      	adds	r0, #1
    35ac:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    35b0:	f47f acf7 	bne.w	2fa2 <z_prf+0x312>
    35b4:	f7ff bb82 	b.w	2cbc <z_prf+0x2c>
				PUTC(*cptr++);
    35b8:	9904      	ldr	r1, [sp, #16]
    35ba:	f81b 0b01 	ldrb.w	r0, [fp], #1
    35be:	9b01      	ldr	r3, [sp, #4]
    35c0:	4798      	blx	r3
    35c2:	3001      	adds	r0, #1
    35c4:	f43f ab7a 	beq.w	2cbc <z_prf+0x2c>
    35c8:	eba6 030b 	sub.w	r3, r6, fp
			while (clen-- > 0) {
    35cc:	2b00      	cmp	r3, #0
    35ce:	dcf3      	bgt.n	35b8 <z_prf+0x928>
			count += clen;
    35d0:	9b00      	ldr	r3, [sp, #0]
    35d2:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
    35d4:	2c00      	cmp	r4, #0
			count += clen;
    35d6:	4413      	add	r3, r2
    35d8:	9300      	str	r3, [sp, #0]
			if (width > 0) {
    35da:	f77f af20 	ble.w	341e <z_prf+0x78e>
    35de:	4625      	mov	r5, r4
    35e0:	e006      	b.n	35f0 <z_prf+0x960>
					PUTC(' ');
    35e2:	9904      	ldr	r1, [sp, #16]
    35e4:	9b01      	ldr	r3, [sp, #4]
    35e6:	2020      	movs	r0, #32
    35e8:	4798      	blx	r3
    35ea:	3001      	adds	r0, #1
    35ec:	f43f ab66 	beq.w	2cbc <z_prf+0x2c>
				while (width-- > 0) {
    35f0:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    35f4:	d2f5      	bcs.n	35e2 <z_prf+0x952>
				count += width;
    35f6:	9b00      	ldr	r3, [sp, #0]
    35f8:	4423      	add	r3, r4
    35fa:	9300      	str	r3, [sp, #0]
    35fc:	e70f      	b.n	341e <z_prf+0x78e>
    35fe:	bf00      	nop

00003600 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3600:	4b01      	ldr	r3, [pc, #4]	; (3608 <__stdout_hook_install+0x8>)
    3602:	6018      	str	r0, [r3, #0]
}
    3604:	4770      	bx	lr
    3606:	bf00      	nop
    3608:	20001d24 	.word	0x20001d24

0000360c <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    360c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    360e:	4b09      	ldr	r3, [pc, #36]	; (3634 <gpio_nrfx_init+0x28>)
    3610:	781a      	ldrb	r2, [r3, #0]
    3612:	b96a      	cbnz	r2, 3630 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    3614:	2101      	movs	r1, #1
    3616:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    3618:	2006      	movs	r0, #6
    361a:	2105      	movs	r1, #5
    361c:	f7ff f80c 	bl	2638 <z_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    3620:	2006      	movs	r0, #6
    3622:	f7fe ffe5 	bl	25f0 <z_arch_irq_enable>
    return ((uint32_t)NRF_GPIOTE + event);
}

__STATIC_INLINE void nrf_gpiote_int_enable(uint32_t mask)
{
    NRF_GPIOTE->INTENSET = mask;
    3626:	4b04      	ldr	r3, [pc, #16]	; (3638 <gpio_nrfx_init+0x2c>)
    3628:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    362c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    3630:	2000      	movs	r0, #0
    3632:	bd08      	pop	{r3, pc}
    3634:	20000562 	.word	0x20000562
    3638:	40006000 	.word	0x40006000

0000363c <gpiote_event_handler>:
{
    363c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    3640:	4f4b      	ldr	r7, [pc, #300]	; (3770 <gpiote_event_handler+0x134>)
    3642:	683d      	ldr	r5, [r7, #0]
	if (port_event) {
    3644:	2d01      	cmp	r5, #1
    3646:	d166      	bne.n	3716 <gpiote_event_handler+0xda>
	struct gpio_nrfx_data *data = get_port_data(port);
    3648:	4a4a      	ldr	r2, [pc, #296]	; (3774 <gpiote_event_handler+0x138>)
    364a:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
    364c:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    364e:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
    3650:	f8d2 8008 	ldr.w	r8, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
    3654:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
    3658:	400a      	ands	r2, r1
	out &= ~data->trig_edge & ~data->double_edge;
    365a:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
    365e:	4301      	orrs	r1, r0
    3660:	ea22 0201 	bic.w	r2, r2, r1
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    3664:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    3668:	691b      	ldr	r3, [r3, #16]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    366a:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
    366e:	405c      	eors	r4, r3
    3670:	404c      	eors	r4, r1
	u32_t out = pin_states & level_pins;
    3672:	ea22 0404 	bic.w	r4, r2, r4
	u32_t bit = 1U << pin;
    3676:	462e      	mov	r6, r5
	u32_t pin = 0U;
    3678:	f04f 0900 	mov.w	r9, #0
	while (level_pins) {
    367c:	2a00      	cmp	r2, #0
    367e:	d139      	bne.n	36f4 <gpiote_event_handler+0xb8>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    3680:	603a      	str	r2, [r7, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    3682:	683b      	ldr	r3, [r7, #0]
    3684:	9300      	str	r3, [sp, #0]
    (void)dummy;
    3686:	9b00      	ldr	r3, [sp, #0]
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
    3688:	4e3b      	ldr	r6, [pc, #236]	; (3778 <gpiote_event_handler+0x13c>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
    368a:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
    368c:	2701      	movs	r7, #1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    368e:	469c      	mov	ip, r3
    return (NRF_GPIOTE->INTENSET & mask);
    3690:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
    3694:	fa07 f103 	lsl.w	r1, r7, r3
    3698:	4211      	tst	r1, r2
    369a:	d014      	beq.n	36c6 <gpiote_event_handler+0x8a>
    return ((uint32_t)NRF_GPIOTE + event);
    369c:	009a      	lsls	r2, r3, #2
    369e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    36a2:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    36a6:	6811      	ldr	r1, [r2, #0]
    36a8:	2901      	cmp	r1, #1
    36aa:	d10c      	bne.n	36c6 <gpiote_event_handler+0x8a>
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    36ac:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    36b0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    36b4:	f8c2 c000 	str.w	ip, [r2]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    36b8:	6812      	ldr	r2, [r2, #0]
    36ba:	9201      	str	r2, [sp, #4]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    36bc:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    36c0:	4081      	lsls	r1, r0
    (void)dummy;
    36c2:	9a01      	ldr	r2, [sp, #4]
    36c4:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    36c6:	3301      	adds	r3, #1
    36c8:	2b08      	cmp	r3, #8
    36ca:	d1e1      	bne.n	3690 <gpiote_event_handler+0x54>
	if (fired_triggers[0]) {
    36cc:	bb2c      	cbnz	r4, 371a <gpiote_event_handler+0xde>
	if (port_event) {
    36ce:	2d01      	cmp	r5, #1
    36d0:	d10d      	bne.n	36ee <gpiote_event_handler+0xb2>
	const struct gpio_nrfx_data *data = get_port_data(port);
    36d2:	4b28      	ldr	r3, [pc, #160]	; (3774 <gpiote_event_handler+0x138>)
    36d4:	689c      	ldr	r4, [r3, #8]
	return port->config->config_info;
    36d6:	681b      	ldr	r3, [r3, #0]
    36d8:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    36da:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    36de:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
    36e0:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
    36e4:	430b      	orrs	r3, r1
    36e6:	ea22 0203 	bic.w	r2, r2, r3
	u32_t pin = 0U;
    36ea:	2700      	movs	r7, #0
	while (level_pins) {
    36ec:	bb3a      	cbnz	r2, 373e <gpiote_event_handler+0x102>
}
    36ee:	b003      	add	sp, #12
    36f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
    36f4:	4232      	tst	r2, r6
    36f6:	d00a      	beq.n	370e <gpiote_event_handler+0xd2>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    36f8:	f898 3004 	ldrb.w	r3, [r8, #4]
    36fc:	f009 001f 	and.w	r0, r9, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    3700:	2100      	movs	r1, #0
    3702:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    3706:	f002 fdf8 	bl	62fa <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    370a:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
    370e:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    3712:	0076      	lsls	r6, r6, #1
    3714:	e7b2      	b.n	367c <gpiote_event_handler+0x40>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    3716:	2400      	movs	r4, #0
    3718:	e7b6      	b.n	3688 <gpiote_event_handler+0x4c>
	gpio_fire_callbacks(&get_port_data(port)->callbacks, port, pins);
    371a:	4f16      	ldr	r7, [pc, #88]	; (3774 <gpiote_event_handler+0x138>)
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    371c:	68bb      	ldr	r3, [r7, #8]
    371e:	6819      	ldr	r1, [r3, #0]
    3720:	2900      	cmp	r1, #0
    3722:	d0d4      	beq.n	36ce <gpiote_event_handler+0x92>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3724:	680e      	ldr	r6, [r1, #0]
		if (cb->pin_mask & pins) {
    3726:	688b      	ldr	r3, [r1, #8]
    3728:	421c      	tst	r4, r3
    372a:	d003      	beq.n	3734 <gpiote_event_handler+0xf8>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    372c:	684b      	ldr	r3, [r1, #4]
    372e:	4622      	mov	r2, r4
    3730:	4638      	mov	r0, r7
    3732:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3734:	2e00      	cmp	r6, #0
    3736:	d0ca      	beq.n	36ce <gpiote_event_handler+0x92>
    3738:	4631      	mov	r1, r6
    373a:	6836      	ldr	r6, [r6, #0]
    373c:	e7f3      	b.n	3726 <gpiote_event_handler+0xea>
		if (level_pins & bit) {
    373e:	4215      	tst	r5, r2
    3740:	d012      	beq.n	3768 <gpiote_event_handler+0x12c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    3742:	69e1      	ldr	r1, [r4, #28]
    3744:	6923      	ldr	r3, [r4, #16]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3746:	f896 c004 	ldrb.w	ip, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    374a:	404b      	eors	r3, r1
    374c:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
    374e:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3752:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    3756:	bf0c      	ite	eq
    3758:	2103      	moveq	r1, #3
    375a:	2102      	movne	r1, #2
    375c:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
    3760:	f002 fdcb 	bl	62fa <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    3764:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
    3768:	3701      	adds	r7, #1
		bit <<= 1;
    376a:	006d      	lsls	r5, r5, #1
    376c:	e7be      	b.n	36ec <gpiote_event_handler+0xb0>
    376e:	bf00      	nop
    3770:	4000617c 	.word	0x4000617c
    3774:	20001da4 	.word	0x20001da4
    3778:	40006000 	.word	0x40006000

0000377c <gpiote_pin_int_cfg>:
{
    377c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return port->config->config_info;
    377e:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
    3780:	6886      	ldr	r6, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3782:	689b      	ldr	r3, [r3, #8]
    3784:	f001 041f 	and.w	r4, r1, #31
{
    3788:	460d      	mov	r5, r1
    return (NRF_GPIOTE->INTENSET & mask);
    378a:	494e      	ldr	r1, [pc, #312]	; (38c4 <gpiote_pin_int_cfg+0x148>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    378c:	791b      	ldrb	r3, [r3, #4]
    378e:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    3792:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
    3796:	b2d2      	uxtb	r2, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3798:	2300      	movs	r3, #0
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    379a:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    379e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    37a2:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
    37a6:	4284      	cmp	r4, r0
    37a8:	d170      	bne.n	388c <gpiote_pin_int_cfg+0x110>
		    && (intenset & BIT(i))) {
    37aa:	fa22 f003 	lsr.w	r0, r2, r3
    37ae:	07c0      	lsls	r0, r0, #31
    37b0:	d56c      	bpl.n	388c <gpiote_pin_int_cfg+0x110>
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    37b2:	009a      	lsls	r2, r3, #2
    37b4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    37b8:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    37bc:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    37c0:	f020 0001 	bic.w	r0, r0, #1
    37c4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
    37c8:	2201      	movs	r2, #1
    37ca:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
    37ce:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    37d2:	4620      	mov	r0, r4
    37d4:	2100      	movs	r1, #0
    37d6:	f002 fd90 	bl	62fa <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    37da:	68b0      	ldr	r0, [r6, #8]
    37dc:	40e8      	lsrs	r0, r5
    37de:	f010 0001 	ands.w	r0, r0, #1
    37e2:	d051      	beq.n	3888 <gpiote_pin_int_cfg+0x10c>
    37e4:	68f0      	ldr	r0, [r6, #12]
    37e6:	40e8      	lsrs	r0, r5
    37e8:	f010 0001 	ands.w	r0, r0, #1
    37ec:	d04c      	beq.n	3888 <gpiote_pin_int_cfg+0x10c>
		if (data->trig_edge & BIT(pin)) {
    37ee:	6970      	ldr	r0, [r6, #20]
    37f0:	40e8      	lsrs	r0, r5
    37f2:	f010 0201 	ands.w	r2, r0, #1
    37f6:	d055      	beq.n	38a4 <gpiote_pin_int_cfg+0x128>
			if (data->double_edge & BIT(pin)) {
    37f8:	69b3      	ldr	r3, [r6, #24]
    37fa:	40eb      	lsrs	r3, r5
    37fc:	07db      	lsls	r3, r3, #31
    37fe:	d449      	bmi.n	3894 <gpiote_pin_int_cfg+0x118>
			} else if (((data->active_level & BIT(pin)) != 0U)
    3800:	6933      	ldr	r3, [r6, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    3802:	69f2      	ldr	r2, [r6, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    3804:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    3806:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
    380a:	f003 0301 	and.w	r3, r3, #1
    380e:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    3812:	42ab      	cmp	r3, r5
    3814:	bf14      	ite	ne
    3816:	2501      	movne	r5, #1
    3818:	2502      	moveq	r5, #2
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    381a:	4e2a      	ldr	r6, [pc, #168]	; (38c4 <gpiote_pin_int_cfg+0x148>)
    381c:	2100      	movs	r1, #0
    381e:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    3822:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
    3826:	f010 0003 	ands.w	r0, r0, #3
    382a:	d135      	bne.n	3898 <gpiote_pin_int_cfg+0x11c>
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    382c:	008b      	lsls	r3, r1, #2
    382e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3832:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3836:	0224      	lsls	r4, r4, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3838:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    383c:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
    3840:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    3844:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3848:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    384c:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    3850:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    3854:	4315      	orrs	r5, r2
			nrf_gpiote_events_t evt =
    3856:	f101 0240 	add.w	r2, r1, #64	; 0x40
    385a:	0092      	lsls	r2, r2, #2
    return ((uint32_t)NRF_GPIOTE + event);
    385c:	b292      	uxth	r2, r2
    385e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3862:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3866:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    386a:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    386c:	6812      	ldr	r2, [r2, #0]
    386e:	9201      	str	r2, [sp, #4]
    (void)dummy;
    3870:	9a01      	ldr	r2, [sp, #4]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3872:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3876:	f042 0201 	orr.w	r2, r2, #1
    387a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
    387e:	2301      	movs	r3, #1
    3880:	fa03 f101 	lsl.w	r1, r3, r1
    NRF_GPIOTE->INTENSET = mask;
    3884:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
    3888:	b002      	add	sp, #8
    388a:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    388c:	3301      	adds	r3, #1
    388e:	2b08      	cmp	r3, #8
    3890:	d183      	bne.n	379a <gpiote_pin_int_cfg+0x1e>
    3892:	e79e      	b.n	37d2 <gpiote_pin_int_cfg+0x56>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    3894:	2503      	movs	r5, #3
    3896:	e7c0      	b.n	381a <gpiote_pin_int_cfg+0x9e>
    3898:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    389a:	2908      	cmp	r1, #8
    389c:	d1bf      	bne.n	381e <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
    389e:	f06f 0012 	mvn.w	r0, #18
    38a2:	e7f1      	b.n	3888 <gpiote_pin_int_cfg+0x10c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    38a4:	69f1      	ldr	r1, [r6, #28]
    38a6:	6933      	ldr	r3, [r6, #16]
    38a8:	404b      	eors	r3, r1
    38aa:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    38ae:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    38b2:	4620      	mov	r0, r4
    38b4:	bf0c      	ite	eq
    38b6:	2103      	moveq	r1, #3
    38b8:	2102      	movne	r1, #2
    38ba:	f002 fd1e 	bl	62fa <nrf_gpio_cfg_sense_set>
	int res = 0;
    38be:	4610      	mov	r0, r2
    38c0:	e7e2      	b.n	3888 <gpiote_pin_int_cfg+0x10c>
    38c2:	bf00      	nop
    38c4:	40006000 	.word	0x40006000

000038c8 <event_txdrdy_check>:
#endif
}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    38c8:	4b05      	ldr	r3, [pc, #20]	; (38e0 <event_txdrdy_check+0x18>)
    38ca:	681b      	ldr	r3, [r3, #0]

static bool event_txdrdy_check(void)
{
	return (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_TXDRDY)
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
		|| uart_sw_event_txdrdy
    38cc:	b92b      	cbnz	r3, 38da <event_txdrdy_check+0x12>
    38ce:	4b05      	ldr	r3, [pc, #20]	; (38e4 <event_txdrdy_check+0x1c>)
    38d0:	7818      	ldrb	r0, [r3, #0]
    38d2:	3000      	adds	r0, #0
    38d4:	bf18      	it	ne
    38d6:	2001      	movne	r0, #1
    38d8:	4770      	bx	lr
    38da:	2001      	movs	r0, #1
#endif
	       );
}
    38dc:	4770      	bx	lr
    38de:	bf00      	nop
    38e0:	4000211c 	.word	0x4000211c
    38e4:	20000563 	.word	0x20000563

000038e8 <uart_nrfx_err_check>:
    38e8:	4b03      	ldr	r3, [pc, #12]	; (38f8 <uart_nrfx_err_check+0x10>)
    38ea:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0U;

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
    38ec:	b118      	cbz	r0, 38f6 <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    38ee:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
    38f2:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(uart0_addr);
	}

	return error;
}
    38f6:	4770      	bx	lr
    38f8:	40002124 	.word	0x40002124

000038fc <uart_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
    38fc:	4b02      	ldr	r3, [pc, #8]	; (3908 <uart_nrfx_irq_rx_enable+0xc>)
    38fe:	2204      	movs	r2, #4
    3900:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven receiver enabling function */
static void uart_nrfx_irq_rx_enable(struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
    3904:	4770      	bx	lr
    3906:	bf00      	nop
    3908:	40002000 	.word	0x40002000

0000390c <uart_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    390c:	4b02      	ldr	r3, [pc, #8]	; (3918 <uart_nrfx_irq_rx_disable+0xc>)
    390e:	2204      	movs	r2, #4
    3910:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven receiver disabling function */
static void uart_nrfx_irq_rx_disable(struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
    3914:	4770      	bx	lr
    3916:	bf00      	nop
    3918:	40002000 	.word	0x40002000

0000391c <uart_nrfx_irq_rx_ready>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    391c:	4b02      	ldr	r3, [pc, #8]	; (3928 <uart_nrfx_irq_rx_ready+0xc>)
    391e:	6818      	ldr	r0, [r3, #0]

/** Interrupt driven receiver ready function */
static int uart_nrfx_irq_rx_ready(struct device *dev)
{
	return nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY);
}
    3920:	3000      	adds	r0, #0
    3922:	bf18      	it	ne
    3924:	2001      	movne	r0, #1
    3926:	4770      	bx	lr
    3928:	40002108 	.word	0x40002108

0000392c <uart_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    392c:	4b02      	ldr	r3, [pc, #8]	; (3938 <uart_nrfx_irq_err_enable+0xc>)
    392e:	f44f 7200 	mov.w	r2, #512	; 0x200
    3932:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven error enabling function */
static void uart_nrfx_irq_err_enable(struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
    3936:	4770      	bx	lr
    3938:	40002000 	.word	0x40002000

0000393c <uart_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    393c:	4b02      	ldr	r3, [pc, #8]	; (3948 <uart_nrfx_irq_err_disable+0xc>)
    393e:	f44f 7200 	mov.w	r2, #512	; 0x200
    3942:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven error disabling function */
static void uart_nrfx_irq_err_disable(struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
    3946:	4770      	bx	lr
    3948:	40002000 	.word	0x40002000

0000394c <uart_nrfx_irq_callback_set>:
static void uart_nrfx_irq_callback_set(struct device *dev,
				       uart_irq_callback_user_data_t cb,
				       void *cb_data)
{
	(void)dev;
	irq_callback = cb;
    394c:	4b02      	ldr	r3, [pc, #8]	; (3958 <uart_nrfx_irq_callback_set+0xc>)
    394e:	6019      	str	r1, [r3, #0]
	irq_cb_data = cb_data;
    3950:	4b02      	ldr	r3, [pc, #8]	; (395c <uart_nrfx_irq_callback_set+0x10>)
    3952:	601a      	str	r2, [r3, #0]
}
    3954:	4770      	bx	lr
    3956:	bf00      	nop
    3958:	200003d8 	.word	0x200003d8
    395c:	200003dc 	.word	0x200003dc

00003960 <uart_nrfx_isr>:
 */
static void uart_nrfx_isr(void *arg)
{
	ARG_UNUSED(arg);

	if (irq_callback) {
    3960:	4b03      	ldr	r3, [pc, #12]	; (3970 <uart_nrfx_isr+0x10>)
    3962:	681b      	ldr	r3, [r3, #0]
    3964:	b113      	cbz	r3, 396c <uart_nrfx_isr+0xc>
		irq_callback(irq_cb_data);
    3966:	4a03      	ldr	r2, [pc, #12]	; (3974 <uart_nrfx_isr+0x14>)
    3968:	6810      	ldr	r0, [r2, #0]
    396a:	4718      	bx	r3
	}
}
    396c:	4770      	bx	lr
    396e:	bf00      	nop
    3970:	200003d8 	.word	0x200003d8
    3974:	200003dc 	.word	0x200003dc

00003978 <uart_nrfx_irq_tx_disable>:
    3978:	4b03      	ldr	r3, [pc, #12]	; (3988 <uart_nrfx_irq_tx_disable+0x10>)
    397a:	2280      	movs	r2, #128	; 0x80
    397c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->TXD = txd;
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3980:	2201      	movs	r2, #1
    3982:	60da      	str	r2, [r3, #12]
	device_busy_clear(dev);
    3984:	f002 be0c 	b.w	65a0 <device_busy_clear>
    3988:	40002000 	.word	0x40002000

0000398c <uart_nrfx_irq_tx_enable>:
{
    398c:	b508      	push	{r3, lr}
	device_busy_set(dev);
    398e:	f002 fe06 	bl	659e <device_busy_set>
    3992:	4b0d      	ldr	r3, [pc, #52]	; (39c8 <uart_nrfx_irq_tx_enable+0x3c>)
    3994:	2201      	movs	r2, #1
    3996:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
    3998:	2280      	movs	r2, #128	; 0x80
    399a:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
    399e:	f04f 0220 	mov.w	r2, #32
    39a2:	f3ef 8311 	mrs	r3, BASEPRI
    39a6:	f382 8811 	msr	BASEPRI, r2
    39aa:	f3bf 8f6f 	isb	sy
	if (uart_sw_event_txdrdy) {
    39ae:	4a07      	ldr	r2, [pc, #28]	; (39cc <uart_nrfx_irq_tx_enable+0x40>)
    39b0:	7812      	ldrb	r2, [r2, #0]
    39b2:	b11a      	cbz	r2, 39bc <uart_nrfx_irq_tx_enable+0x30>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    39b4:	4a06      	ldr	r2, [pc, #24]	; (39d0 <uart_nrfx_irq_tx_enable+0x44>)
    39b6:	2104      	movs	r1, #4
    39b8:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	__asm__ volatile(
    39bc:	f383 8811 	msr	BASEPRI, r3
    39c0:	f3bf 8f6f 	isb	sy
}
    39c4:	bd08      	pop	{r3, pc}
    39c6:	bf00      	nop
    39c8:	40002008 	.word	0x40002008
    39cc:	20000563 	.word	0x20000563
    39d0:	e000e100 	.word	0xe000e100

000039d4 <uart_nrfx_configure>:
{
    39d4:	b530      	push	{r4, r5, lr}
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    39d6:	794b      	ldrb	r3, [r1, #5]
    39d8:	2b01      	cmp	r3, #1
    39da:	d120      	bne.n	3a1e <uart_nrfx_configure+0x4a>
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    39dc:	798b      	ldrb	r3, [r1, #6]
    39de:	2b03      	cmp	r3, #3
    39e0:	d11d      	bne.n	3a1e <uart_nrfx_configure+0x4a>
	switch (cfg->flow_ctrl) {
    39e2:	79cc      	ldrb	r4, [r1, #7]
    39e4:	b12c      	cbz	r4, 39f2 <uart_nrfx_configure+0x1e>
    39e6:	2c01      	cmp	r4, #1
    39e8:	d119      	bne.n	3a1e <uart_nrfx_configure+0x4a>
	return dev->config->config_info;
    39ea:	6803      	ldr	r3, [r0, #0]
		if (get_dev_config(dev)->rts_cts_pins_set) {
    39ec:	689b      	ldr	r3, [r3, #8]
    39ee:	781b      	ldrb	r3, [r3, #0]
    39f0:	b1ab      	cbz	r3, 3a1e <uart_nrfx_configure+0x4a>
	switch (cfg->parity) {
    39f2:	790a      	ldrb	r2, [r1, #4]
    39f4:	b112      	cbz	r2, 39fc <uart_nrfx_configure+0x28>
    39f6:	2a02      	cmp	r2, #2
    39f8:	d111      	bne.n	3a1e <uart_nrfx_configure+0x4a>
		parity = NRF_UART_PARITY_INCLUDED;
    39fa:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    39fc:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    39fe:	f647 2512 	movw	r5, #31250	; 0x7a12
    3a02:	42ab      	cmp	r3, r5
    3a04:	d05f      	beq.n	3ac6 <uart_nrfx_configure+0xf2>
    3a06:	d827      	bhi.n	3a58 <uart_nrfx_configure+0x84>
    3a08:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3a0c:	d05e      	beq.n	3acc <uart_nrfx_configure+0xf8>
    3a0e:	d812      	bhi.n	3a36 <uart_nrfx_configure+0x62>
    3a10:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3a14:	d05c      	beq.n	3ad0 <uart_nrfx_configure+0xfc>
    3a16:	d805      	bhi.n	3a24 <uart_nrfx_configure+0x50>
    3a18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3a1c:	d05b      	beq.n	3ad6 <uart_nrfx_configure+0x102>
		return -ENOTSUP;
    3a1e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    3a22:	e04f      	b.n	3ac4 <uart_nrfx_configure+0xf0>
	switch (baudrate) {
    3a24:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3a28:	d058      	beq.n	3adc <uart_nrfx_configure+0x108>
    3a2a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3a2e:	d1f6      	bne.n	3a1e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    3a30:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3a34:	e03b      	b.n	3aae <uart_nrfx_configure+0xda>
	switch (baudrate) {
    3a36:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3a3a:	d052      	beq.n	3ae2 <uart_nrfx_configure+0x10e>
    3a3c:	d804      	bhi.n	3a48 <uart_nrfx_configure+0x74>
    3a3e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3a42:	d1ec      	bne.n	3a1e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    3a44:	4b30      	ldr	r3, [pc, #192]	; (3b08 <uart_nrfx_configure+0x134>)
    3a46:	e032      	b.n	3aae <uart_nrfx_configure+0xda>
	switch (baudrate) {
    3a48:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3a4c:	d04c      	beq.n	3ae8 <uart_nrfx_configure+0x114>
    3a4e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3a52:	d1e4      	bne.n	3a1e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    3a54:	4b2d      	ldr	r3, [pc, #180]	; (3b0c <uart_nrfx_configure+0x138>)
    3a56:	e02a      	b.n	3aae <uart_nrfx_configure+0xda>
	switch (baudrate) {
    3a58:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3a5c:	d046      	beq.n	3aec <uart_nrfx_configure+0x118>
    3a5e:	d811      	bhi.n	3a84 <uart_nrfx_configure+0xb0>
    3a60:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    3a64:	42ab      	cmp	r3, r5
    3a66:	d043      	beq.n	3af0 <uart_nrfx_configure+0x11c>
    3a68:	d804      	bhi.n	3a74 <uart_nrfx_configure+0xa0>
    3a6a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    3a6e:	d1d6      	bne.n	3a1e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    3a70:	4b27      	ldr	r3, [pc, #156]	; (3b10 <uart_nrfx_configure+0x13c>)
    3a72:	e01c      	b.n	3aae <uart_nrfx_configure+0xda>
	switch (baudrate) {
    3a74:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3a78:	d03d      	beq.n	3af6 <uart_nrfx_configure+0x122>
    3a7a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3a7e:	d1ce      	bne.n	3a1e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    3a80:	4b24      	ldr	r3, [pc, #144]	; (3b14 <uart_nrfx_configure+0x140>)
    3a82:	e014      	b.n	3aae <uart_nrfx_configure+0xda>
	switch (baudrate) {
    3a84:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3a88:	d037      	beq.n	3afa <uart_nrfx_configure+0x126>
    3a8a:	d808      	bhi.n	3a9e <uart_nrfx_configure+0xca>
    3a8c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3a90:	d035      	beq.n	3afe <uart_nrfx_configure+0x12a>
    3a92:	4d21      	ldr	r5, [pc, #132]	; (3b18 <uart_nrfx_configure+0x144>)
    3a94:	42ab      	cmp	r3, r5
    3a96:	d1c2      	bne.n	3a1e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    3a98:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3a9c:	e007      	b.n	3aae <uart_nrfx_configure+0xda>
	switch (baudrate) {
    3a9e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3aa2:	d02e      	beq.n	3b02 <uart_nrfx_configure+0x12e>
    3aa4:	4d1d      	ldr	r5, [pc, #116]	; (3b1c <uart_nrfx_configure+0x148>)
    3aa6:	42ab      	cmp	r3, r5
    3aa8:	d1b9      	bne.n	3a1e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    3aaa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3aae:	4d1c      	ldr	r5, [pc, #112]	; (3b20 <uart_nrfx_configure+0x14c>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    3ab0:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    3ab2:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    3ab6:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
	get_dev_data(dev)->uart_config = *cfg;
    3aba:	6883      	ldr	r3, [r0, #8]
    3abc:	c903      	ldmia	r1, {r0, r1}
    3abe:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    3ac2:	2000      	movs	r0, #0
}
    3ac4:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    3ac6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3aca:	e7f0      	b.n	3aae <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    3acc:	4b15      	ldr	r3, [pc, #84]	; (3b24 <uart_nrfx_configure+0x150>)
    3ace:	e7ee      	b.n	3aae <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00027000;
    3ad0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3ad4:	e7eb      	b.n	3aae <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    3ad6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3ada:	e7e8      	b.n	3aae <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    3adc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3ae0:	e7e5      	b.n	3aae <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    3ae2:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    3ae6:	e7e2      	b.n	3aae <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    3ae8:	4b0f      	ldr	r3, [pc, #60]	; (3b28 <uart_nrfx_configure+0x154>)
    3aea:	e7e0      	b.n	3aae <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    3aec:	4b0f      	ldr	r3, [pc, #60]	; (3b2c <uart_nrfx_configure+0x158>)
    3aee:	e7de      	b.n	3aae <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    3af0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3af4:	e7db      	b.n	3aae <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    3af6:	4b0e      	ldr	r3, [pc, #56]	; (3b30 <uart_nrfx_configure+0x15c>)
    3af8:	e7d9      	b.n	3aae <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    3afa:	4b0e      	ldr	r3, [pc, #56]	; (3b34 <uart_nrfx_configure+0x160>)
    3afc:	e7d7      	b.n	3aae <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    3afe:	4b0e      	ldr	r3, [pc, #56]	; (3b38 <uart_nrfx_configure+0x164>)
    3b00:	e7d5      	b.n	3aae <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    3b02:	4b0e      	ldr	r3, [pc, #56]	; (3b3c <uart_nrfx_configure+0x168>)
    3b04:	e7d3      	b.n	3aae <uart_nrfx_configure+0xda>
    3b06:	bf00      	nop
    3b08:	00275000 	.word	0x00275000
    3b0c:	0075f000 	.word	0x0075f000
    3b10:	009d5000 	.word	0x009d5000
    3b14:	013a9000 	.word	0x013a9000
    3b18:	0003d090 	.word	0x0003d090
    3b1c:	000f4240 	.word	0x000f4240
    3b20:	40002000 	.word	0x40002000
    3b24:	0013b000 	.word	0x0013b000
    3b28:	004ea000 	.word	0x004ea000
    3b2c:	01d7e000 	.word	0x01d7e000
    3b30:	00ebf000 	.word	0x00ebf000
    3b34:	075f7000 	.word	0x075f7000
    3b38:	03afb000 	.word	0x03afb000
    3b3c:	0ebed000 	.word	0x0ebed000

00003b40 <uart_nrfx_irq_is_pending>:
{
    3b40:	b508      	push	{r3, lr}
    return (bool)(p_reg->INTENSET & mask);
    3b42:	4b0c      	ldr	r3, [pc, #48]	; (3b74 <uart_nrfx_irq_is_pending+0x34>)
    3b44:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		||
    3b48:	f012 0f80 	tst.w	r2, #128	; 0x80
    3b4c:	461a      	mov	r2, r3
    3b4e:	d105      	bne.n	3b5c <uart_nrfx_irq_is_pending+0x1c>
    3b50:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
    3b54:	f010 0004 	ands.w	r0, r0, #4
    3b58:	d106      	bne.n	3b68 <uart_nrfx_irq_is_pending+0x28>
}
    3b5a:	bd08      	pop	{r3, pc}
		 event_txdrdy_check())
    3b5c:	f7ff feb4 	bl	38c8 <event_txdrdy_check>
					   NRF_UART_INT_MASK_TXDRDY) &&
    3b60:	2800      	cmp	r0, #0
    3b62:	d0f5      	beq.n	3b50 <uart_nrfx_irq_is_pending+0x10>
		||
    3b64:	2001      	movs	r0, #1
    3b66:	e7f8      	b.n	3b5a <uart_nrfx_irq_is_pending+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b68:	4b03      	ldr	r3, [pc, #12]	; (3b78 <uart_nrfx_irq_is_pending+0x38>)
    3b6a:	6818      	ldr	r0, [r3, #0]
					   NRF_UART_INT_MASK_RXDRDY) &&
    3b6c:	3000      	adds	r0, #0
    3b6e:	bf18      	it	ne
    3b70:	2001      	movne	r0, #1
    3b72:	e7f2      	b.n	3b5a <uart_nrfx_irq_is_pending+0x1a>
    3b74:	40002000 	.word	0x40002000
    3b78:	40002108 	.word	0x40002108

00003b7c <uart_nrfx_init>:
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    3b7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    3b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSELRXD = pselrxd;
    3b82:	4c1c      	ldr	r4, [pc, #112]	; (3bf4 <uart_nrfx_init+0x78>)
    3b84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    3b88:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3b8c:	2103      	movs	r1, #3
    3b8e:	2200      	movs	r2, #0
    3b90:	2513      	movs	r5, #19
    3b92:	f8c3 1750 	str.w	r1, [r3, #1872]	; 0x750
    3b96:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
    3b9a:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
    3b9e:	2514      	movs	r5, #20
    3ba0:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    3ba4:	2520      	movs	r5, #32
    3ba6:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3baa:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
    3bae:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSELRTS = pselrts;
    3bb2:	2305      	movs	r3, #5
    3bb4:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSELCTS = pselcts;
    3bb8:	2307      	movs	r3, #7
    3bba:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			       DT_NORDIC_NRF_UART_UART_0_RTS_PIN,
			       DT_NORDIC_NRF_UART_UART_0_CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3bbe:	6881      	ldr	r1, [r0, #8]
    3bc0:	f7ff ff08 	bl	39d4 <uart_nrfx_configure>
	if (err) {
    3bc4:	4605      	mov	r5, r0
    3bc6:	b990      	cbnz	r0, 3bee <uart_nrfx_init+0x72>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    3bc8:	2304      	movs	r3, #4
    3bca:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3bce:	4b0a      	ldr	r3, [pc, #40]	; (3bf8 <uart_nrfx_init+0x7c>)
    3bd0:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3bd2:	681b      	ldr	r3, [r3, #0]
    3bd4:	9301      	str	r3, [sp, #4]
    (void)dummy;
    3bd6:	9b01      	ldr	r3, [sp, #4]

#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
	/* Simulate that the TXDRDY event is set, so that the transmitter status
	 * is indicated correctly.
	 */
	uart_sw_event_txdrdy = 1U;
    3bd8:	4b08      	ldr	r3, [pc, #32]	; (3bfc <uart_nrfx_init+0x80>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3bda:	2101      	movs	r1, #1
    3bdc:	6021      	str	r1, [r4, #0]
#endif

#if defined(CONFIG_UART_0_ASYNC) || defined(CONFIG_UART_0_INTERRUPT_DRIVEN)

	IRQ_CONNECT(DT_NORDIC_NRF_UART_UART_0_IRQ_0,
    3bde:	4602      	mov	r2, r0
    3be0:	2002      	movs	r0, #2
	uart_sw_event_txdrdy = 1U;
    3be2:	7019      	strb	r1, [r3, #0]
	IRQ_CONNECT(DT_NORDIC_NRF_UART_UART_0_IRQ_0,
    3be4:	f7fe fd28 	bl	2638 <z_irq_priority_set>
		    DT_NORDIC_NRF_UART_UART_0_IRQ_0_PRIORITY,
		    uart_nrfx_isr,
		    DEVICE_GET(uart_nrfx_uart0),
		    0);
	irq_enable(DT_NORDIC_NRF_UART_UART_0_IRQ_0);
    3be8:	2002      	movs	r0, #2
    3bea:	f7fe fd01 	bl	25f0 <z_arch_irq_enable>
	defined(DT_NORDIC_NRF_UART_UART_0_CTS_PIN)
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    3bee:	4628      	mov	r0, r5
    3bf0:	b003      	add	sp, #12
    3bf2:	bd30      	pop	{r4, r5, pc}
    3bf4:	40002000 	.word	0x40002000
    3bf8:	40002108 	.word	0x40002108
    3bfc:	20000563 	.word	0x20000563

00003c00 <uart_nrfx_fifo_read>:
{
    3c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	while ((size - num_rx > 0) &&
    3c02:	2300      	movs	r3, #0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3c04:	4c09      	ldr	r4, [pc, #36]	; (3c2c <uart_nrfx_fifo_read+0x2c>)
    return p_reg->RXD;
    3c06:	4f0a      	ldr	r7, [pc, #40]	; (3c30 <uart_nrfx_fifo_read+0x30>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c08:	461e      	mov	r6, r3
    3c0a:	b2d8      	uxtb	r0, r3
    3c0c:	1a15      	subs	r5, r2, r0
    3c0e:	2d00      	cmp	r5, #0
    3c10:	dd02      	ble.n	3c18 <uart_nrfx_fifo_read+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3c12:	6825      	ldr	r5, [r4, #0]
    3c14:	3301      	adds	r3, #1
    3c16:	b90d      	cbnz	r5, 3c1c <uart_nrfx_fifo_read+0x1c>
}
    3c18:	b003      	add	sp, #12
    3c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c1c:	6026      	str	r6, [r4, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3c1e:	6825      	ldr	r5, [r4, #0]
    3c20:	9501      	str	r5, [sp, #4]
    (void)dummy;
    3c22:	9d01      	ldr	r5, [sp, #4]
    return p_reg->RXD;
    3c24:	f8d7 5518 	ldr.w	r5, [r7, #1304]	; 0x518
    3c28:	540d      	strb	r5, [r1, r0]
    3c2a:	e7ee      	b.n	3c0a <uart_nrfx_fifo_read+0xa>
    3c2c:	40002108 	.word	0x40002108
    3c30:	40002000 	.word	0x40002000

00003c34 <uart_nrfx_poll_out>:
{
    3c34:	b507      	push	{r0, r1, r2, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c36:	4a0b      	ldr	r2, [pc, #44]	; (3c64 <uart_nrfx_poll_out+0x30>)
    3c38:	2300      	movs	r3, #0
    3c3a:	6013      	str	r3, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3c3c:	6812      	ldr	r2, [r2, #0]
    3c3e:	9201      	str	r2, [sp, #4]
    (void)dummy;
    3c40:	9a01      	ldr	r2, [sp, #4]
	uart_sw_event_txdrdy = 0U;
    3c42:	4a09      	ldr	r2, [pc, #36]	; (3c68 <uart_nrfx_poll_out+0x34>)
    3c44:	7013      	strb	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3c46:	4b09      	ldr	r3, [pc, #36]	; (3c6c <uart_nrfx_poll_out+0x38>)
    3c48:	2201      	movs	r2, #1
    3c4a:	601a      	str	r2, [r3, #0]
    p_reg->TXD = txd;
    3c4c:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	while (!event_txdrdy_check()) {
    3c50:	f7ff fe3a 	bl	38c8 <event_txdrdy_check>
    3c54:	2800      	cmp	r0, #0
    3c56:	d0fb      	beq.n	3c50 <uart_nrfx_poll_out+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3c58:	4b05      	ldr	r3, [pc, #20]	; (3c70 <uart_nrfx_poll_out+0x3c>)
    3c5a:	2201      	movs	r2, #1
    3c5c:	601a      	str	r2, [r3, #0]
}
    3c5e:	b003      	add	sp, #12
    3c60:	f85d fb04 	ldr.w	pc, [sp], #4
    3c64:	4000211c 	.word	0x4000211c
    3c68:	20000563 	.word	0x20000563
    3c6c:	40002008 	.word	0x40002008
    3c70:	4000200c 	.word	0x4000200c

00003c74 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3c74:	4b08      	ldr	r3, [pc, #32]	; (3c98 <uart_nrfx_poll_in+0x24>)
    3c76:	681a      	ldr	r2, [r3, #0]
{
    3c78:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    3c7a:	b152      	cbz	r2, 3c92 <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c7c:	2000      	movs	r0, #0
    3c7e:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3c80:	681b      	ldr	r3, [r3, #0]
    3c82:	9301      	str	r3, [sp, #4]
    (void)dummy;
    3c84:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
    3c86:	4b05      	ldr	r3, [pc, #20]	; (3c9c <uart_nrfx_poll_in+0x28>)
    3c88:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    3c8c:	700b      	strb	r3, [r1, #0]
}
    3c8e:	b002      	add	sp, #8
    3c90:	4770      	bx	lr
		return -1;
    3c92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3c96:	e7fa      	b.n	3c8e <uart_nrfx_poll_in+0x1a>
    3c98:	40002108 	.word	0x40002108
    3c9c:	40002000 	.word	0x40002000

00003ca0 <uart_nrfx_fifo_fill>:
{
    3ca0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ca4:	4e0d      	ldr	r6, [pc, #52]	; (3cdc <uart_nrfx_fifo_fill+0x3c>)
	uart_sw_event_txdrdy = 0U;
    3ca6:	4f0e      	ldr	r7, [pc, #56]	; (3ce0 <uart_nrfx_fifo_fill+0x40>)
    p_reg->TXD = txd;
    3ca8:	f8df 8038 	ldr.w	r8, [pc, #56]	; 3ce4 <uart_nrfx_fifo_fill+0x44>
	while ((len - num_tx > 0) &&
    3cac:	2400      	movs	r4, #0
    3cae:	b2e5      	uxtb	r5, r4
    3cb0:	1b53      	subs	r3, r2, r5
    3cb2:	2b00      	cmp	r3, #0
    3cb4:	dd03      	ble.n	3cbe <uart_nrfx_fifo_fill+0x1e>
	       event_txdrdy_check()) {
    3cb6:	f7ff fe07 	bl	38c8 <event_txdrdy_check>
    3cba:	3401      	adds	r4, #1
	while ((len - num_tx > 0) &&
    3cbc:	b918      	cbnz	r0, 3cc6 <uart_nrfx_fifo_fill+0x26>
}
    3cbe:	4628      	mov	r0, r5
    3cc0:	b002      	add	sp, #8
    3cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3cc6:	2300      	movs	r3, #0
    3cc8:	6033      	str	r3, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3cca:	6830      	ldr	r0, [r6, #0]
    3ccc:	9001      	str	r0, [sp, #4]
    (void)dummy;
    3cce:	9801      	ldr	r0, [sp, #4]
	uart_sw_event_txdrdy = 0U;
    3cd0:	703b      	strb	r3, [r7, #0]
    p_reg->TXD = txd;
    3cd2:	5d4b      	ldrb	r3, [r1, r5]
    3cd4:	f8c8 351c 	str.w	r3, [r8, #1308]	; 0x51c
    3cd8:	e7e9      	b.n	3cae <uart_nrfx_fifo_fill+0xe>
    3cda:	bf00      	nop
    3cdc:	4000211c 	.word	0x4000211c
    3ce0:	20000563 	.word	0x20000563
    3ce4:	40002000 	.word	0x40002000

00003ce8 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
    3ce8:	4b09      	ldr	r3, [pc, #36]	; (3d10 <z_sys_device_do_config_level+0x28>)
{
    3cea:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
    3cec:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3cf0:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    3cf2:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    3cf4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    3cf8:	42a5      	cmp	r5, r4
    3cfa:	d800      	bhi.n	3cfe <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    3cfc:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    3cfe:	6823      	ldr	r3, [r4, #0]
    3d00:	4620      	mov	r0, r4
    3d02:	685b      	ldr	r3, [r3, #4]
    3d04:	4798      	blx	r3
		if (retval != 0) {
    3d06:	b100      	cbz	r0, 3d0a <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    3d08:	6066      	str	r6, [r4, #4]
								info++) {
    3d0a:	340c      	adds	r4, #12
    3d0c:	e7f4      	b.n	3cf8 <z_sys_device_do_config_level+0x10>
    3d0e:	bf00      	nop
    3d10:	00006fe0 	.word	0x00006fe0

00003d14 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    3d14:	4b10      	ldr	r3, [pc, #64]	; (3d58 <z_impl_device_get_binding+0x44>)
{
    3d16:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    3d18:	4c10      	ldr	r4, [pc, #64]	; (3d5c <z_impl_device_get_binding+0x48>)
{
    3d1a:	4605      	mov	r5, r0
    3d1c:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    3d1e:	429c      	cmp	r4, r3
    3d20:	d104      	bne.n	3d2c <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    3d22:	4c0e      	ldr	r4, [pc, #56]	; (3d5c <z_impl_device_get_binding+0x48>)
    3d24:	42b4      	cmp	r4, r6
    3d26:	d109      	bne.n	3d3c <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    3d28:	2400      	movs	r4, #0
    3d2a:	e012      	b.n	3d52 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    3d2c:	6862      	ldr	r2, [r4, #4]
    3d2e:	b11a      	cbz	r2, 3d38 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    3d30:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    3d32:	6812      	ldr	r2, [r2, #0]
    3d34:	42aa      	cmp	r2, r5
    3d36:	d00c      	beq.n	3d52 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    3d38:	340c      	adds	r4, #12
    3d3a:	e7f0      	b.n	3d1e <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    3d3c:	6863      	ldr	r3, [r4, #4]
    3d3e:	b90b      	cbnz	r3, 3d44 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    3d40:	340c      	adds	r4, #12
    3d42:	e7ef      	b.n	3d24 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    3d44:	6823      	ldr	r3, [r4, #0]
    3d46:	4628      	mov	r0, r5
    3d48:	6819      	ldr	r1, [r3, #0]
    3d4a:	f002 f9ce 	bl	60ea <strcmp>
    3d4e:	2800      	cmp	r0, #0
    3d50:	d1f6      	bne.n	3d40 <z_impl_device_get_binding+0x2c>
}
    3d52:	4620      	mov	r0, r4
    3d54:	bd70      	pop	{r4, r5, r6, pc}
    3d56:	bf00      	nop
    3d58:	20001db0 	.word	0x20001db0
    3d5c:	20001d38 	.word	0x20001d38

00003d60 <z_fatal_print>:
		return "Unknown error";
	}
}

void z_fatal_print(const char *fmt, ...)
{
    3d60:	b40f      	push	{r0, r1, r2, r3}
    3d62:	b513      	push	{r0, r1, r4, lr}
    3d64:	ab04      	add	r3, sp, #16
			.source_id = LOG_CURRENT_MODULE_ID(),
			.domain_id = CONFIG_LOG_DOMAIN_ID
		};
		log_generic(src_level, fmt, ap);
	} else {
		printk("FATAL: ");
    3d66:	4809      	ldr	r0, [pc, #36]	; (3d8c <z_fatal_print+0x2c>)
{
    3d68:	f853 4b04 	ldr.w	r4, [r3], #4
	va_start(ap, fmt);
    3d6c:	9301      	str	r3, [sp, #4]
		printk("FATAL: ");
    3d6e:	f001 f951 	bl	5014 <printk>
		vprintk(fmt, ap);
    3d72:	9901      	ldr	r1, [sp, #4]
    3d74:	4620      	mov	r0, r4
    3d76:	f7fc fc27 	bl	5c8 <vprintk>
		printk("\n");
    3d7a:	4805      	ldr	r0, [pc, #20]	; (3d90 <z_fatal_print+0x30>)
    3d7c:	f001 f94a 	bl	5014 <printk>
	}
	va_end(ap);
}
    3d80:	b002      	add	sp, #8
    3d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3d86:	b004      	add	sp, #16
    3d88:	4770      	bx	lr
    3d8a:	bf00      	nop
    3d8c:	00007e1d 	.word	0x00007e1d
    3d90:	000072d4 	.word	0x000072d4

00003d94 <k_sys_fatal_error_handler>:
{
    3d94:	b510      	push	{r4, lr}
    3d96:	4604      	mov	r4, r0
	z_fatal_print("Halting system");
    3d98:	4802      	ldr	r0, [pc, #8]	; (3da4 <k_sys_fatal_error_handler+0x10>)
    3d9a:	f7ff ffe1 	bl	3d60 <z_fatal_print>
	z_arch_system_halt(reason);
    3d9e:	4620      	mov	r0, r4
    3da0:	f002 fbff 	bl	65a2 <z_arch_system_halt>
    3da4:	00007d78 	.word	0x00007d78

00003da8 <z_fatal_error>:
#endif /* CONFIG_LOG || CONFIG_PRINTK */

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3da8:	b570      	push	{r4, r5, r6, lr}
    3daa:	4604      	mov	r4, r0
    3dac:	460e      	mov	r6, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    3dae:	f000 fc81 	bl	46b4 <z_impl_k_current_get>
    3db2:	2c04      	cmp	r4, #4
    3db4:	bf96      	itet	ls
    3db6:	4b11      	ldrls	r3, [pc, #68]	; (3dfc <z_fatal_error+0x54>)
    3db8:	4a11      	ldrhi	r2, [pc, #68]	; (3e00 <z_fatal_error+0x58>)
    3dba:	f853 2024 	ldrls.w	r2, [r3, r4, lsl #2]
    3dbe:	4605      	mov	r5, r0
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	z_fatal_print(">>> ZEPHYR FATAL ERROR %d: %s", reason,
    3dc0:	4621      	mov	r1, r4
    3dc2:	4810      	ldr	r0, [pc, #64]	; (3e04 <z_fatal_error+0x5c>)
    3dc4:	f7ff ffcc 	bl	3d60 <z_fatal_print>
	const char *thread_name = k_thread_name_get(thread);
    3dc8:	4628      	mov	r0, r5
    3dca:	f002 fd01 	bl	67d0 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    3dce:	4602      	mov	r2, r0
    3dd0:	b188      	cbz	r0, 3df6 <z_fatal_error+0x4e>
    3dd2:	7801      	ldrb	r1, [r0, #0]
		thread_name = "unknown";
    3dd4:	4b0c      	ldr	r3, [pc, #48]	; (3e08 <z_fatal_error+0x60>)
    3dd6:	2900      	cmp	r1, #0
    3dd8:	bf08      	it	eq
    3dda:	461a      	moveq	r2, r3
	 * if (k_is_in_isr()) {
	 *     printk("Fault during interrupt handling\n");
	 * }
	 */

	z_fatal_print("Current thread: %p (%s)", thread,
    3ddc:	4629      	mov	r1, r5
    3dde:	480b      	ldr	r0, [pc, #44]	; (3e0c <z_fatal_error+0x64>)
    3de0:	f7ff ffbe 	bl	3d60 <z_fatal_print>
		      thread_name_get(thread));

	k_sys_fatal_error_handler(reason, esf);
    3de4:	4620      	mov	r0, r4
    3de6:	4631      	mov	r1, r6
    3de8:	f7ff ffd4 	bl	3d94 <k_sys_fatal_error_handler>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    3dec:	4628      	mov	r0, r5
		/* FIXME: #17656 */
		__ASSERT(!k_is_in_isr(),
			 "Attempted to recover from a fatal error in ISR");
	}
	k_thread_abort(thread);
}
    3dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3df2:	f7fe be67 	b.w	2ac4 <z_impl_k_thread_abort>
		thread_name = "unknown";
    3df6:	4a04      	ldr	r2, [pc, #16]	; (3e08 <z_fatal_error+0x60>)
    3df8:	e7f0      	b.n	3ddc <z_fatal_error+0x34>
    3dfa:	bf00      	nop
    3dfc:	00006ff8 	.word	0x00006ff8
    3e00:	00007dd1 	.word	0x00007dd1
    3e04:	00007de7 	.word	0x00007de7
    3e08:	00007ddf 	.word	0x00007ddf
    3e0c:	00007e05 	.word	0x00007e05

00003e10 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    3e10:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    3e12:	4d0b      	ldr	r5, [pc, #44]	; (3e40 <idle+0x30>)
	__asm__ volatile(
    3e14:	f04f 0220 	mov.w	r2, #32
    3e18:	f3ef 8311 	mrs	r3, BASEPRI
    3e1c:	f382 8811 	msr	BASEPRI, r2
    3e20:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    3e24:	f002 fd13 	bl	684e <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3e28:	2101      	movs	r1, #1
    3e2a:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
    3e2c:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3e2e:	bfd8      	it	le
    3e30:	4608      	movle	r0, r1
    3e32:	f002 fd1c 	bl	686e <z_set_timeout_expiry>
	_kernel.idle = ticks;
    3e36:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
    3e38:	f7fe fc46 	bl	26c8 <k_cpu_idle>
    3e3c:	e7ea      	b.n	3e14 <idle+0x4>
    3e3e:	bf00      	nop
    3e40:	200004b8 	.word	0x200004b8

00003e44 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3e44:	4802      	ldr	r0, [pc, #8]	; (3e50 <z_bss_zero+0xc>)
    3e46:	4a03      	ldr	r2, [pc, #12]	; (3e54 <z_bss_zero+0x10>)
    3e48:	2100      	movs	r1, #0
    3e4a:	1a12      	subs	r2, r2, r0
    3e4c:	f002 b9b9 	b.w	61c2 <memset>
    3e50:	20000000 	.word	0x20000000
    3e54:	20000564 	.word	0x20000564

00003e58 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    3e58:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    3e5a:	4806      	ldr	r0, [pc, #24]	; (3e74 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    3e5c:	4a06      	ldr	r2, [pc, #24]	; (3e78 <z_data_copy+0x20>)
    3e5e:	4907      	ldr	r1, [pc, #28]	; (3e7c <z_data_copy+0x24>)
    3e60:	1a12      	subs	r2, r2, r0
    3e62:	f002 f984 	bl	616e <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    3e66:	4a06      	ldr	r2, [pc, #24]	; (3e80 <z_data_copy+0x28>)
    3e68:	4906      	ldr	r1, [pc, #24]	; (3e84 <z_data_copy+0x2c>)
    3e6a:	4807      	ldr	r0, [pc, #28]	; (3e88 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3e6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    3e70:	f002 b97d 	b.w	616e <memcpy>
    3e74:	20001ca8 	.word	0x20001ca8
    3e78:	20001dc4 	.word	0x20001dc4
    3e7c:	00007e78 	.word	0x00007e78
    3e80:	00000000 	.word	0x00000000
    3e84:	00007e78 	.word	0x00007e78
    3e88:	20000000 	.word	0x20000000

00003e8c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    3e8c:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3e8e:	2002      	movs	r0, #2
    3e90:	f7ff ff2a 	bl	3ce8 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    3e94:	4807      	ldr	r0, [pc, #28]	; (3eb4 <bg_thread_main+0x28>)
    3e96:	f001 f8bd 	bl	5014 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    3e9a:	2003      	movs	r0, #3
    3e9c:	f7ff ff24 	bl	3ce8 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    3ea0:	f000 fc7a 	bl	4798 <z_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    3ea4:	f000 feb2 	bl	4c0c <main>

	/* Mark nonessenrial since main() has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    3ea8:	4a03      	ldr	r2, [pc, #12]	; (3eb8 <bg_thread_main+0x2c>)
    3eaa:	7b13      	ldrb	r3, [r2, #12]
    3eac:	f023 0301 	bic.w	r3, r3, #1
    3eb0:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3eb2:	bd08      	pop	{r3, pc}
    3eb4:	00007e25 	.word	0x00007e25
    3eb8:	2000044c 	.word	0x2000044c

00003ebc <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    3ebc:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    3ebe:	4b3f      	ldr	r3, [pc, #252]	; (3fbc <z_cstart+0x100>)
    3ec0:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3ec2:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    3ec6:	4c3e      	ldr	r4, [pc, #248]	; (3fc0 <z_cstart+0x104>)
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    3ec8:	4e3e      	ldr	r6, [pc, #248]	; (3fc4 <z_cstart+0x108>)
    3eca:	6963      	ldr	r3, [r4, #20]
    3ecc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3ed0:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ed2:	2500      	movs	r5, #0
    3ed4:	23e0      	movs	r3, #224	; 0xe0
    3ed6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    3eda:	77e5      	strb	r5, [r4, #31]
    3edc:	7625      	strb	r5, [r4, #24]
    3ede:	7665      	strb	r5, [r4, #25]
    3ee0:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3ee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3ee4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3ee8:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void kernel_arch_init(void)
{
	z_InterruptStackSetup();
	z_ExcSetup();
	z_FaultInit();
    3eea:	f7fe fdd7 	bl	2a9c <z_FaultInit>
	z_CpuIdleInit();
    3eee:	f7fe fbe5 	bl	26bc <z_CpuIdleInit>
static ALWAYS_INLINE void z_clearfaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3ef6:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
	struct k_thread dummy_thread = {
    3efa:	ab07      	add	r3, sp, #28
    3efc:	4629      	mov	r1, r5
    3efe:	226c      	movs	r2, #108	; 0x6c
    3f00:	4618      	mov	r0, r3
    3f02:	f002 f95e 	bl	61c2 <memset>
    3f06:	2701      	movs	r7, #1
	_current = &dummy_thread;
    3f08:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3f0a:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
    3f0c:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3f10:	f7ff feea 	bl	3ce8 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3f14:	4638      	mov	r0, r7
    3f16:	f7ff fee7 	bl	3ce8 <z_sys_device_do_config_level>
	_kernel.ready_q.cache = _main_thread;
    3f1a:	4c2b      	ldr	r4, [pc, #172]	; (3fc8 <z_cstart+0x10c>)
	z_sched_init();
    3f1c:	f000 fb74 	bl	4608 <z_sched_init>
	z_setup_new_thread(_main_thread, _main_stack,
    3f20:	4b2a      	ldr	r3, [pc, #168]	; (3fcc <z_cstart+0x110>)
	_kernel.ready_q.cache = _main_thread;
    3f22:	6274      	str	r4, [r6, #36]	; 0x24
	z_setup_new_thread(_main_thread, _main_stack,
    3f24:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3f28:	e9cd 7304 	strd	r7, r3, [sp, #16]
    3f2c:	e9cd 5502 	strd	r5, r5, [sp, #8]
    3f30:	e9cd 5500 	strd	r5, r5, [sp]
    3f34:	4b26      	ldr	r3, [pc, #152]	; (3fd0 <z_cstart+0x114>)
    3f36:	4927      	ldr	r1, [pc, #156]	; (3fd4 <z_cstart+0x118>)
    3f38:	4620      	mov	r0, r4
    3f3a:	f000 fbe5 	bl	4708 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3f3e:	7b63      	ldrb	r3, [r4, #13]
    3f40:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3f44:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3f48:	7362      	strb	r2, [r4, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
    3f4a:	4635      	mov	r5, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3f4c:	d104      	bne.n	3f58 <z_cstart+0x9c>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    3f4e:	69a3      	ldr	r3, [r4, #24]
    3f50:	b913      	cbnz	r3, 3f58 <z_cstart+0x9c>
		z_add_thread_to_ready_q(thread);
    3f52:	4620      	mov	r0, r4
    3f54:	f000 f9b4 	bl	42c0 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
    3f58:	4b1f      	ldr	r3, [pc, #124]	; (3fd8 <z_cstart+0x11c>)
    3f5a:	4e20      	ldr	r6, [pc, #128]	; (3fdc <z_cstart+0x120>)
    3f5c:	9305      	str	r3, [sp, #20]
    3f5e:	2201      	movs	r2, #1
    3f60:	230f      	movs	r3, #15
    3f62:	e9cd 3203 	strd	r3, r2, [sp, #12]
    3f66:	2300      	movs	r3, #0
    3f68:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3f6c:	491c      	ldr	r1, [pc, #112]	; (3fe0 <z_cstart+0x124>)
    3f6e:	9300      	str	r3, [sp, #0]
    3f70:	4630      	mov	r0, r6
    3f72:	e9cd 3301 	strd	r3, r3, [sp, #4]
    3f76:	4b1b      	ldr	r3, [pc, #108]	; (3fe4 <z_cstart+0x128>)
    3f78:	f000 fbc6 	bl	4708 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3f7c:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
    3f7e:	60ee      	str	r6, [r5, #12]
    3f80:	f023 0304 	bic.w	r3, r3, #4
    3f84:	7373      	strb	r3, [r6, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3f86:	4b18      	ldr	r3, [pc, #96]	; (3fe8 <z_cstart+0x12c>)
	list->tail = (sys_dnode_t *)list;
    3f88:	e9c5 3306 	strd	r3, r3, [r5, #24]
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arch_configure_static_mpu_regions();
    3f8c:	f7fe fdc0 	bl	2b10 <z_arch_configure_static_mpu_regions>
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arch_configure_dynamic_mpu_regions(main_thread);
    3f90:	480d      	ldr	r0, [pc, #52]	; (3fc8 <z_cstart+0x10c>)
	_current = main_thread;
    3f92:	60ac      	str	r4, [r5, #8]
	z_arch_configure_dynamic_mpu_regions(main_thread);
    3f94:	f002 f865 	bl	6062 <z_arch_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3f98:	4b0d      	ldr	r3, [pc, #52]	; (3fd0 <z_cstart+0x114>)
    3f9a:	4a14      	ldr	r2, [pc, #80]	; (3fec <z_cstart+0x130>)
    3f9c:	4618      	mov	r0, r3
    3f9e:	f382 8809 	msr	PSP, r2
    3fa2:	b663      	cpsie	if
    3fa4:	f04f 0100 	mov.w	r1, #0
    3fa8:	f381 8811 	msr	BASEPRI, r1
    3fac:	f3bf 8f6f 	isb	sy
    3fb0:	2100      	movs	r1, #0
    3fb2:	2200      	movs	r2, #0
    3fb4:	2300      	movs	r3, #0
    3fb6:	f000 fea3 	bl	4d00 <z_thread_entry>
	"bl z_thread_entry \n\t"   /* z_thread_entry(_main, 0, 0, 0); */
	:
	: "r" (_main), "r" (start_of_main_stack)
	);

	CODE_UNREACHABLE;
    3fba:	bf00      	nop
    3fbc:	20001aa8 	.word	0x20001aa8
    3fc0:	e000ed00 	.word	0xe000ed00
    3fc4:	200004b8 	.word	0x200004b8
    3fc8:	2000044c 	.word	0x2000044c
    3fcc:	00007e6c 	.word	0x00007e6c
    3fd0:	00003e8d 	.word	0x00003e8d
    3fd4:	20000d68 	.word	0x20000d68
    3fd8:	00007e71 	.word	0x00007e71
    3fdc:	200003e0 	.word	0x200003e0
    3fe0:	20001168 	.word	0x20001168
    3fe4:	00003e11 	.word	0x00003e11
    3fe8:	200004d0 	.word	0x200004d0
    3fec:	20001168 	.word	0x20001168

00003ff0 <z_impl_k_mutex_lock>:
		z_thread_priority_set(mutex->owner, new_prio);
	}
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    3ff0:	b570      	push	{r4, r5, r6, lr}
    3ff2:	460d      	mov	r5, r1
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    3ff4:	4934      	ldr	r1, [pc, #208]	; (40c8 <z_impl_k_mutex_lock+0xd8>)
    3ff6:	688b      	ldr	r3, [r1, #8]
    3ff8:	7bda      	ldrb	r2, [r3, #15]
    3ffa:	3a01      	subs	r2, #1
    3ffc:	4604      	mov	r4, r0
    3ffe:	73da      	strb	r2, [r3, #15]
	k_spinlock_key_t key;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	z_sched_lock();

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4000:	68c2      	ldr	r2, [r0, #12]
    4002:	4608      	mov	r0, r1
    4004:	b14a      	cbz	r2, 401a <z_impl_k_mutex_lock+0x2a>
    4006:	68a3      	ldr	r3, [r4, #8]
    4008:	6889      	ldr	r1, [r1, #8]
    400a:	428b      	cmp	r3, r1
    400c:	d012      	beq.n	4034 <z_impl_k_mutex_lock+0x44>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
    400e:	b99d      	cbnz	r5, 4038 <z_impl_k_mutex_lock+0x48>
		k_sched_unlock();
    4010:	f000 f93a 	bl	4288 <k_sched_unlock>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    4014:	f06f 050f 	mvn.w	r5, #15
    4018:	e00a      	b.n	4030 <z_impl_k_mutex_lock+0x40>
					_current->base.prio :
    401a:	688b      	ldr	r3, [r1, #8]
    401c:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4020:	6123      	str	r3, [r4, #16]
		mutex->lock_count++;
    4022:	3201      	adds	r2, #1
		mutex->owner = _current;
    4024:	6883      	ldr	r3, [r0, #8]
		mutex->lock_count++;
    4026:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
    4028:	60a3      	str	r3, [r4, #8]
		k_sched_unlock();
    402a:	f000 f92d 	bl	4288 <k_sched_unlock>
		return 0;
    402e:	2500      	movs	r5, #0

	k_sched_unlock();

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    4030:	4628      	mov	r0, r5
    4032:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
    4034:	6923      	ldr	r3, [r4, #16]
    4036:	e7f3      	b.n	4020 <z_impl_k_mutex_lock+0x30>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4038:	f991 100e 	ldrsb.w	r1, [r1, #14]
    403c:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4040:	4299      	cmp	r1, r3
    4042:	bfa8      	it	ge
    4044:	4619      	movge	r1, r3
    4046:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    404a:	f04f 0320 	mov.w	r3, #32
    404e:	f3ef 8611 	mrs	r6, BASEPRI
    4052:	f383 8811 	msr	BASEPRI, r3
    4056:	f3bf 8f6f 	isb	sy
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    405a:	68a0      	ldr	r0, [r4, #8]
    405c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4060:	4299      	cmp	r1, r3
    4062:	da01      	bge.n	4068 <z_impl_k_mutex_lock+0x78>
		z_thread_priority_set(mutex->owner, new_prio);
    4064:	f000 fa84 	bl	4570 <z_thread_priority_set>
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4068:	462b      	mov	r3, r5
    406a:	4622      	mov	r2, r4
    406c:	4631      	mov	r1, r6
    406e:	4817      	ldr	r0, [pc, #92]	; (40cc <z_impl_k_mutex_lock+0xdc>)
    4070:	f000 fa3c 	bl	44ec <z_pend_curr>
	if (got_mutex == 0) {
    4074:	4605      	mov	r5, r0
    4076:	b910      	cbnz	r0, 407e <z_impl_k_mutex_lock+0x8e>
		k_sched_unlock();
    4078:	f000 f906 	bl	4288 <k_sched_unlock>
		return 0;
    407c:	e7d8      	b.n	4030 <z_impl_k_mutex_lock+0x40>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    407e:	6823      	ldr	r3, [r4, #0]
    4080:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4082:	429c      	cmp	r4, r3
    4084:	d007      	beq.n	4096 <z_impl_k_mutex_lock+0xa6>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
    4086:	b133      	cbz	r3, 4096 <z_impl_k_mutex_lock+0xa6>
    4088:	f993 300e 	ldrsb.w	r3, [r3, #14]
    408c:	4299      	cmp	r1, r3
    408e:	bfa8      	it	ge
    4090:	4619      	movge	r1, r3
    4092:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    4096:	f04f 0320 	mov.w	r3, #32
    409a:	f3ef 8511 	mrs	r5, BASEPRI
    409e:	f383 8811 	msr	BASEPRI, r3
    40a2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, new_prio);
    40a6:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    40a8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    40ac:	4299      	cmp	r1, r3
    40ae:	d001      	beq.n	40b4 <z_impl_k_mutex_lock+0xc4>
		z_thread_priority_set(mutex->owner, new_prio);
    40b0:	f000 fa5e 	bl	4570 <z_thread_priority_set>
	__asm__ volatile(
    40b4:	f385 8811 	msr	BASEPRI, r5
    40b8:	f3bf 8f6f 	isb	sy
	k_sched_unlock();
    40bc:	f000 f8e4 	bl	4288 <k_sched_unlock>
	return -EAGAIN;
    40c0:	f06f 050a 	mvn.w	r5, #10
    40c4:	e7b4      	b.n	4030 <z_impl_k_mutex_lock+0x40>
    40c6:	bf00      	nop
    40c8:	200004b8 	.word	0x200004b8
    40cc:	20000564 	.word	0x20000564

000040d0 <z_impl_k_mutex_unlock>:
    40d0:	4b1e      	ldr	r3, [pc, #120]	; (414c <z_impl_k_mutex_unlock+0x7c>)
    40d2:	689a      	ldr	r2, [r3, #8]
    40d4:	7bd3      	ldrb	r3, [r2, #15]
    40d6:	3b01      	subs	r3, #1
	return z_impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    40d8:	b570      	push	{r4, r5, r6, lr}
    40da:	4604      	mov	r4, r0
    40dc:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
    40de:	68c3      	ldr	r3, [r0, #12]
    40e0:	2b01      	cmp	r3, #1
    40e2:	d005      	beq.n	40f0 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
    40e4:	3b01      	subs	r3, #1
    40e6:	60c3      	str	r3, [r0, #12]
	}


k_mutex_unlock_return:
	k_sched_unlock();
}
    40e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
    40ec:	f000 b8cc 	b.w	4288 <k_sched_unlock>
	__asm__ volatile(
    40f0:	f04f 0320 	mov.w	r3, #32
    40f4:	f3ef 8611 	mrs	r6, BASEPRI
    40f8:	f383 8811 	msr	BASEPRI, r3
    40fc:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4100:	6901      	ldr	r1, [r0, #16]
    4102:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    4104:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4108:	4299      	cmp	r1, r3
    410a:	d001      	beq.n	4110 <z_impl_k_mutex_unlock+0x40>
		z_thread_priority_set(mutex->owner, new_prio);
    410c:	f000 fa30 	bl	4570 <z_thread_priority_set>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4110:	4620      	mov	r0, r4
    4112:	f002 fb03 	bl	671c <z_unpend_first_thread>
    4116:	4605      	mov	r5, r0
	mutex->owner = new_owner;
    4118:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    411a:	b180      	cbz	r0, 413e <z_impl_k_mutex_unlock+0x6e>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    411c:	7b43      	ldrb	r3, [r0, #13]
    411e:	06db      	lsls	r3, r3, #27
    4120:	d103      	bne.n	412a <z_impl_k_mutex_unlock+0x5a>
	if (z_is_thread_ready(thread)) {
    4122:	6983      	ldr	r3, [r0, #24]
    4124:	b90b      	cbnz	r3, 412a <z_impl_k_mutex_unlock+0x5a>
		z_add_thread_to_ready_q(thread);
    4126:	f000 f8cb 	bl	42c0 <z_add_thread_to_ready_q>
	__asm__ volatile(
    412a:	f386 8811 	msr	BASEPRI, r6
    412e:	f3bf 8f6f 	isb	sy
}

static ALWAYS_INLINE void
z_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4132:	2300      	movs	r3, #0
    4134:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
    4136:	f995 300e 	ldrsb.w	r3, [r5, #14]
    413a:	6123      	str	r3, [r4, #16]
    413c:	e7d4      	b.n	40e8 <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
    413e:	60e0      	str	r0, [r4, #12]
    4140:	f386 8811 	msr	BASEPRI, r6
    4144:	f3bf 8f6f 	isb	sy
    4148:	e7ce      	b.n	40e8 <z_impl_k_mutex_unlock+0x18>
    414a:	bf00      	nop
    414c:	200004b8 	.word	0x200004b8

00004150 <resched.part.15>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4150:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    4154:	280d      	cmp	r0, #13
    4156:	d809      	bhi.n	416c <resched.part.15+0x1c>
    4158:	b128      	cbz	r0, 4166 <resched.part.15+0x16>
    415a:	4b05      	ldr	r3, [pc, #20]	; (4170 <resched.part.15+0x20>)
    415c:	6858      	ldr	r0, [r3, #4]
    415e:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    4162:	f3c0 20c0 	ubfx	r0, r0, #11, #1
	}
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_is_in_isr();
}
    4166:	f080 0001 	eor.w	r0, r0, #1
    416a:	4770      	bx	lr
    416c:	2001      	movs	r0, #1
    416e:	e7fa      	b.n	4166 <resched.part.15+0x16>
    4170:	e000ed00 	.word	0xe000ed00

00004174 <reset_time_slice>:
{
    4174:	b510      	push	{r4, lr}
	if (slice_time != 0) {
    4176:	4c08      	ldr	r4, [pc, #32]	; (4198 <reset_time_slice+0x24>)
    4178:	6823      	ldr	r3, [r4, #0]
    417a:	b15b      	cbz	r3, 4194 <reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    417c:	f7fe f99e 	bl	24bc <z_clock_elapsed>
    4180:	6823      	ldr	r3, [r4, #0]
    4182:	4a06      	ldr	r2, [pc, #24]	; (419c <reset_time_slice+0x28>)
    4184:	4418      	add	r0, r3
    4186:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    4188:	2100      	movs	r1, #0
    418a:	4618      	mov	r0, r3
}
    418c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    4190:	f002 bb6d 	b.w	686e <z_set_timeout_expiry>
}
    4194:	bd10      	pop	{r4, pc}
    4196:	bf00      	nop
    4198:	200004f0 	.word	0x200004f0
    419c:	200004b8 	.word	0x200004b8

000041a0 <k_sched_time_slice_set>:
{
    41a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41a2:	460d      	mov	r5, r1
	__asm__ volatile(
    41a4:	f04f 0320 	mov.w	r3, #32
    41a8:	f3ef 8411 	mrs	r4, BASEPRI
    41ac:	f383 8811 	msr	BASEPRI, r3
    41b0:	f3bf 8f6f 	isb	sy
		_current_cpu->slice_ticks = 0;
    41b4:	4b0d      	ldr	r3, [pc, #52]	; (41ec <k_sched_time_slice_set+0x4c>)

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
    41b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    41ba:	f240 36e7 	movw	r6, #999	; 0x3e7
    41be:	2700      	movs	r7, #0
    41c0:	fbc1 6700 	smlal	r6, r7, r1, r0
    41c4:	2200      	movs	r2, #0
    41c6:	611a      	str	r2, [r3, #16]
    41c8:	4630      	mov	r0, r6
    41ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    41ce:	2300      	movs	r3, #0
    41d0:	4639      	mov	r1, r7
    41d2:	f7fb ff83 	bl	dc <__aeabi_ldivmod>
    41d6:	4b06      	ldr	r3, [pc, #24]	; (41f0 <k_sched_time_slice_set+0x50>)
    41d8:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    41da:	4b06      	ldr	r3, [pc, #24]	; (41f4 <k_sched_time_slice_set+0x54>)
    41dc:	601d      	str	r5, [r3, #0]
		reset_time_slice();
    41de:	f7ff ffc9 	bl	4174 <reset_time_slice>
	__asm__ volatile(
    41e2:	f384 8811 	msr	BASEPRI, r4
    41e6:	f3bf 8f6f 	isb	sy
}
    41ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41ec:	200004b8 	.word	0x200004b8
    41f0:	200004f0 	.word	0x200004f0
    41f4:	200004ec 	.word	0x200004ec

000041f8 <k_sched_lock>:
	__asm__ volatile(
    41f8:	f04f 0320 	mov.w	r3, #32
    41fc:	f3ef 8111 	mrs	r1, BASEPRI
    4200:	f383 8811 	msr	BASEPRI, r3
    4204:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    4208:	4b04      	ldr	r3, [pc, #16]	; (421c <k_sched_lock+0x24>)
    420a:	689a      	ldr	r2, [r3, #8]
    420c:	7bd3      	ldrb	r3, [r2, #15]
    420e:	3b01      	subs	r3, #1
    4210:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4212:	f381 8811 	msr	BASEPRI, r1
    4216:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    421a:	4770      	bx	lr
    421c:	200004b8 	.word	0x200004b8

00004220 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    4220:	4b09      	ldr	r3, [pc, #36]	; (4248 <z_priq_dumb_remove+0x28>)
    4222:	f103 0228 	add.w	r2, r3, #40	; 0x28
    4226:	4282      	cmp	r2, r0
    4228:	d105      	bne.n	4236 <z_priq_dumb_remove+0x16>
    422a:	689b      	ldr	r3, [r3, #8]
    422c:	428b      	cmp	r3, r1
    422e:	d102      	bne.n	4236 <z_priq_dumb_remove+0x16>
    4230:	7b4b      	ldrb	r3, [r1, #13]
    4232:	06db      	lsls	r3, r3, #27
    4234:	d106      	bne.n	4244 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    4236:	e9d1 3200 	ldrd	r3, r2, [r1]
    423a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    423c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    423e:	2300      	movs	r3, #0
	node->prev = NULL;
    4240:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    4244:	4770      	bx	lr
    4246:	bf00      	nop
    4248:	200004b8 	.word	0x200004b8

0000424c <update_cache>:
{
    424c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    424e:	4c0d      	ldr	r4, [pc, #52]	; (4284 <update_cache+0x38>)
{
    4250:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    4252:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4256:	f002 fa2a 	bl	66ae <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    425a:	4605      	mov	r5, r0
    425c:	b900      	cbnz	r0, 4260 <update_cache+0x14>
    425e:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    4260:	68a3      	ldr	r3, [r4, #8]
    4262:	b94a      	cbnz	r2, 4278 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    4264:	7b5a      	ldrb	r2, [r3, #13]
    4266:	06d2      	lsls	r2, r2, #27
    4268:	d106      	bne.n	4278 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    426a:	69aa      	ldr	r2, [r5, #24]
    426c:	b922      	cbnz	r2, 4278 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
    426e:	89da      	ldrh	r2, [r3, #14]
    4270:	2a7f      	cmp	r2, #127	; 0x7f
    4272:	d901      	bls.n	4278 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    4274:	6263      	str	r3, [r4, #36]	; 0x24
}
    4276:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    4278:	429d      	cmp	r5, r3
    427a:	d001      	beq.n	4280 <update_cache+0x34>
			reset_time_slice();
    427c:	f7ff ff7a 	bl	4174 <reset_time_slice>
		_kernel.ready_q.cache = th;
    4280:	6265      	str	r5, [r4, #36]	; 0x24
}
    4282:	e7f8      	b.n	4276 <update_cache+0x2a>
    4284:	200004b8 	.word	0x200004b8

00004288 <k_sched_unlock>:
{
    4288:	b510      	push	{r4, lr}
	__asm__ volatile(
    428a:	f04f 0320 	mov.w	r3, #32
    428e:	f3ef 8411 	mrs	r4, BASEPRI
    4292:	f383 8811 	msr	BASEPRI, r3
    4296:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    429a:	4b08      	ldr	r3, [pc, #32]	; (42bc <k_sched_unlock+0x34>)
    429c:	689a      	ldr	r2, [r3, #8]
    429e:	7bd3      	ldrb	r3, [r2, #15]
    42a0:	3301      	adds	r3, #1
    42a2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    42a4:	2000      	movs	r0, #0
    42a6:	f7ff ffd1 	bl	424c <update_cache>
	__asm__ volatile(
    42aa:	f384 8811 	msr	BASEPRI, r4
    42ae:	f3bf 8f6f 	isb	sy
}
    42b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    42b6:	f002 b9d2 	b.w	665e <z_reschedule_unlocked>
    42ba:	bf00      	nop
    42bc:	200004b8 	.word	0x200004b8

000042c0 <z_add_thread_to_ready_q>:
{
    42c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    42c2:	f04f 0320 	mov.w	r3, #32
    42c6:	f3ef 8411 	mrs	r4, BASEPRI
    42ca:	f383 8811 	msr	BASEPRI, r3
    42ce:	f3bf 8f6f 	isb	sy
	return list->head == list;
    42d2:	4a15      	ldr	r2, [pc, #84]	; (4328 <z_add_thread_to_ready_q+0x68>)
    42d4:	4611      	mov	r1, r2
    42d6:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    42da:	428b      	cmp	r3, r1
    42dc:	d01d      	beq.n	431a <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    42de:	b1e3      	cbz	r3, 431a <z_add_thread_to_ready_q+0x5a>
    42e0:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    42e2:	f990 500e 	ldrsb.w	r5, [r0, #14]
    42e6:	f993 700e 	ldrsb.w	r7, [r3, #14]
    42ea:	42af      	cmp	r7, r5
    42ec:	dd10      	ble.n	4310 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
    42ee:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    42f0:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    42f4:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    42f6:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    42f8:	7b43      	ldrb	r3, [r0, #13]
    42fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    42fe:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    4300:	2000      	movs	r0, #0
    4302:	f7ff ffa3 	bl	424c <update_cache>
	__asm__ volatile(
    4306:	f384 8811 	msr	BASEPRI, r4
    430a:	f3bf 8f6f 	isb	sy
}
    430e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    4310:	42b3      	cmp	r3, r6
    4312:	d002      	beq.n	431a <z_add_thread_to_ready_q+0x5a>
    4314:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4316:	2b00      	cmp	r3, #0
    4318:	d1e5      	bne.n	42e6 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    431a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    431c:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    431e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    4320:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
    4322:	6018      	str	r0, [r3, #0]
	list->tail = node;
    4324:	62d0      	str	r0, [r2, #44]	; 0x2c
    4326:	e7e7      	b.n	42f8 <z_add_thread_to_ready_q+0x38>
    4328:	200004b8 	.word	0x200004b8

0000432c <z_move_thread_to_end_of_prio_q>:
{
    432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    432e:	4604      	mov	r4, r0
	__asm__ volatile(
    4330:	f04f 0320 	mov.w	r3, #32
    4334:	f3ef 8711 	mrs	r7, BASEPRI
    4338:	f383 8811 	msr	BASEPRI, r3
    433c:	f3bf 8f6f 	isb	sy
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    4340:	4d19      	ldr	r5, [pc, #100]	; (43a8 <z_move_thread_to_end_of_prio_q+0x7c>)
    4342:	f105 0628 	add.w	r6, r5, #40	; 0x28
    4346:	4601      	mov	r1, r0
    4348:	4630      	mov	r0, r6
    434a:	f7ff ff69 	bl	4220 <z_priq_dumb_remove>
	return list->head == list;
    434e:	6aab      	ldr	r3, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4350:	42b3      	cmp	r3, r6
    4352:	462a      	mov	r2, r5
    4354:	d020      	beq.n	4398 <z_move_thread_to_end_of_prio_q+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4356:	b1fb      	cbz	r3, 4398 <z_move_thread_to_end_of_prio_q+0x6c>
    4358:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    435a:	f994 100e 	ldrsb.w	r1, [r4, #14]
    435e:	f993 500e 	ldrsb.w	r5, [r3, #14]
    4362:	428d      	cmp	r5, r1
    4364:	dd13      	ble.n	438e <z_move_thread_to_end_of_prio_q+0x62>
	node->prev = successor->prev;
    4366:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    4368:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    436c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    436e:	605c      	str	r4, [r3, #4]
    4370:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    4372:	6890      	ldr	r0, [r2, #8]
    4374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4378:	7363      	strb	r3, [r4, #13]
    437a:	1b03      	subs	r3, r0, r4
    437c:	4258      	negs	r0, r3
    437e:	4158      	adcs	r0, r3
    4380:	f7ff ff64 	bl	424c <update_cache>
	__asm__ volatile(
    4384:	f387 8811 	msr	BASEPRI, r7
    4388:	f3bf 8f6f 	isb	sy
}
    438c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    438e:	4283      	cmp	r3, r0
    4390:	d002      	beq.n	4398 <z_move_thread_to_end_of_prio_q+0x6c>
    4392:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4394:	2b00      	cmp	r3, #0
    4396:	d1e2      	bne.n	435e <z_move_thread_to_end_of_prio_q+0x32>
	node->prev = list->tail;
    4398:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    439a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    439c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    439e:	6026      	str	r6, [r4, #0]
	list->tail->next = node;
    43a0:	601c      	str	r4, [r3, #0]
	list->tail = node;
    43a2:	62d4      	str	r4, [r2, #44]	; 0x2c
    43a4:	e7e4      	b.n	4370 <z_move_thread_to_end_of_prio_q+0x44>
    43a6:	bf00      	nop
    43a8:	200004b8 	.word	0x200004b8

000043ac <z_time_slice>:
	if (pending_current == _current) {
    43ac:	4a16      	ldr	r2, [pc, #88]	; (4408 <z_time_slice+0x5c>)
    43ae:	4917      	ldr	r1, [pc, #92]	; (440c <z_time_slice+0x60>)
{
    43b0:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    43b2:	680c      	ldr	r4, [r1, #0]
    43b4:	6893      	ldr	r3, [r2, #8]
    43b6:	42a3      	cmp	r3, r4
    43b8:	4614      	mov	r4, r2
    43ba:	d103      	bne.n	43c4 <z_time_slice+0x18>
}
    43bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			reset_time_slice();
    43c0:	f7ff bed8 	b.w	4174 <reset_time_slice>
	pending_current = NULL;
    43c4:	2500      	movs	r5, #0
    43c6:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
    43c8:	4911      	ldr	r1, [pc, #68]	; (4410 <z_time_slice+0x64>)
    43ca:	6809      	ldr	r1, [r1, #0]
    43cc:	b1c1      	cbz	r1, 4400 <z_time_slice+0x54>
		&& !z_is_thread_timeout_active(t);
    43ce:	89d9      	ldrh	r1, [r3, #14]
    43d0:	297f      	cmp	r1, #127	; 0x7f
    43d2:	d815      	bhi.n	4400 <z_time_slice+0x54>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
    43d4:	490f      	ldr	r1, [pc, #60]	; (4414 <z_time_slice+0x68>)
    43d6:	f993 500e 	ldrsb.w	r5, [r3, #14]
    43da:	6809      	ldr	r1, [r1, #0]
    43dc:	428d      	cmp	r5, r1
    43de:	db0f      	blt.n	4400 <z_time_slice+0x54>
	return thread == _idle_thread;
    43e0:	490d      	ldr	r1, [pc, #52]	; (4418 <z_time_slice+0x6c>)
		&& !is_idle(t)
    43e2:	6809      	ldr	r1, [r1, #0]
    43e4:	428b      	cmp	r3, r1
    43e6:	d00b      	beq.n	4400 <z_time_slice+0x54>
		&& !z_is_thread_timeout_active(t);
    43e8:	6999      	ldr	r1, [r3, #24]
    43ea:	b949      	cbnz	r1, 4400 <z_time_slice+0x54>
		if (ticks >= _current_cpu->slice_ticks) {
    43ec:	6911      	ldr	r1, [r2, #16]
    43ee:	4281      	cmp	r1, r0
    43f0:	dc03      	bgt.n	43fa <z_time_slice+0x4e>
			z_move_thread_to_end_of_prio_q(_current);
    43f2:	4618      	mov	r0, r3
    43f4:	f7ff ff9a 	bl	432c <z_move_thread_to_end_of_prio_q>
    43f8:	e7e0      	b.n	43bc <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
    43fa:	1a09      	subs	r1, r1, r0
    43fc:	6111      	str	r1, [r2, #16]
}
    43fe:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    4400:	2300      	movs	r3, #0
    4402:	6123      	str	r3, [r4, #16]
    4404:	e7fb      	b.n	43fe <z_time_slice+0x52>
    4406:	bf00      	nop
    4408:	200004b8 	.word	0x200004b8
    440c:	200004e8 	.word	0x200004e8
    4410:	200004f0 	.word	0x200004f0
    4414:	200004ec 	.word	0x200004ec
    4418:	0000700c 	.word	0x0000700c

0000441c <z_remove_thread_from_ready_q>:
{
    441c:	b538      	push	{r3, r4, r5, lr}
    441e:	4604      	mov	r4, r0
	__asm__ volatile(
    4420:	f04f 0320 	mov.w	r3, #32
    4424:	f3ef 8511 	mrs	r5, BASEPRI
    4428:	f383 8811 	msr	BASEPRI, r3
    442c:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    4430:	7b43      	ldrb	r3, [r0, #13]
    4432:	065a      	lsls	r2, r3, #25
    4434:	d507      	bpl.n	4446 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    4436:	4601      	mov	r1, r0
    4438:	4809      	ldr	r0, [pc, #36]	; (4460 <z_remove_thread_from_ready_q+0x44>)
    443a:	f7ff fef1 	bl	4220 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    443e:	7b63      	ldrb	r3, [r4, #13]
    4440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    4444:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    4446:	4b07      	ldr	r3, [pc, #28]	; (4464 <z_remove_thread_from_ready_q+0x48>)
    4448:	6898      	ldr	r0, [r3, #8]
    444a:	1b03      	subs	r3, r0, r4
    444c:	4258      	negs	r0, r3
    444e:	4158      	adcs	r0, r3
    4450:	f7ff fefc 	bl	424c <update_cache>
	__asm__ volatile(
    4454:	f385 8811 	msr	BASEPRI, r5
    4458:	f3bf 8f6f 	isb	sy
}
    445c:	bd38      	pop	{r3, r4, r5, pc}
    445e:	bf00      	nop
    4460:	200004e0 	.word	0x200004e0
    4464:	200004b8 	.word	0x200004b8

00004468 <pend>:
{
    4468:	b570      	push	{r4, r5, r6, lr}
    446a:	4604      	mov	r4, r0
    446c:	460d      	mov	r5, r1
    446e:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
    4470:	f7ff ffd4 	bl	441c <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    4474:	7b63      	ldrb	r3, [r4, #13]
    4476:	f043 0302 	orr.w	r3, r3, #2
    447a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    447c:	b17d      	cbz	r5, 449e <pend+0x36>
	return list->head == list;
    447e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    4480:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4482:	429d      	cmp	r5, r3
    4484:	d027      	beq.n	44d6 <pend+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4486:	b333      	cbz	r3, 44d6 <pend+0x6e>
	if (t1->base.prio < t2->base.prio) {
    4488:	f994 200e 	ldrsb.w	r2, [r4, #14]
    448c:	f993 100e 	ldrsb.w	r1, [r3, #14]
    4490:	4291      	cmp	r1, r2
    4492:	dd1a      	ble.n	44ca <pend+0x62>
	node->prev = successor->prev;
    4494:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4496:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    449a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    449c:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
    449e:	1c73      	adds	r3, r6, #1
    44a0:	d020      	beq.n	44e4 <pend+0x7c>
    44a2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    44a6:	f240 30e7 	movw	r0, #999	; 0x3e7
    44aa:	2100      	movs	r1, #0
    44ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    44b0:	fbc5 0106 	smlal	r0, r1, r5, r6
    44b4:	2300      	movs	r3, #0
    44b6:	f7fb fe11 	bl	dc <__aeabi_ldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    44ba:	490b      	ldr	r1, [pc, #44]	; (44e8 <pend+0x80>)
    44bc:	1c42      	adds	r2, r0, #1
    44be:	f104 0018 	add.w	r0, r4, #24
}
    44c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    44c6:	f000 b9ff 	b.w	48c8 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    44ca:	6869      	ldr	r1, [r5, #4]
    44cc:	428b      	cmp	r3, r1
    44ce:	d002      	beq.n	44d6 <pend+0x6e>
    44d0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    44d2:	2b00      	cmp	r3, #0
    44d4:	d1da      	bne.n	448c <pend+0x24>
	node->prev = list->tail;
    44d6:	686b      	ldr	r3, [r5, #4]
    44d8:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    44da:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    44dc:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    44de:	601c      	str	r4, [r3, #0]
	list->tail = node;
    44e0:	606c      	str	r4, [r5, #4]
    44e2:	e7dc      	b.n	449e <pend+0x36>
}
    44e4:	bd70      	pop	{r4, r5, r6, pc}
    44e6:	bf00      	nop
    44e8:	000066bb 	.word	0x000066bb

000044ec <z_pend_curr>:
{
    44ec:	b510      	push	{r4, lr}
    44ee:	460c      	mov	r4, r1
    44f0:	4611      	mov	r1, r2
	pending_current = _current;
    44f2:	4a06      	ldr	r2, [pc, #24]	; (450c <z_pend_curr+0x20>)
    44f4:	6890      	ldr	r0, [r2, #8]
    44f6:	4a06      	ldr	r2, [pc, #24]	; (4510 <z_pend_curr+0x24>)
    44f8:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    44fa:	461a      	mov	r2, r3
    44fc:	f7ff ffb4 	bl	4468 <pend>
    4500:	4620      	mov	r0, r4
}
    4502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4506:	f7fe b81b 	b.w	2540 <__swap>
    450a:	bf00      	nop
    450c:	200004b8 	.word	0x200004b8
    4510:	200004e8 	.word	0x200004e8

00004514 <z_tick_sleep.part.17>:

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

static s32_t z_tick_sleep(s32_t ticks)
    4514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
    4516:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
    4518:	f002 f9c3 	bl	68a2 <z_tick_get_32>
    451c:	1834      	adds	r4, r6, r0
	__asm__ volatile(
    451e:	f04f 0320 	mov.w	r3, #32
    4522:	f3ef 8711 	mrs	r7, BASEPRI
    4526:	f383 8811 	msr	BASEPRI, r3
    452a:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    452e:	4d0d      	ldr	r5, [pc, #52]	; (4564 <z_tick_sleep.part.17+0x50>)
    4530:	4b0d      	ldr	r3, [pc, #52]	; (4568 <z_tick_sleep.part.17+0x54>)
    4532:	68a8      	ldr	r0, [r5, #8]
    4534:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    4536:	f7ff ff71 	bl	441c <z_remove_thread_from_ready_q>
    453a:	68a8      	ldr	r0, [r5, #8]
    453c:	490b      	ldr	r1, [pc, #44]	; (456c <z_tick_sleep.part.17+0x58>)
    453e:	4632      	mov	r2, r6
    4540:	3018      	adds	r0, #24
    4542:	f000 f9c1 	bl	48c8 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
    4546:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4548:	7b53      	ldrb	r3, [r2, #13]
    454a:	f043 0310 	orr.w	r3, r3, #16
    454e:	7353      	strb	r3, [r2, #13]
    4550:	4638      	mov	r0, r7
    4552:	f7fd fff5 	bl	2540 <__swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    4556:	f002 f9a4 	bl	68a2 <z_tick_get_32>
    455a:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    455c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    4560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4562:	bf00      	nop
    4564:	200004b8 	.word	0x200004b8
    4568:	200004e8 	.word	0x200004e8
    456c:	000066bb 	.word	0x000066bb

00004570 <z_thread_priority_set>:
{
    4570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4574:	4604      	mov	r4, r0
    4576:	f04f 0320 	mov.w	r3, #32
    457a:	f3ef 8911 	mrs	r9, BASEPRI
    457e:	f383 8811 	msr	BASEPRI, r3
    4582:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
    4586:	f002 f820 	bl	65ca <z_is_thread_ready>
		if (need_sched) {
    458a:	b24e      	sxtb	r6, r1
    458c:	4680      	mov	r8, r0
    458e:	2800      	cmp	r0, #0
    4590:	d034      	beq.n	45fc <z_thread_priority_set+0x8c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    4592:	4d1c      	ldr	r5, [pc, #112]	; (4604 <z_thread_priority_set+0x94>)
    4594:	f105 0728 	add.w	r7, r5, #40	; 0x28
    4598:	4621      	mov	r1, r4
    459a:	4638      	mov	r0, r7
    459c:	f7ff fe40 	bl	4220 <z_priq_dumb_remove>
	return list->head == list;
    45a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
    45a2:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    45a4:	42bb      	cmp	r3, r7
    45a6:	462a      	mov	r2, r5
    45a8:	d021      	beq.n	45ee <z_thread_priority_set+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    45aa:	b303      	cbz	r3, 45ee <z_thread_priority_set+0x7e>
    45ac:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    45ae:	f993 000e 	ldrsb.w	r0, [r3, #14]
    45b2:	42b0      	cmp	r0, r6
    45b4:	dd16      	ble.n	45e4 <z_thread_priority_set+0x74>
	node->prev = successor->prev;
    45b6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    45b8:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    45bc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    45be:	605c      	str	r4, [r3, #4]
			update_cache(1);
    45c0:	2001      	movs	r0, #1
    45c2:	f7ff fe43 	bl	424c <update_cache>
	__asm__ volatile(
    45c6:	f389 8811 	msr	BASEPRI, r9
    45ca:	f3bf 8f6f 	isb	sy
	if (need_sched && _current->base.sched_locked == 0) {
    45ce:	f1b8 0f00 	cmp.w	r8, #0
    45d2:	d015      	beq.n	4600 <z_thread_priority_set+0x90>
    45d4:	4b0b      	ldr	r3, [pc, #44]	; (4604 <z_thread_priority_set+0x94>)
    45d6:	689b      	ldr	r3, [r3, #8]
    45d8:	7bdb      	ldrb	r3, [r3, #15]
    45da:	b98b      	cbnz	r3, 4600 <z_thread_priority_set+0x90>
}
    45dc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		z_reschedule_unlocked();
    45e0:	f002 b83d 	b.w	665e <z_reschedule_unlocked>
	return (node == list->tail) ? NULL : node->next;
    45e4:	4299      	cmp	r1, r3
    45e6:	d002      	beq.n	45ee <z_thread_priority_set+0x7e>
    45e8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    45ea:	2b00      	cmp	r3, #0
    45ec:	d1df      	bne.n	45ae <z_thread_priority_set+0x3e>
	node->prev = list->tail;
    45ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    45f0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    45f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    45f4:	6027      	str	r7, [r4, #0]
	list->tail->next = node;
    45f6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    45f8:	62d4      	str	r4, [r2, #44]	; 0x2c
    45fa:	e7e1      	b.n	45c0 <z_thread_priority_set+0x50>
			thread->base.prio = prio;
    45fc:	73a6      	strb	r6, [r4, #14]
    45fe:	e7e2      	b.n	45c6 <z_thread_priority_set+0x56>
}
    4600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4604:	200004b8 	.word	0x200004b8

00004608 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    4608:	4b04      	ldr	r3, [pc, #16]	; (461c <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    460a:	2100      	movs	r1, #0
    460c:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    4610:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    4614:	4608      	mov	r0, r1
    4616:	f7ff bdc3 	b.w	41a0 <k_sched_time_slice_set>
    461a:	bf00      	nop
    461c:	200004b8 	.word	0x200004b8

00004620 <z_impl_k_yield>:
{
    4620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!is_idle(_current)) {
    4622:	4c22      	ldr	r4, [pc, #136]	; (46ac <z_impl_k_yield+0x8c>)
    4624:	4b22      	ldr	r3, [pc, #136]	; (46b0 <z_impl_k_yield+0x90>)
    4626:	68a2      	ldr	r2, [r4, #8]
    4628:	681b      	ldr	r3, [r3, #0]
    462a:	429a      	cmp	r2, r3
    462c:	d025      	beq.n	467a <z_impl_k_yield+0x5a>
	__asm__ volatile(
    462e:	f04f 0320 	mov.w	r3, #32
    4632:	f3ef 8611 	mrs	r6, BASEPRI
    4636:	f383 8811 	msr	BASEPRI, r3
    463a:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    463e:	f104 0528 	add.w	r5, r4, #40	; 0x28
    4642:	68a1      	ldr	r1, [r4, #8]
    4644:	4628      	mov	r0, r5
    4646:	f7ff fdeb 	bl	4220 <z_priq_dumb_remove>
	return list->head == list;
    464a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
				_priq_run_add(&_kernel.ready_q.runq,
    464c:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    464e:	42ab      	cmp	r3, r5
    4650:	d024      	beq.n	469c <z_impl_k_yield+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4652:	b31b      	cbz	r3, 469c <z_impl_k_yield+0x7c>
    4654:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    4656:	f992 000e 	ldrsb.w	r0, [r2, #14]
    465a:	f993 700e 	ldrsb.w	r7, [r3, #14]
    465e:	4287      	cmp	r7, r0
    4660:	dd17      	ble.n	4692 <z_impl_k_yield+0x72>
	node->prev = successor->prev;
    4662:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    4664:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    4668:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    466a:	605a      	str	r2, [r3, #4]
			update_cache(1);
    466c:	2001      	movs	r0, #1
    466e:	f7ff fded 	bl	424c <update_cache>
	__asm__ volatile(
    4672:	f386 8811 	msr	BASEPRI, r6
    4676:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    467a:	f04f 0320 	mov.w	r3, #32
    467e:	f3ef 8011 	mrs	r0, BASEPRI
    4682:	f383 8811 	msr	BASEPRI, r3
    4686:	f3bf 8f6f 	isb	sy
}
    468a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    468e:	f7fd bf57 	b.w	2540 <__swap>
	return (node == list->tail) ? NULL : node->next;
    4692:	4299      	cmp	r1, r3
    4694:	d002      	beq.n	469c <z_impl_k_yield+0x7c>
    4696:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4698:	2b00      	cmp	r3, #0
    469a:	d1de      	bne.n	465a <z_impl_k_yield+0x3a>
	node->prev = list->tail;
    469c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    469e:	6053      	str	r3, [r2, #4]
	list->tail->next = node;
    46a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	node->next = list;
    46a2:	6015      	str	r5, [r2, #0]
	list->tail->next = node;
    46a4:	601a      	str	r2, [r3, #0]
	list->tail = node;
    46a6:	62e2      	str	r2, [r4, #44]	; 0x2c
    46a8:	e7e0      	b.n	466c <z_impl_k_yield+0x4c>
    46aa:	bf00      	nop
    46ac:	200004b8 	.word	0x200004b8
    46b0:	0000700c 	.word	0x0000700c

000046b4 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    46b4:	4b01      	ldr	r3, [pc, #4]	; (46bc <z_impl_k_current_get+0x8>)
    46b6:	6898      	ldr	r0, [r3, #8]
    46b8:	4770      	bx	lr
    46ba:	bf00      	nop
    46bc:	200004b8 	.word	0x200004b8

000046c0 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    46c0:	b510      	push	{r4, lr}
    46c2:	4602      	mov	r2, r0
    46c4:	f04f 0320 	mov.w	r3, #32
    46c8:	f3ef 8411 	mrs	r4, BASEPRI
    46cc:	f383 8811 	msr	BASEPRI, r3
    46d0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    46d4:	7b43      	ldrb	r3, [r0, #13]
    46d6:	0759      	lsls	r1, r3, #29
    46d8:	d404      	bmi.n	46e4 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
    46da:	f384 8811 	msr	BASEPRI, r4
    46de:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    46e2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    46e4:	f023 0304 	bic.w	r3, r3, #4
    46e8:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
    46ea:	f002 f863 	bl	67b4 <z_is_thread_ready>
    46ee:	b110      	cbz	r0, 46f6 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    46f0:	4610      	mov	r0, r2
    46f2:	f7ff fde5 	bl	42c0 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    46f6:	4621      	mov	r1, r4
    46f8:	4802      	ldr	r0, [pc, #8]	; (4704 <z_impl_k_thread_start+0x44>)
}
    46fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    46fe:	f001 bf8f 	b.w	6620 <z_reschedule>
    4702:	bf00      	nop
    4704:	20000564 	.word	0x20000564

00004708 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    4708:	b530      	push	{r4, r5, lr}
    470a:	b087      	sub	sp, #28
    470c:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    470e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4710:	9504      	str	r5, [sp, #16]
    4712:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4714:	9503      	str	r5, [sp, #12]
    4716:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    4718:	9502      	str	r5, [sp, #8]
    471a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    471c:	9501      	str	r5, [sp, #4]
    471e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4720:	9500      	str	r5, [sp, #0]
    4722:	f7fd ffa1 	bl	2668 <z_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    4726:	4b03      	ldr	r3, [pc, #12]	; (4734 <z_setup_new_thread+0x2c>)
    4728:	689b      	ldr	r3, [r3, #8]
    472a:	b103      	cbz	r3, 472e <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    472c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    472e:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    4730:	b007      	add	sp, #28
    4732:	bd30      	pop	{r4, r5, pc}
    4734:	200004b8 	.word	0x200004b8

00004738 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    4738:	b570      	push	{r4, r5, r6, lr}
    473a:	b086      	sub	sp, #24
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    473c:	2600      	movs	r6, #0
    473e:	9605      	str	r6, [sp, #20]
    4740:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4742:	9604      	str	r6, [sp, #16]
    4744:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    4746:	9603      	str	r6, [sp, #12]
    4748:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    474a:	9602      	str	r6, [sp, #8]
    474c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
    474e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4750:	9601      	str	r6, [sp, #4]
    4752:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    4754:	9600      	str	r6, [sp, #0]
{
    4756:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4758:	f7ff ffd6 	bl	4708 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
    475c:	1c6b      	adds	r3, r5, #1
    475e:	d003      	beq.n	4768 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
    4760:	b92d      	cbnz	r5, 476e <z_impl_k_thread_create+0x36>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
    4762:	4620      	mov	r0, r4
    4764:	f7ff ffac 	bl	46c0 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
    4768:	4620      	mov	r0, r4
    476a:	b006      	add	sp, #24
    476c:	bd70      	pop	{r4, r5, r6, pc}
    476e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    4772:	f240 30e7 	movw	r0, #999	; 0x3e7
    4776:	2100      	movs	r1, #0
    4778:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    477c:	2300      	movs	r3, #0
    477e:	fbc6 0105 	smlal	r0, r1, r6, r5
    4782:	f7fb fcab 	bl	dc <__aeabi_ldivmod>
    4786:	4903      	ldr	r1, [pc, #12]	; (4794 <z_impl_k_thread_create+0x5c>)
    4788:	1c42      	adds	r2, r0, #1
    478a:	f104 0018 	add.w	r0, r4, #24
    478e:	f000 f89b 	bl	48c8 <z_add_timeout>
    4792:	e7e9      	b.n	4768 <z_impl_k_thread_create+0x30>
    4794:	000066bb 	.word	0x000066bb

00004798 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    4798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    479c:	4e28      	ldr	r6, [pc, #160]	; (4840 <z_init_static_threads+0xa8>)
    479e:	4d29      	ldr	r5, [pc, #164]	; (4844 <z_init_static_threads+0xac>)
{
    47a0:	b087      	sub	sp, #28
    47a2:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    47a4:	42b5      	cmp	r5, r6
    47a6:	f105 0430 	add.w	r4, r5, #48	; 0x30
    47aa:	d310      	bcc.n	47ce <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    47ac:	f7ff fd24 	bl	41f8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    47b0:	4c24      	ldr	r4, [pc, #144]	; (4844 <z_init_static_threads+0xac>)
    47b2:	f8df a094 	ldr.w	sl, [pc, #148]	; 4848 <z_init_static_threads+0xb0>
    47b6:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    47ba:	f240 36e7 	movw	r6, #999	; 0x3e7
    47be:	2700      	movs	r7, #0
    47c0:	4544      	cmp	r4, r8
    47c2:	d321      	bcc.n	4808 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    47c4:	b007      	add	sp, #28
    47c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    47ca:	f7ff bd5d 	b.w	4288 <k_sched_unlock>
		z_setup_new_thread(
    47ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
    47d2:	9305      	str	r3, [sp, #20]
    47d4:	f854 3c10 	ldr.w	r3, [r4, #-16]
    47d8:	9304      	str	r3, [sp, #16]
    47da:	f854 3c14 	ldr.w	r3, [r4, #-20]
    47de:	9303      	str	r3, [sp, #12]
    47e0:	f854 3c18 	ldr.w	r3, [r4, #-24]
    47e4:	9302      	str	r3, [sp, #8]
    47e6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    47ea:	9301      	str	r3, [sp, #4]
    47ec:	f854 3c20 	ldr.w	r3, [r4, #-32]
    47f0:	9300      	str	r3, [sp, #0]
    47f2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    47f6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    47fa:	f7ff ff85 	bl	4708 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    47fe:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4802:	64dd      	str	r5, [r3, #76]	; 0x4c
    4804:	4625      	mov	r5, r4
    4806:	e7cd      	b.n	47a4 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    4808:	6a61      	ldr	r1, [r4, #36]	; 0x24
    480a:	1c4b      	adds	r3, r1, #1
    480c:	d004      	beq.n	4818 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
    480e:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    4810:	b921      	cbnz	r1, 481c <z_init_static_threads+0x84>
    4812:	4628      	mov	r0, r5
    4814:	f7ff ff54 	bl	46c0 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4818:	3430      	adds	r4, #48	; 0x30
    481a:	e7d1      	b.n	47c0 <z_init_static_threads+0x28>
    481c:	46b3      	mov	fp, r6
    481e:	46bc      	mov	ip, r7
    4820:	fbc9 bc01 	smlal	fp, ip, r9, r1
    4824:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4828:	2300      	movs	r3, #0
    482a:	4658      	mov	r0, fp
    482c:	4661      	mov	r1, ip
    482e:	f7fb fc55 	bl	dc <__aeabi_ldivmod>
    4832:	4651      	mov	r1, sl
    4834:	1c42      	adds	r2, r0, #1
    4836:	f105 0018 	add.w	r0, r5, #24
    483a:	f000 f845 	bl	48c8 <z_add_timeout>
    483e:	e7eb      	b.n	4818 <z_init_static_threads+0x80>
    4840:	20001db0 	.word	0x20001db0
    4844:	20001db0 	.word	0x20001db0
    4848:	000066bb 	.word	0x000066bb

0000484c <sys_kernel_version_get>:
 * @return kernel version
 */
u32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
    484c:	4800      	ldr	r0, [pc, #0]	; (4850 <sys_kernel_version_get+0x4>)
    484e:	4770      	bx	lr
    4850:	010e6300 	.word	0x010e6300

00004854 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    4854:	4b03      	ldr	r3, [pc, #12]	; (4864 <elapsed+0x10>)
    4856:	681b      	ldr	r3, [r3, #0]
    4858:	b90b      	cbnz	r3, 485e <elapsed+0xa>
    485a:	f7fd be2f 	b.w	24bc <z_clock_elapsed>
}
    485e:	2000      	movs	r0, #0
    4860:	4770      	bx	lr
    4862:	bf00      	nop
    4864:	200004f4 	.word	0x200004f4

00004868 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4868:	6803      	ldr	r3, [r0, #0]
    486a:	b140      	cbz	r0, 487e <remove_timeout+0x16>
    486c:	4a07      	ldr	r2, [pc, #28]	; (488c <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    486e:	6852      	ldr	r2, [r2, #4]
    4870:	4290      	cmp	r0, r2
    4872:	d004      	beq.n	487e <remove_timeout+0x16>
	if (next(t) != NULL) {
    4874:	b11b      	cbz	r3, 487e <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    4876:	689a      	ldr	r2, [r3, #8]
    4878:	6881      	ldr	r1, [r0, #8]
    487a:	440a      	add	r2, r1
    487c:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    487e:	6842      	ldr	r2, [r0, #4]
    4880:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    4882:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4884:	2300      	movs	r3, #0
	node->prev = NULL;
    4886:	e9c0 3300 	strd	r3, r3, [r0]
}
    488a:	4770      	bx	lr
    488c:	20001d30 	.word	0x20001d30

00004890 <next_timeout>:
	return list->head == list;
    4890:	4b0b      	ldr	r3, [pc, #44]	; (48c0 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    4892:	b510      	push	{r4, lr}
    4894:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4896:	429c      	cmp	r4, r3
    4898:	bf08      	it	eq
    489a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    489c:	f7ff ffda 	bl	4854 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    48a0:	b154      	cbz	r4, 48b8 <next_timeout+0x28>
    48a2:	68a3      	ldr	r3, [r4, #8]
    48a4:	1a18      	subs	r0, r3, r0
    48a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    48aa:	4b06      	ldr	r3, [pc, #24]	; (48c4 <next_timeout+0x34>)
    48ac:	691b      	ldr	r3, [r3, #16]
    48ae:	b113      	cbz	r3, 48b6 <next_timeout+0x26>
    48b0:	4298      	cmp	r0, r3
    48b2:	bfa8      	it	ge
    48b4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    48b6:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    48b8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    48bc:	e7f5      	b.n	48aa <next_timeout+0x1a>
    48be:	bf00      	nop
    48c0:	20001d30 	.word	0x20001d30
    48c4:	200004b8 	.word	0x200004b8

000048c8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    48c8:	b570      	push	{r4, r5, r6, lr}
    48ca:	4604      	mov	r4, r0
    48cc:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    48ce:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    48d0:	f04f 0320 	mov.w	r3, #32
    48d4:	f3ef 8511 	mrs	r5, BASEPRI
    48d8:	f383 8811 	msr	BASEPRI, r3
    48dc:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    48e0:	f7ff ffb8 	bl	4854 <elapsed>
	return list->head == list;
    48e4:	4b18      	ldr	r3, [pc, #96]	; (4948 <z_add_timeout+0x80>)
    48e6:	681a      	ldr	r2, [r3, #0]
    48e8:	2e01      	cmp	r6, #1
    48ea:	bfac      	ite	ge
    48ec:	1980      	addge	r0, r0, r6
    48ee:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
    48f0:	429a      	cmp	r2, r3
    48f2:	60a0      	str	r0, [r4, #8]
    48f4:	d001      	beq.n	48fa <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    48f6:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    48f8:	b932      	cbnz	r2, 4908 <z_add_timeout+0x40>
	node->prev = list->tail;
    48fa:	685a      	ldr	r2, [r3, #4]
    48fc:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    48fe:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    4900:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
    4902:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4904:	605c      	str	r4, [r3, #4]
    4906:	e00a      	b.n	491e <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    4908:	6890      	ldr	r0, [r2, #8]
    490a:	68a1      	ldr	r1, [r4, #8]
    490c:	4288      	cmp	r0, r1
    490e:	dd15      	ble.n	493c <z_add_timeout+0x74>
				t->dticks -= to->dticks;
    4910:	1a41      	subs	r1, r0, r1
    4912:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    4914:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    4916:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    491a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    491c:	6054      	str	r4, [r2, #4]
	return list->head == list;
    491e:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4920:	429a      	cmp	r2, r3
    4922:	d006      	beq.n	4932 <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4924:	4294      	cmp	r4, r2
    4926:	d104      	bne.n	4932 <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
    4928:	f7ff ffb2 	bl	4890 <next_timeout>
    492c:	2100      	movs	r1, #0
    492e:	f7fd fd77 	bl	2420 <z_clock_set_timeout>
	__asm__ volatile(
    4932:	f385 8811 	msr	BASEPRI, r5
    4936:	f3bf 8f6f 	isb	sy
		}
	}
}
    493a:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    493c:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    493e:	42b2      	cmp	r2, r6
    4940:	60a1      	str	r1, [r4, #8]
    4942:	d0da      	beq.n	48fa <z_add_timeout+0x32>
    4944:	6812      	ldr	r2, [r2, #0]
    4946:	e7d7      	b.n	48f8 <z_add_timeout+0x30>
    4948:	20001d30 	.word	0x20001d30

0000494c <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    494c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    4950:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4952:	f7ff fd2b 	bl	43ac <z_time_slice>
	__asm__ volatile(
    4956:	f04f 0320 	mov.w	r3, #32
    495a:	f3ef 8511 	mrs	r5, BASEPRI
    495e:	f383 8811 	msr	BASEPRI, r3
    4962:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    4966:	4e21      	ldr	r6, [pc, #132]	; (49ec <z_clock_announce+0xa0>)
    4968:	4f21      	ldr	r7, [pc, #132]	; (49f0 <z_clock_announce+0xa4>)
	return list->head == list;
    496a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 49f4 <z_clock_announce+0xa8>
    496e:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    4970:	46b8      	mov	r8, r7
    4972:	f8d9 4000 	ldr.w	r4, [r9]
    4976:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4978:	454c      	cmp	r4, r9
    497a:	e9d7 bc00 	ldrd	fp, ip, [r7]
    497e:	d005      	beq.n	498c <z_clock_announce+0x40>
    4980:	b124      	cbz	r4, 498c <z_clock_announce+0x40>
    4982:	68a3      	ldr	r3, [r4, #8]
    4984:	4293      	cmp	r3, r2
    4986:	dd14      	ble.n	49b2 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4988:	1a9b      	subs	r3, r3, r2
    498a:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
    498c:	eb1b 0002 	adds.w	r0, fp, r2
    4990:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
    4994:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    4996:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    499a:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    499c:	f7ff ff78 	bl	4890 <next_timeout>
    49a0:	4621      	mov	r1, r4
    49a2:	f7fd fd3d 	bl	2420 <z_clock_set_timeout>
	__asm__ volatile(
    49a6:	f385 8811 	msr	BASEPRI, r5
    49aa:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    49ae:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    49b2:	eb1b 0003 	adds.w	r0, fp, r3
    49b6:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    49ba:	1ad3      	subs	r3, r2, r3
    49bc:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    49be:	2300      	movs	r3, #0
		curr_tick += dt;
    49c0:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    49c4:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    49c6:	4620      	mov	r0, r4
    49c8:	f7ff ff4e 	bl	4868 <remove_timeout>
    49cc:	f385 8811 	msr	BASEPRI, r5
    49d0:	f3bf 8f6f 	isb	sy
		t->fn(t);
    49d4:	68e3      	ldr	r3, [r4, #12]
    49d6:	4798      	blx	r3
	__asm__ volatile(
    49d8:	f04f 0320 	mov.w	r3, #32
    49dc:	f3ef 8511 	mrs	r5, BASEPRI
    49e0:	f383 8811 	msr	BASEPRI, r3
    49e4:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    49e8:	e7c3      	b.n	4972 <z_clock_announce+0x26>
    49ea:	bf00      	nop
    49ec:	200004f4 	.word	0x200004f4
    49f0:	20000000 	.word	0x20000000
    49f4:	20001d30 	.word	0x20001d30

000049f8 <z_tick_get>:

s64_t z_tick_get(void)
{
    49f8:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
    49fc:	f04f 0320 	mov.w	r3, #32
    4a00:	f3ef 8411 	mrs	r4, BASEPRI
    4a04:	f383 8811 	msr	BASEPRI, r3
    4a08:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    4a0c:	f7fd fd56 	bl	24bc <z_clock_elapsed>
    4a10:	4b07      	ldr	r3, [pc, #28]	; (4a30 <z_tick_get+0x38>)
    4a12:	e9d3 2300 	ldrd	r2, r3, [r3]
    4a16:	eb12 0b00 	adds.w	fp, r2, r0
    4a1a:	f143 0c00 	adc.w	ip, r3, #0
    4a1e:	4658      	mov	r0, fp
    4a20:	4661      	mov	r1, ip
	__asm__ volatile(
    4a22:	f384 8811 	msr	BASEPRI, r4
    4a26:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    4a2a:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
    4a2e:	bf00      	nop
    4a30:	20000000 	.word	0x20000000

00004a34 <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
    4a34:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
    4a36:	7b44      	ldrb	r4, [r0, #13]
    4a38:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
    4a3c:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
    4a3e:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
    4a40:	f362 0141 	bfi	r1, r2, #1, #1
    4a44:	7381      	strb	r1, [r0, #14]
	event->poller = NULL;
    4a46:	2200      	movs	r2, #0
	event->state = K_POLL_STATE_NOT_READY;
    4a48:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
    4a4a:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
    4a4c:	4a02      	ldr	r2, [pc, #8]	; (4a58 <k_poll_event_init+0x24>)
    4a4e:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
    4a50:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
    4a54:	bd10      	pop	{r4, pc}
    4a56:	bf00      	nop
    4a58:	00020fff 	.word	0x00020fff

00004a5c <z_impl_k_poll>:
	event->poller = NULL;
	event->state |= state;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
    4a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, rc;
	k_spinlock_key_t key;

	struct _poller poller = { .thread = _current, .is_polling = true, };
    4a60:	4b49      	ldr	r3, [pc, #292]	; (4b88 <z_impl_k_poll+0x12c>)
{
    4a62:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = true, };
    4a64:	689b      	ldr	r3, [r3, #8]
    4a66:	9300      	str	r3, [sp, #0]

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
    4a68:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = true, };
    4a6a:	2301      	movs	r3, #1
{
    4a6c:	4607      	mov	r7, r0
    4a6e:	468a      	mov	sl, r1
    4a70:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = true, };
    4a72:	f88d 3004 	strb.w	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
    4a76:	4604      	mov	r4, r0
	int last_registered = -1, rc;
    4a78:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
    4a7c:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
    4a7e:	4556      	cmp	r6, sl
    4a80:	db17      	blt.n	4ab2 <z_impl_k_poll+0x56>
	__asm__ volatile(
    4a82:	f04f 0320 	mov.w	r3, #32
    4a86:	f3ef 8611 	mrs	r6, BASEPRI
    4a8a:	f383 8811 	msr	BASEPRI, r3
    4a8e:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
    4a92:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4a96:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    4a9a:	2b00      	cmp	r3, #0
    4a9c:	d152      	bne.n	4b44 <z_impl_k_poll+0xe8>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, last_registered, key);
    4a9e:	4632      	mov	r2, r6
    4aa0:	4629      	mov	r1, r5
    4aa2:	4638      	mov	r0, r7
    4aa4:	f001 ff0c 	bl	68c0 <clear_event_registrations>
	__asm__ volatile(
    4aa8:	f386 8811 	msr	BASEPRI, r6
    4aac:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
    4ab0:	e054      	b.n	4b5c <z_impl_k_poll+0x100>
	__asm__ volatile(
    4ab2:	f04f 0320 	mov.w	r3, #32
    4ab6:	f3ef 8b11 	mrs	fp, BASEPRI
    4aba:	f383 8811 	msr	BASEPRI, r3
    4abe:	f3bf 8f6f 	isb	sy
	switch (event->type) {
    4ac2:	7b63      	ldrb	r3, [r4, #13]
    4ac4:	f003 030f 	and.w	r3, r3, #15
    4ac8:	2b02      	cmp	r3, #2
    4aca:	d003      	beq.n	4ad4 <z_impl_k_poll+0x78>
    4acc:	2b04      	cmp	r3, #4
    4ace:	d004      	beq.n	4ada <z_impl_k_poll+0x7e>
    4ad0:	2b01      	cmp	r3, #1
    4ad2:	d117      	bne.n	4b04 <z_impl_k_poll+0xa8>
		if (event->signal->signaled != 0U) {
    4ad4:	6922      	ldr	r2, [r4, #16]
    4ad6:	6892      	ldr	r2, [r2, #8]
    4ad8:	e001      	b.n	4ade <z_impl_k_poll+0x82>
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
    4ada:	6922      	ldr	r2, [r4, #16]
		if (!k_queue_is_empty(event->queue)) {
    4adc:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
    4ade:	b18a      	cbz	r2, 4b04 <z_impl_k_poll+0xa8>
	event->state |= state;
    4ae0:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
    4ae2:	f8c4 9008 	str.w	r9, [r4, #8]
	event->state |= state;
    4ae6:	f3c2 3104 	ubfx	r1, r2, #12, #5
    4aea:	430b      	orrs	r3, r1
    4aec:	f363 3210 	bfi	r2, r3, #12, #5
    4af0:	60e2      	str	r2, [r4, #12]
			poller.is_polling = false;
    4af2:	f88d 9004 	strb.w	r9, [sp, #4]
	__asm__ volatile(
    4af6:	f38b 8811 	msr	BASEPRI, fp
    4afa:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
    4afe:	3601      	adds	r6, #1
    4b00:	3414      	adds	r4, #20
    4b02:	e7bc      	b.n	4a7e <z_impl_k_poll+0x22>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
    4b04:	f1b8 0f00 	cmp.w	r8, #0
    4b08:	d0f5      	beq.n	4af6 <z_impl_k_poll+0x9a>
    4b0a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    4b0e:	2a00      	cmp	r2, #0
    4b10:	d0f1      	beq.n	4af6 <z_impl_k_poll+0x9a>
	switch (event->type) {
    4b12:	2b02      	cmp	r3, #2
    4b14:	d007      	beq.n	4b26 <z_impl_k_poll+0xca>
    4b16:	2b04      	cmp	r3, #4
    4b18:	d00f      	beq.n	4b3a <z_impl_k_poll+0xde>
    4b1a:	2b01      	cmp	r3, #1
    4b1c:	d109      	bne.n	4b32 <z_impl_k_poll+0xd6>
		add_event(&event->signal->poll_events, event, poller);
    4b1e:	466a      	mov	r2, sp
    4b20:	4621      	mov	r1, r4
    4b22:	6920      	ldr	r0, [r4, #16]
    4b24:	e003      	b.n	4b2e <z_impl_k_poll+0xd2>
		add_event(&event->sem->poll_events, event, poller);
    4b26:	6920      	ldr	r0, [r4, #16]
    4b28:	466a      	mov	r2, sp
    4b2a:	4621      	mov	r1, r4
    4b2c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
    4b2e:	f001 ff1d 	bl	696c <add_event>
	event->poller = poller;
    4b32:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
    4b36:	3501      	adds	r5, #1
    4b38:	e7dd      	b.n	4af6 <z_impl_k_poll+0x9a>
		add_event(&event->queue->poll_events, event, poller);
    4b3a:	6920      	ldr	r0, [r4, #16]
    4b3c:	466a      	mov	r2, sp
    4b3e:	4621      	mov	r1, r4
    4b40:	3008      	adds	r0, #8
    4b42:	e7f4      	b.n	4b2e <z_impl_k_poll+0xd2>
	poller.is_polling = false;
    4b44:	2300      	movs	r3, #0
    4b46:	f88d 3004 	strb.w	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
    4b4a:	f1b8 0f00 	cmp.w	r8, #0
    4b4e:	d109      	bne.n	4b64 <z_impl_k_poll+0x108>
    4b50:	f386 8811 	msr	BASEPRI, r6
    4b54:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    4b58:	f06f 040a 	mvn.w	r4, #10
}
    4b5c:	4620      	mov	r0, r4
    4b5e:	b005      	add	sp, #20
    4b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
    4b64:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    4b66:	4643      	mov	r3, r8
    4b68:	4631      	mov	r1, r6
    4b6a:	4808      	ldr	r0, [pc, #32]	; (4b8c <z_impl_k_poll+0x130>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
    4b6c:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    4b70:	f7ff fcbc 	bl	44ec <z_pend_curr>
    4b74:	4604      	mov	r4, r0
	__asm__ volatile(
    4b76:	f04f 0320 	mov.w	r3, #32
    4b7a:	f3ef 8611 	mrs	r6, BASEPRI
    4b7e:	f383 8811 	msr	BASEPRI, r3
    4b82:	f3bf 8f6f 	isb	sy
    4b86:	e78a      	b.n	4a9e <z_impl_k_poll+0x42>
    4b88:	200004b8 	.word	0x200004b8
    4b8c:	20000564 	.word	0x20000564

00004b90 <z_impl_k_poll_signal_raise>:
	return 0;
}
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
    4b90:	b538      	push	{r3, r4, r5, lr}
    4b92:	f04f 0320 	mov.w	r3, #32
    4b96:	f3ef 8511 	mrs	r5, BASEPRI
    4b9a:	f383 8811 	msr	BASEPRI, r3
    4b9e:	f3bf 8f6f 	isb	sy
	return list->head == list;
    4ba2:	6803      	ldr	r3, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
    4ba4:	60c1      	str	r1, [r0, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    4ba6:	4298      	cmp	r0, r3
	signal->signaled = 1U;
    4ba8:	f04f 0101 	mov.w	r1, #1
    4bac:	6081      	str	r1, [r0, #8]
    4bae:	d106      	bne.n	4bbe <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    4bb0:	f385 8811 	msr	BASEPRI, r5
    4bb4:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
    4bb8:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
    4bba:	4620      	mov	r0, r4
    4bbc:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
    4bbe:	e9d3 2000 	ldrd	r2, r0, [r3]
    4bc2:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
    4bc4:	6050      	str	r0, [r2, #4]
	node->next = NULL;
    4bc6:	2200      	movs	r2, #0
	node->prev = NULL;
    4bc8:	e9c3 2200 	strd	r2, r2, [r3]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    4bcc:	4618      	mov	r0, r3
    4bce:	f001 fea1 	bl	6914 <signal_poll_event>
	z_reschedule(&lock, key);
    4bd2:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    4bd4:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    4bd6:	4802      	ldr	r0, [pc, #8]	; (4be0 <z_impl_k_poll_signal_raise+0x50>)
    4bd8:	f001 fd22 	bl	6620 <z_reschedule>
	return rc;
    4bdc:	e7ed      	b.n	4bba <z_impl_k_poll_signal_raise+0x2a>
    4bde:	bf00      	nop
    4be0:	20000564 	.word	0x20000564

00004be4 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    4be4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    4be6:	4c07      	ldr	r4, [pc, #28]	; (4c04 <init_static_pools+0x20>)
    4be8:	4d07      	ldr	r5, [pc, #28]	; (4c08 <init_static_pools+0x24>)
    4bea:	42ac      	cmp	r4, r5
    4bec:	d301      	bcc.n	4bf2 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    4bee:	2000      	movs	r0, #0
    4bf0:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    4bf2:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    4bf6:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
    4bf8:	e9c4 3305 	strd	r3, r3, [r4, #20]
    4bfc:	f000 f837 	bl	4c6e <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    4c00:	341c      	adds	r4, #28
    4c02:	e7f2      	b.n	4bea <init_static_pools+0x6>
    4c04:	20001db0 	.word	0x20001db0
    4c08:	20001db0 	.word	0x20001db0

00004c0c <main>:
#define SLEEP_TIME	3000



void main(void)
{
    4c0c:	b508      	push	{r3, lr}
	motors_configure();
    4c0e:	f7fb fc51 	bl	4b4 <motors_configure>
	while (1) {
		u32_t val = 0U;
		set_motor('0', 1);
    4c12:	2101      	movs	r1, #1
    4c14:	2030      	movs	r0, #48	; 0x30
    4c16:	f7fb fc6b 	bl	4f0 <set_motor>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, ms)
    4c1a:	f640 30b8 	movw	r0, #3000	; 0xbb8
    4c1e:	f001 fdaa 	bl	6776 <z_impl_k_sleep>
    4c22:	e7f6      	b.n	4c12 <main+0x6>

00004c24 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
    4c24:	b570      	push	{r4, r5, r6, lr}
    4c26:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
    4c28:	f990 000b 	ldrsb.w	r0, [r0, #11]
    4c2c:	250c      	movs	r5, #12
    4c2e:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
    4c30:	4288      	cmp	r0, r1
    4c32:	eb06 0405 	add.w	r4, r6, r5
    4c36:	bfb8      	it	lt
    4c38:	5974      	ldrlt	r4, [r6, r5]

	*word = &bitarray[bn / 32];
    4c3a:	2a00      	cmp	r2, #0
    4c3c:	4610      	mov	r0, r2
    4c3e:	bfb8      	it	lt
    4c40:	f102 001f 	addlt.w	r0, r2, #31
    4c44:	1140      	asrs	r0, r0, #5
    4c46:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    4c4a:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
    4c4c:	f002 001f 	and.w	r0, r2, #31
    4c50:	bd70      	pop	{r4, r5, r6, pc}

00004c52 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
    4c52:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
    4c54:	ab01      	add	r3, sp, #4
    4c56:	f7ff ffe5 	bl	4c24 <get_bit_ptr>

	*word |= (1<<bit);
    4c5a:	9a01      	ldr	r2, [sp, #4]
    4c5c:	2301      	movs	r3, #1
    4c5e:	fa03 f000 	lsl.w	r0, r3, r0
    4c62:	6813      	ldr	r3, [r2, #0]
    4c64:	4303      	orrs	r3, r0
    4c66:	6013      	str	r3, [r2, #0]
}
    4c68:	b003      	add	sp, #12
    4c6a:	f85d fb04 	ldr.w	pc, [sp], #4

00004c6e <z_sys_mem_pool_base_init>:

	return (*word >> (4*(bit / 4))) & 0xf;
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
    4c6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4c72:	4604      	mov	r4, r0
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    4c74:	6843      	ldr	r3, [r0, #4]
    4c76:	8900      	ldrh	r0, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    4c78:	6821      	ldr	r1, [r4, #0]

	p->max_inline_level = -1;

	for (i = 0; i < p->n_levels; i++) {
    4c7a:	f894 800a 	ldrb.w	r8, [r4, #10]
	p->max_inline_level = -1;
    4c7e:	22ff      	movs	r2, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    4c80:	4358      	muls	r0, r3
	p->max_inline_level = -1;
    4c82:	72e2      	strb	r2, [r4, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    4c84:	4401      	add	r1, r0
	for (i = 0; i < p->n_levels; i++) {
    4c86:	2200      	movs	r2, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
    4c88:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < p->n_levels; i++) {
    4c8c:	4590      	cmp	r8, r2
    4c8e:	dc05      	bgt.n	4c9c <z_sys_mem_pool_base_init+0x2e>
		}

		sz = WB_DN(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
    4c90:	2500      	movs	r5, #0
    4c92:	8923      	ldrh	r3, [r4, #8]
    4c94:	42ab      	cmp	r3, r5
    4c96:	dc20      	bgt.n	4cda <z_sys_mem_pool_base_init+0x6c>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
    4c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sys_dlist_init(&p->levels[i].free_list);
    4c9c:	f8d4 c00c 	ldr.w	ip, [r4, #12]
		int nblocks = buflen / sz;
    4ca0:	fbb0 f6f3 	udiv	r6, r0, r3
		sys_dlist_init(&p->levels[i].free_list);
    4ca4:	fb09 f702 	mul.w	r7, r9, r2
    4ca8:	eb0c 0507 	add.w	r5, ip, r7
    4cac:	f105 0e04 	add.w	lr, r5, #4
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    4cb0:	2e20      	cmp	r6, #32
    4cb2:	e9c5 ee01 	strd	lr, lr, [r5, #4]
    4cb6:	d805      	bhi.n	4cc4 <z_sys_mem_pool_base_init+0x56>
			p->max_inline_level = i;
    4cb8:	72e2      	strb	r2, [r4, #11]
		sz = WB_DN(sz / 4);
    4cba:	089b      	lsrs	r3, r3, #2
    4cbc:	f023 0303 	bic.w	r3, r3, #3
	for (i = 0; i < p->n_levels; i++) {
    4cc0:	3201      	adds	r2, #1
    4cc2:	e7e3      	b.n	4c8c <z_sys_mem_pool_base_init+0x1e>
			bits += (nblocks + 31)/32;
    4cc4:	f116 051f 	adds.w	r5, r6, #31
    4cc8:	bf48      	it	mi
    4cca:	f106 053e 	addmi.w	r5, r6, #62	; 0x3e
    4cce:	116d      	asrs	r5, r5, #5
			p->levels[i].bits_p = bits;
    4cd0:	f84c 1007 	str.w	r1, [ip, r7]
			bits += (nblocks + 31)/32;
    4cd4:	eb01 0185 	add.w	r1, r1, r5, lsl #2
    4cd8:	e7ef      	b.n	4cba <z_sys_mem_pool_base_init+0x4c>
	return (u8_t *)p->buf + lsz * block;
    4cda:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
    4cdc:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
    4cde:	6820      	ldr	r0, [r4, #0]
    4ce0:	436a      	muls	r2, r5
    4ce2:	1881      	adds	r1, r0, r2
		sys_dlist_append(&p->levels[0].free_list, block);
    4ce4:	1d1e      	adds	r6, r3, #4
	node->next = list;
    4ce6:	5086      	str	r6, [r0, r2]
	node->prev = list->tail;
    4ce8:	689a      	ldr	r2, [r3, #8]
    4cea:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
    4cec:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
    4cee:	4620      	mov	r0, r4
    4cf0:	6011      	str	r1, [r2, #0]
	list->tail = node;
    4cf2:	6099      	str	r1, [r3, #8]
    4cf4:	462a      	mov	r2, r5
    4cf6:	2100      	movs	r1, #0
    4cf8:	f7ff ffab 	bl	4c52 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    4cfc:	3501      	adds	r5, #1
    4cfe:	e7c8      	b.n	4c92 <z_sys_mem_pool_base_init+0x24>

00004d00 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4d00:	b508      	push	{r3, lr}
    4d02:	4604      	mov	r4, r0
    4d04:	4608      	mov	r0, r1
    4d06:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    4d08:	461a      	mov	r2, r3
    4d0a:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    4d0c:	f7ff fcd2 	bl	46b4 <z_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    4d10:	f7fd fed8 	bl	2ac4 <z_impl_k_thread_abort>

00004d14 <z_arch_printk_char_out>:
}
    4d14:	2000      	movs	r0, #0
    4d16:	4770      	bx	lr

00004d18 <print_err>:
{
    4d18:	b570      	push	{r4, r5, r6, lr}
    4d1a:	4604      	mov	r4, r0
    4d1c:	460d      	mov	r5, r1
	out('E', ctx);
    4d1e:	2045      	movs	r0, #69	; 0x45
    4d20:	47a0      	blx	r4
	out('R', ctx);
    4d22:	4629      	mov	r1, r5
    4d24:	2052      	movs	r0, #82	; 0x52
    4d26:	47a0      	blx	r4
	out('R', ctx);
    4d28:	4629      	mov	r1, r5
    4d2a:	4623      	mov	r3, r4
    4d2c:	2052      	movs	r0, #82	; 0x52
}
    4d2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    4d32:	4718      	bx	r3

00004d34 <z_vprintk>:
{
    4d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d38:	b08b      	sub	sp, #44	; 0x2c
    4d3a:	461c      	mov	r4, r3
	char length_mod = 0;
    4d3c:	f04f 0800 	mov.w	r8, #0
    4d40:	1e53      	subs	r3, r2, #1
{
    4d42:	4606      	mov	r6, r0
    4d44:	460f      	mov	r7, r1
    4d46:	9302      	str	r3, [sp, #8]
	int min_width = -1;
    4d48:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    4d4c:	46c1      	mov	r9, r8
			might_format = 0;
    4d4e:	2500      	movs	r5, #0
					break;
    4d50:	e005      	b.n	4d5e <z_vprintk+0x2a>
		if (!might_format) {
    4d52:	b96d      	cbnz	r5, 4d70 <z_vprintk+0x3c>
			if (*fmt != '%') {
    4d54:	2825      	cmp	r0, #37	; 0x25
    4d56:	f000 814f 	beq.w	4ff8 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
    4d5a:	4639      	mov	r1, r7
    4d5c:	47b0      	blx	r6
	while (*fmt) {
    4d5e:	9b02      	ldr	r3, [sp, #8]
    4d60:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    4d64:	9302      	str	r3, [sp, #8]
    4d66:	2800      	cmp	r0, #0
    4d68:	d1f3      	bne.n	4d52 <z_vprintk+0x1e>
}
    4d6a:	b00b      	add	sp, #44	; 0x2c
    4d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    4d70:	2864      	cmp	r0, #100	; 0x64
    4d72:	d06e      	beq.n	4e52 <z_vprintk+0x11e>
    4d74:	d81a      	bhi.n	4dac <z_vprintk+0x78>
    4d76:	2839      	cmp	r0, #57	; 0x39
    4d78:	d80a      	bhi.n	4d90 <z_vprintk+0x5c>
    4d7a:	2831      	cmp	r0, #49	; 0x31
    4d7c:	d260      	bcs.n	4e40 <z_vprintk+0x10c>
    4d7e:	282d      	cmp	r0, #45	; 0x2d
    4d80:	f000 8140 	beq.w	5004 <z_vprintk+0x2d0>
    4d84:	2830      	cmp	r0, #48	; 0x30
    4d86:	d04c      	beq.n	4e22 <z_vprintk+0xee>
    4d88:	2825      	cmp	r0, #37	; 0x25
    4d8a:	d107      	bne.n	4d9c <z_vprintk+0x68>
				out((int)'%', ctx);
    4d8c:	4639      	mov	r1, r7
    4d8e:	e00b      	b.n	4da8 <z_vprintk+0x74>
			switch (*fmt) {
    4d90:	2858      	cmp	r0, #88	; 0x58
    4d92:	f000 80bb 	beq.w	4f0c <z_vprintk+0x1d8>
    4d96:	2863      	cmp	r0, #99	; 0x63
    4d98:	f000 812a 	beq.w	4ff0 <z_vprintk+0x2bc>
					out((int)'%', ctx);
    4d9c:	4639      	mov	r1, r7
    4d9e:	2025      	movs	r0, #37	; 0x25
    4da0:	47b0      	blx	r6
					out((int)*fmt, ctx);
    4da2:	9b02      	ldr	r3, [sp, #8]
    4da4:	7818      	ldrb	r0, [r3, #0]
    4da6:	4639      	mov	r1, r7
    4da8:	47b0      	blx	r6
    4daa:	e7d0      	b.n	4d4e <z_vprintk+0x1a>
			switch (*fmt) {
    4dac:	2870      	cmp	r0, #112	; 0x70
    4dae:	f000 80a3 	beq.w	4ef8 <z_vprintk+0x1c4>
    4db2:	d811      	bhi.n	4dd8 <z_vprintk+0xa4>
    4db4:	2869      	cmp	r0, #105	; 0x69
    4db6:	d04c      	beq.n	4e52 <z_vprintk+0x11e>
    4db8:	286c      	cmp	r0, #108	; 0x6c
    4dba:	d105      	bne.n	4dc8 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
    4dbc:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    4dc0:	d12a      	bne.n	4e18 <z_vprintk+0xe4>
					length_mod = 'L';
    4dc2:	f04f 084c 	mov.w	r8, #76	; 0x4c
    4dc6:	e7ca      	b.n	4d5e <z_vprintk+0x2a>
			switch (*fmt) {
    4dc8:	2868      	cmp	r0, #104	; 0x68
    4dca:	d1e7      	bne.n	4d9c <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
    4dcc:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
    4dd0:	d122      	bne.n	4e18 <z_vprintk+0xe4>
					length_mod = 'H';
    4dd2:	f04f 0848 	mov.w	r8, #72	; 0x48
    4dd6:	e7c2      	b.n	4d5e <z_vprintk+0x2a>
			switch (*fmt) {
    4dd8:	2875      	cmp	r0, #117	; 0x75
    4dda:	d071      	beq.n	4ec0 <z_vprintk+0x18c>
    4ddc:	d818      	bhi.n	4e10 <z_vprintk+0xdc>
    4dde:	2873      	cmp	r0, #115	; 0x73
    4de0:	d1dc      	bne.n	4d9c <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
    4de2:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
    4de6:	46ab      	mov	fp, r5
    4de8:	465b      	mov	r3, fp
    4dea:	f81b 0b01 	ldrb.w	r0, [fp], #1
    4dee:	2800      	cmp	r0, #0
    4df0:	f040 80fb 	bne.w	4fea <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
    4df4:	f1b9 0f03 	cmp.w	r9, #3
    4df8:	f040 810a 	bne.w	5010 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
    4dfc:	1b5d      	subs	r5, r3, r5
    4dfe:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
    4e02:	2d00      	cmp	r5, #0
    4e04:	dda3      	ble.n	4d4e <z_vprintk+0x1a>
						out(' ', ctx);
    4e06:	4639      	mov	r1, r7
    4e08:	2020      	movs	r0, #32
    4e0a:	47b0      	blx	r6
    4e0c:	3d01      	subs	r5, #1
    4e0e:	e7f8      	b.n	4e02 <z_vprintk+0xce>
			switch (*fmt) {
    4e10:	2878      	cmp	r0, #120	; 0x78
    4e12:	d07b      	beq.n	4f0c <z_vprintk+0x1d8>
    4e14:	287a      	cmp	r0, #122	; 0x7a
    4e16:	d1c1      	bne.n	4d9c <z_vprintk+0x68>
				} else if (length_mod == 0) {
    4e18:	f1b8 0f00 	cmp.w	r8, #0
    4e1c:	d1be      	bne.n	4d9c <z_vprintk+0x68>
    4e1e:	4680      	mov	r8, r0
    4e20:	e79d      	b.n	4d5e <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
    4e22:	f1ba 0f00 	cmp.w	sl, #0
    4e26:	da0e      	bge.n	4e46 <z_vprintk+0x112>
    4e28:	f1b9 0f00 	cmp.w	r9, #0
    4e2c:	f000 80ed 	beq.w	500a <z_vprintk+0x2d6>
					min_width = *fmt - '0';
    4e30:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    4e34:	f1b9 0f00 	cmp.w	r9, #0
    4e38:	bf08      	it	eq
    4e3a:	f04f 0902 	moveq.w	r9, #2
    4e3e:	e78e      	b.n	4d5e <z_vprintk+0x2a>
				if (min_width < 0) {
    4e40:	f1ba 0f00 	cmp.w	sl, #0
    4e44:	dbf4      	blt.n	4e30 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
    4e46:	230a      	movs	r3, #10
    4e48:	fb03 0a0a 	mla	sl, r3, sl, r0
    4e4c:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    4e50:	e7f0      	b.n	4e34 <z_vprintk+0x100>
				if (length_mod == 'z') {
    4e52:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    4e56:	d102      	bne.n	4e5e <z_vprintk+0x12a>
					d = va_arg(ap, int);
    4e58:	f854 5b04 	ldr.w	r5, [r4], #4
    4e5c:	e01f      	b.n	4e9e <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
    4e5e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    4e62:	d0f9      	beq.n	4e58 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
    4e64:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    4e68:	d1f6      	bne.n	4e58 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
    4e6a:	3407      	adds	r4, #7
    4e6c:	f024 0407 	bic.w	r4, r4, #7
    4e70:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
    4e74:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
    4e78:	9106      	str	r1, [sp, #24]
    4e7a:	f143 0100 	adc.w	r1, r3, #0
    4e7e:	9107      	str	r1, [sp, #28]
    4e80:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    4e84:	2100      	movs	r1, #0
    4e86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4e8a:	4561      	cmp	r1, ip
    4e8c:	bf08      	it	eq
    4e8e:	4558      	cmpeq	r0, fp
    4e90:	d204      	bcs.n	4e9c <z_vprintk+0x168>
						print_err(out, ctx);
    4e92:	4639      	mov	r1, r7
    4e94:	4630      	mov	r0, r6
    4e96:	f7ff ff3f 	bl	4d18 <print_err>
						break;
    4e9a:	e758      	b.n	4d4e <z_vprintk+0x1a>
					d = lld;
    4e9c:	4615      	mov	r5, r2
				if (d < 0) {
    4e9e:	2d00      	cmp	r5, #0
    4ea0:	da05      	bge.n	4eae <z_vprintk+0x17a>
					out((int)'-', ctx);
    4ea2:	4639      	mov	r1, r7
    4ea4:	202d      	movs	r0, #45	; 0x2d
    4ea6:	47b0      	blx	r6
					d = -d;
    4ea8:	426d      	negs	r5, r5
					min_width--;
    4eaa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    4eae:	f8cd a000 	str.w	sl, [sp]
    4eb2:	464b      	mov	r3, r9
    4eb4:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    4eb6:	4639      	mov	r1, r7
    4eb8:	4630      	mov	r0, r6
    4eba:	f7fb fb33 	bl	524 <_printk_dec_ulong>
				break;
    4ebe:	e746      	b.n	4d4e <z_vprintk+0x1a>
				if (length_mod == 'z') {
    4ec0:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    4ec4:	d102      	bne.n	4ecc <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
    4ec6:	f854 2b04 	ldr.w	r2, [r4], #4
    4eca:	e011      	b.n	4ef0 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
    4ecc:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    4ed0:	d0f9      	beq.n	4ec6 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
    4ed2:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    4ed6:	d1f6      	bne.n	4ec6 <z_vprintk+0x192>
					unsigned long long llu =
    4ed8:	3407      	adds	r4, #7
    4eda:	f024 0407 	bic.w	r4, r4, #7
    4ede:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    4ee2:	2100      	movs	r1, #0
    4ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4ee8:	4299      	cmp	r1, r3
    4eea:	bf08      	it	eq
    4eec:	4290      	cmpeq	r0, r2
    4eee:	d3d0      	bcc.n	4e92 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
    4ef0:	f8cd a000 	str.w	sl, [sp]
    4ef4:	464b      	mov	r3, r9
    4ef6:	e7de      	b.n	4eb6 <z_vprintk+0x182>
				  out('0', ctx);
    4ef8:	4639      	mov	r1, r7
    4efa:	2030      	movs	r0, #48	; 0x30
    4efc:	47b0      	blx	r6
				  out('x', ctx);
    4efe:	4639      	mov	r1, r7
    4f00:	2078      	movs	r0, #120	; 0x78
    4f02:	47b0      	blx	r6
				  min_width = 8;
    4f04:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
    4f08:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
    4f0c:	9b02      	ldr	r3, [sp, #8]
    4f0e:	781b      	ldrb	r3, [r3, #0]
    4f10:	2b70      	cmp	r3, #112	; 0x70
    4f12:	d104      	bne.n	4f1e <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
    4f14:	f854 3b04 	ldr.w	r3, [r4], #4
    4f18:	9304      	str	r3, [sp, #16]
    4f1a:	2300      	movs	r3, #0
    4f1c:	e00d      	b.n	4f3a <z_vprintk+0x206>
				} else if (length_mod == 'l') {
    4f1e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    4f22:	d0f7      	beq.n	4f14 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
    4f24:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    4f28:	d1f4      	bne.n	4f14 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
    4f2a:	3407      	adds	r4, #7
    4f2c:	f024 0307 	bic.w	r3, r4, #7
    4f30:	461c      	mov	r4, r3
    4f32:	685b      	ldr	r3, [r3, #4]
    4f34:	f854 2b08 	ldr.w	r2, [r4], #8
    4f38:	9204      	str	r2, [sp, #16]
	int digits = 0;
    4f3a:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    4f3c:	2210      	movs	r2, #16
	int digits = 0;
    4f3e:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
    4f40:	9105      	str	r1, [sp, #20]
	int shift = sizeof(num) * 8;
    4f42:	f04f 0b40 	mov.w	fp, #64	; 0x40
		shift -= 4;
    4f46:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
    4f4a:	9804      	ldr	r0, [sp, #16]
    4f4c:	f1cb 0c20 	rsb	ip, fp, #32
    4f50:	f1ab 0120 	sub.w	r1, fp, #32
    4f54:	fa20 f00b 	lsr.w	r0, r0, fp
    4f58:	fa03 fc0c 	lsl.w	ip, r3, ip
    4f5c:	ea40 000c 	orr.w	r0, r0, ip
    4f60:	fa23 f101 	lsr.w	r1, r3, r1
    4f64:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    4f66:	f010 000f 	ands.w	r0, r0, #15
    4f6a:	d108      	bne.n	4f7e <z_vprintk+0x24a>
    4f6c:	9905      	ldr	r1, [sp, #20]
    4f6e:	b911      	cbnz	r1, 4f76 <z_vprintk+0x242>
    4f70:	f1bb 0f00 	cmp.w	fp, #0
    4f74:	d124      	bne.n	4fc0 <z_vprintk+0x28c>
			nibble += nibble > 9 ? 87 : 48;
    4f76:	2130      	movs	r1, #48	; 0x30
    4f78:	e005      	b.n	4f86 <z_vprintk+0x252>
			found_largest_digit = 1;
    4f7a:	9505      	str	r5, [sp, #20]
    4f7c:	e7e3      	b.n	4f46 <z_vprintk+0x212>
			nibble += nibble > 9 ? 87 : 48;
    4f7e:	2809      	cmp	r0, #9
    4f80:	bf8c      	ite	hi
    4f82:	2157      	movhi	r1, #87	; 0x57
    4f84:	2130      	movls	r1, #48	; 0x30
    4f86:	4408      	add	r0, r1
			out((int)nibble, ctx);
    4f88:	b240      	sxtb	r0, r0
    4f8a:	4639      	mov	r1, r7
    4f8c:	9308      	str	r3, [sp, #32]
    4f8e:	9205      	str	r2, [sp, #20]
    4f90:	47b0      	blx	r6
			digits++;
    4f92:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
    4f94:	9a05      	ldr	r2, [sp, #20]
			digits++;
    4f96:	3301      	adds	r3, #1
    4f98:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
    4f9a:	9b08      	ldr	r3, [sp, #32]
    4f9c:	f1bb 0f00 	cmp.w	fp, #0
    4fa0:	d1eb      	bne.n	4f7a <z_vprintk+0x246>
	if (padding == PAD_SPACE_AFTER) {
    4fa2:	f1b9 0f03 	cmp.w	r9, #3
    4fa6:	f47f aed2 	bne.w	4d4e <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
    4faa:	9b03      	ldr	r3, [sp, #12]
    4fac:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
    4fb0:	2d00      	cmp	r5, #0
    4fb2:	f77f aecc 	ble.w	4d4e <z_vprintk+0x1a>
			out(' ', ctx);
    4fb6:	4639      	mov	r1, r7
    4fb8:	2020      	movs	r0, #32
    4fba:	47b0      	blx	r6
    4fbc:	3d01      	subs	r5, #1
    4fbe:	e7f7      	b.n	4fb0 <z_vprintk+0x27c>
		if (remaining-- <= min_width) {
    4fc0:	1e51      	subs	r1, r2, #1
    4fc2:	4592      	cmp	sl, r2
    4fc4:	9108      	str	r1, [sp, #32]
    4fc6:	db07      	blt.n	4fd8 <z_vprintk+0x2a4>
			if (padding == PAD_ZERO_BEFORE) {
    4fc8:	f1b9 0f01 	cmp.w	r9, #1
    4fcc:	d106      	bne.n	4fdc <z_vprintk+0x2a8>
    4fce:	9309      	str	r3, [sp, #36]	; 0x24
				out('0', ctx);
    4fd0:	4639      	mov	r1, r7
    4fd2:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    4fd4:	47b0      	blx	r6
    4fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
					x = va_arg(ap, unsigned int);
    4fd8:	9a08      	ldr	r2, [sp, #32]
    4fda:	e7b4      	b.n	4f46 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
    4fdc:	f1b9 0f02 	cmp.w	r9, #2
    4fe0:	d1fa      	bne.n	4fd8 <z_vprintk+0x2a4>
    4fe2:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
    4fe4:	4639      	mov	r1, r7
    4fe6:	2020      	movs	r0, #32
    4fe8:	e7f4      	b.n	4fd4 <z_vprintk+0x2a0>
					out((int)(*s++), ctx);
    4fea:	4639      	mov	r1, r7
    4fec:	47b0      	blx	r6
    4fee:	e6fb      	b.n	4de8 <z_vprintk+0xb4>
				out(c, ctx);
    4ff0:	4639      	mov	r1, r7
    4ff2:	f854 0b04 	ldr.w	r0, [r4], #4
    4ff6:	e6d7      	b.n	4da8 <z_vprintk+0x74>
				length_mod = 0;
    4ff8:	46a8      	mov	r8, r5
				padding = PAD_NONE;
    4ffa:	46a9      	mov	r9, r5
				min_width = -1;
    4ffc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
    5000:	2501      	movs	r5, #1
    5002:	e6ac      	b.n	4d5e <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
    5004:	f04f 0903 	mov.w	r9, #3
    5008:	e6a9      	b.n	4d5e <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
    500a:	f04f 0901 	mov.w	r9, #1
    500e:	e6a6      	b.n	4d5e <z_vprintk+0x2a>
			might_format = 0;
    5010:	4605      	mov	r5, r0
		++fmt;
    5012:	e6a4      	b.n	4d5e <z_vprintk+0x2a>

00005014 <printk>:
{
    5014:	b40f      	push	{r0, r1, r2, r3}
    5016:	b507      	push	{r0, r1, r2, lr}
    5018:	a904      	add	r1, sp, #16
    501a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    501e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    5020:	f7fb fad2 	bl	5c8 <vprintk>
}
    5024:	b003      	add	sp, #12
    5026:	f85d eb04 	ldr.w	lr, [sp], #4
    502a:	b004      	add	sp, #16
    502c:	4770      	bx	lr

0000502e <ring_buf_space_get>:
 *
 * @return Ring buffer free space (in 32-bit words or bytes).
 */
static inline u32_t ring_buf_space_get(struct ring_buf *buf)
{
	return z_ring_buf_custom_space_get(buf->size, buf->head, buf->tail);
    502e:	6903      	ldr	r3, [r0, #16]
    5030:	e9d0 2000 	ldrd	r2, r0, [r0]
	if (tail < head) {
    5034:	4282      	cmp	r2, r0
	return (size - tail) + head - 1;
    5036:	bf96      	itet	ls
    5038:	189b      	addls	r3, r3, r2
		return head - tail - 1;
    503a:	f102 33ff 	addhi.w	r3, r2, #4294967295	; 0xffffffff
	return (size - tail) + head - 1;
    503e:	f103 33ff 	addls.w	r3, r3, #4294967295	; 0xffffffff
    5042:	1a18      	subs	r0, r3, r0
}
    5044:	4770      	bx	lr

00005046 <ring_buf_put_claim>:

u32_t ring_buf_put_claim(struct ring_buf *buf, u8_t **data, u32_t size)
{
	u32_t space, trail_size, allocated;

	space = z_ring_buf_custom_space_get(buf->size, buf->head,
    5046:	6803      	ldr	r3, [r0, #0]
{
    5048:	b570      	push	{r4, r5, r6, lr}
	space = z_ring_buf_custom_space_get(buf->size, buf->head,
    504a:	6884      	ldr	r4, [r0, #8]
    504c:	6906      	ldr	r6, [r0, #16]
	if (tail < head) {
    504e:	42a3      	cmp	r3, r4
					    buf->misc.byte_mode.tmp_tail);

	/* Limit requested size to available size. */
	size = MIN(size, space);
	trail_size = buf->size - buf->misc.byte_mode.tmp_tail;
    5050:	eba6 0504 	sub.w	r5, r6, r4
	return (size - tail) + head - 1;
    5054:	bf98      	it	ls
    5056:	199b      	addls	r3, r3, r6
    5058:	3b01      	subs	r3, #1

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
    505a:	4295      	cmp	r5, r2
    505c:	eba3 0304 	sub.w	r3, r3, r4
    5060:	bf28      	it	cs
    5062:	4615      	movcs	r5, r2
    5064:	42ab      	cmp	r3, r5

	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
    5066:	6942      	ldr	r2, [r0, #20]
	allocated = MIN(trail_size, size);
    5068:	bf28      	it	cs
    506a:	462b      	movcs	r3, r5
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
    506c:	4422      	add	r2, r4
	buf->misc.byte_mode.tmp_tail =
		wrap(buf->misc.byte_mode.tmp_tail + allocated, buf->size);
    506e:	441c      	add	r4, r3
	return val >= max ? (val - max) : val;
    5070:	42a6      	cmp	r6, r4
    5072:	bf98      	it	ls
    5074:	1ba4      	subls	r4, r4, r6
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
    5076:	600a      	str	r2, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
    5078:	6084      	str	r4, [r0, #8]

	return allocated;
}
    507a:	4618      	mov	r0, r3
    507c:	bd70      	pop	{r4, r5, r6, pc}

0000507e <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, u32_t size)
{
    507e:	b510      	push	{r4, lr}
    5080:	4604      	mov	r4, r0
	if (size > ring_buf_space_get(buf)) {
    5082:	f7ff ffd4 	bl	502e <ring_buf_space_get>
    5086:	4288      	cmp	r0, r1
    5088:	d309      	bcc.n	509e <ring_buf_put_finish+0x20>
		return -EINVAL;
	}

	buf->tail = wrap(buf->tail + size, buf->size);
    508a:	6863      	ldr	r3, [r4, #4]
    508c:	4419      	add	r1, r3
    508e:	6923      	ldr	r3, [r4, #16]
	return val >= max ? (val - max) : val;
    5090:	4299      	cmp	r1, r3
    5092:	bf28      	it	cs
    5094:	1ac9      	subcs	r1, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
    5096:	e9c4 1101 	strd	r1, r1, [r4, #4]

	return 0;
    509a:	2000      	movs	r0, #0
}
    509c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    509e:	f06f 0015 	mvn.w	r0, #21
    50a2:	e7fb      	b.n	509c <ring_buf_put_finish+0x1e>

000050a4 <ring_buf_put>:

u32_t ring_buf_put(struct ring_buf *buf, const u8_t *data, u32_t size)
{
    50a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    50a8:	4680      	mov	r8, r0
    50aa:	460f      	mov	r7, r1
    50ac:	4616      	mov	r6, r2
	u8_t *dst;
	u32_t partial_size;
	u32_t total_size = 0U;
    50ae:	2500      	movs	r5, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    50b0:	4632      	mov	r2, r6
    50b2:	a901      	add	r1, sp, #4
    50b4:	4640      	mov	r0, r8
    50b6:	f7ff ffc6 	bl	5046 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
    50ba:	4639      	mov	r1, r7
		partial_size = ring_buf_put_claim(buf, &dst, size);
    50bc:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    50be:	4602      	mov	r2, r0
    50c0:	9801      	ldr	r0, [sp, #4]
    50c2:	f001 f854 	bl	616e <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    50c6:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    50c8:	4425      	add	r5, r4
		data += partial_size;
    50ca:	4427      	add	r7, r4
	} while (size && partial_size);
    50cc:	d001      	beq.n	50d2 <ring_buf_put+0x2e>
    50ce:	2c00      	cmp	r4, #0
    50d0:	d1ee      	bne.n	50b0 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    50d2:	4629      	mov	r1, r5
    50d4:	4640      	mov	r0, r8
    50d6:	f7ff ffd2 	bl	507e <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    50da:	4628      	mov	r0, r5
    50dc:	b002      	add	sp, #8
    50de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000050e2 <ring_buf_get_claim>:

u32_t ring_buf_get_claim(struct ring_buf *buf, u8_t **data, u32_t size)
{
    50e2:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t space, granted_size, trail_size;

	space = (buf->size - 1) -
		z_ring_buf_custom_space_get(buf->size,
    50e4:	e9d0 3603 	ldrd	r3, r6, [r0, #12]
    50e8:	6844      	ldr	r4, [r0, #4]
	if (tail < head) {
    50ea:	42a3      	cmp	r3, r4
	return (size - tail) + head - 1;
    50ec:	bf95      	itete	ls
    50ee:	18f7      	addls	r7, r6, r3
		return head - tail - 1;
    50f0:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
	return (size - tail) + head - 1;
    50f4:	f107 37ff 	addls.w	r7, r7, #4294967295	; 0xffffffff
		return head - tail - 1;
    50f8:	1b2d      	subhi	r5, r5, r4
	return (size - tail) + head - 1;
    50fa:	bf98      	it	ls
    50fc:	1b3d      	subls	r5, r7, r4
	space = (buf->size - 1) -
    50fe:	1e74      	subs	r4, r6, #1
    5100:	1b64      	subs	r4, r4, r5
					    buf->misc.byte_mode.tmp_head,
					    buf->tail);
	trail_size = buf->size - buf->misc.byte_mode.tmp_head;
    5102:	1af5      	subs	r5, r6, r3

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
    5104:	42aa      	cmp	r2, r5
    5106:	bf28      	it	cs
    5108:	462a      	movcs	r2, r5
    510a:	42a2      	cmp	r2, r4
    510c:	bf28      	it	cs
    510e:	4622      	movcs	r2, r4

	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_head];
    5110:	6944      	ldr	r4, [r0, #20]
    5112:	441c      	add	r4, r3
	buf->misc.byte_mode.tmp_head =
		wrap(buf->misc.byte_mode.tmp_head + granted_size, buf->size);
    5114:	4413      	add	r3, r2
	return val >= max ? (val - max) : val;
    5116:	429e      	cmp	r6, r3
    5118:	bf98      	it	ls
    511a:	1b9b      	subls	r3, r3, r6
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_head];
    511c:	600c      	str	r4, [r1, #0]
	buf->misc.byte_mode.tmp_head =
    511e:	60c3      	str	r3, [r0, #12]

	return granted_size;
}
    5120:	4610      	mov	r0, r2
    5122:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005124 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, u32_t size)
{
    5124:	b538      	push	{r3, r4, r5, lr}
	u32_t allocated = (buf->size - 1) - ring_buf_space_get(buf);
    5126:	6905      	ldr	r5, [r0, #16]
{
    5128:	4604      	mov	r4, r0
	u32_t allocated = (buf->size - 1) - ring_buf_space_get(buf);
    512a:	f7ff ff80 	bl	502e <ring_buf_space_get>
    512e:	1e6b      	subs	r3, r5, #1
    5130:	1a18      	subs	r0, r3, r0

	if (size > allocated) {
    5132:	4288      	cmp	r0, r1
    5134:	d308      	bcc.n	5148 <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->head = wrap(buf->head + size, buf->size);
    5136:	6823      	ldr	r3, [r4, #0]
    5138:	4419      	add	r1, r3
	return val >= max ? (val - max) : val;
    513a:	428d      	cmp	r5, r1
    513c:	bf98      	it	ls
    513e:	1b49      	subls	r1, r1, r5
	buf->head = wrap(buf->head + size, buf->size);
    5140:	6021      	str	r1, [r4, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
    5142:	60e1      	str	r1, [r4, #12]

	return 0;
    5144:	2000      	movs	r0, #0
}
    5146:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    5148:	f06f 0015 	mvn.w	r0, #21
    514c:	e7fb      	b.n	5146 <ring_buf_get_finish+0x22>

0000514e <ring_buf_get>:

u32_t ring_buf_get(struct ring_buf *buf, u8_t *data, u32_t size)
{
    514e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5152:	4680      	mov	r8, r0
    5154:	460f      	mov	r7, r1
    5156:	4616      	mov	r6, r2
	u8_t *src;
	u32_t partial_size;
	u32_t total_size = 0U;
    5158:	2500      	movs	r5, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    515a:	4632      	mov	r2, r6
    515c:	a901      	add	r1, sp, #4
    515e:	4640      	mov	r0, r8
    5160:	f7ff ffbf 	bl	50e2 <ring_buf_get_claim>
		memcpy(data, src, partial_size);
    5164:	9901      	ldr	r1, [sp, #4]
		partial_size = ring_buf_get_claim(buf, &src, size);
    5166:	4604      	mov	r4, r0
		memcpy(data, src, partial_size);
    5168:	4602      	mov	r2, r0
    516a:	4638      	mov	r0, r7
    516c:	f000 ffff 	bl	616e <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    5170:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    5172:	4425      	add	r5, r4
		data += partial_size;
    5174:	4427      	add	r7, r4
	} while (size && partial_size);
    5176:	d001      	beq.n	517c <ring_buf_get+0x2e>
    5178:	2c00      	cmp	r4, #0
    517a:	d1ee      	bne.n	515a <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    517c:	4629      	mov	r1, r5
    517e:	4640      	mov	r0, r8
    5180:	f7ff ffd0 	bl	5124 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    5184:	4628      	mov	r0, r5
    5186:	b002      	add	sp, #8
    5188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000518c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    518c:	4770      	bx	lr

0000518e <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    518e:	f7fb ba85 	b.w	69c <SystemInit>

00005192 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
    5192:	070b      	lsls	r3, r1, #28
    5194:	d504      	bpl.n	51a0 <foldcase+0xe>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    5196:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    519a:	2b19      	cmp	r3, #25
			((ua | 32U) - (unsigned)'a' < 6U));
}

static inline int tolower(int chr)
{
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
    519c:	bf98      	it	ls
    519e:	3020      	addls	r0, #32
        return tolower(ch);
    return ch;
}
    51a0:	4770      	bx	lr

000051a2 <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
    51a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51a6:	b087      	sub	sp, #28
    51a8:	468a      	mov	sl, r1
    51aa:	4614      	mov	r4, r2
    51ac:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
    51ae:	4605      	mov	r5, r0
    51b0:	b918      	cbnz	r0, 51ba <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
    51b2:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
    51b4:	b007      	add	sp, #28
    51b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
    51ba:	2900      	cmp	r1, #0
    51bc:	d0f9      	beq.n	51b2 <fnmatchx+0x10>
    if (recursion-- == 0)
    51be:	9b02      	ldr	r3, [sp, #8]
    51c0:	2b00      	cmp	r3, #0
    51c2:	f000 8114 	beq.w	53ee <fnmatchx+0x24c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    51c6:	f004 0304 	and.w	r3, r4, #4
    51ca:	460a      	mov	r2, r1
    51cc:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
    51ce:	46a8      	mov	r8, r5
    51d0:	4621      	mov	r1, r4
    51d2:	f818 0b01 	ldrb.w	r0, [r8], #1
    51d6:	f7ff ffdc 	bl	5192 <foldcase>
    51da:	b2c0      	uxtb	r0, r0
    51dc:	283f      	cmp	r0, #63	; 0x3f
    51de:	4606      	mov	r6, r0
    51e0:	7817      	ldrb	r7, [r2, #0]
    51e2:	d022      	beq.n	522a <fnmatchx+0x88>
    51e4:	dc0a      	bgt.n	51fc <fnmatchx+0x5a>
    51e6:	b1c0      	cbz	r0, 521a <fnmatchx+0x78>
    51e8:	282a      	cmp	r0, #42	; 0x2a
    51ea:	d035      	beq.n	5258 <fnmatchx+0xb6>
            if (c != FOLDCASE(*string++, flags))
    51ec:	4621      	mov	r1, r4
    51ee:	4638      	mov	r0, r7
    51f0:	3201      	adds	r2, #1
    51f2:	f7ff ffce 	bl	5192 <foldcase>
    51f6:	4286      	cmp	r6, r0
    51f8:	d01e      	beq.n	5238 <fnmatchx+0x96>
    51fa:	e7da      	b.n	51b2 <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
    51fc:	285b      	cmp	r0, #91	; 0x5b
    51fe:	d07a      	beq.n	52f6 <fnmatchx+0x154>
    5200:	285c      	cmp	r0, #92	; 0x5c
    5202:	d1f3      	bne.n	51ec <fnmatchx+0x4a>
            if (!(flags & FNM_NOESCAPE)) {
    5204:	07e3      	lsls	r3, r4, #31
    5206:	d4f1      	bmi.n	51ec <fnmatchx+0x4a>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
    5208:	7868      	ldrb	r0, [r5, #1]
    520a:	f7ff ffc2 	bl	5192 <foldcase>
    520e:	b2c6      	uxtb	r6, r0
    5210:	2e00      	cmp	r6, #0
    5212:	d0eb      	beq.n	51ec <fnmatchx+0x4a>
    5214:	f105 0802 	add.w	r8, r5, #2
    5218:	e7e8      	b.n	51ec <fnmatchx+0x4a>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
    521a:	06e4      	lsls	r4, r4, #27
    521c:	d501      	bpl.n	5222 <fnmatchx+0x80>
    521e:	2f2f      	cmp	r7, #47	; 0x2f
    5220:	d0c8      	beq.n	51b4 <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
    5222:	1c38      	adds	r0, r7, #0
                        0 : FNM_NOMATCH;
    5224:	bf18      	it	ne
    5226:	2001      	movne	r0, #1
    5228:	e7c4      	b.n	51b4 <fnmatchx+0x12>
            if (*string == EOS)
    522a:	2f00      	cmp	r7, #0
    522c:	d0c1      	beq.n	51b2 <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
    522e:	2f2f      	cmp	r7, #47	; 0x2f
    5230:	d104      	bne.n	523c <fnmatchx+0x9a>
    5232:	07a1      	lsls	r1, r4, #30
    5234:	d4bd      	bmi.n	51b2 <fnmatchx+0x10>
            ++string;
    5236:	3201      	adds	r2, #1
            break;
    5238:	4645      	mov	r5, r8
    523a:	e7c8      	b.n	51ce <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    523c:	2f2e      	cmp	r7, #46	; 0x2e
    523e:	d1fa      	bne.n	5236 <fnmatchx+0x94>
    5240:	9b04      	ldr	r3, [sp, #16]
    5242:	2b00      	cmp	r3, #0
    5244:	d0f7      	beq.n	5236 <fnmatchx+0x94>
    5246:	4552      	cmp	r2, sl
    5248:	d0b3      	beq.n	51b2 <fnmatchx+0x10>
                (string == stringstart ||
    524a:	07a3      	lsls	r3, r4, #30
    524c:	d5f3      	bpl.n	5236 <fnmatchx+0x94>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
    524e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    5252:	2b2f      	cmp	r3, #47	; 0x2f
    5254:	d1ef      	bne.n	5236 <fnmatchx+0x94>
    5256:	e7ac      	b.n	51b2 <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
    5258:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
    525a:	f7ff ff9a 	bl	5192 <foldcase>
    525e:	b2c1      	uxtb	r1, r0
            while (c == '*')
    5260:	292a      	cmp	r1, #42	; 0x2a
    5262:	d018      	beq.n	5296 <fnmatchx+0xf4>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    5264:	2f2e      	cmp	r7, #46	; 0x2e
    5266:	d109      	bne.n	527c <fnmatchx+0xda>
    5268:	9b04      	ldr	r3, [sp, #16]
    526a:	b13b      	cbz	r3, 527c <fnmatchx+0xda>
    526c:	4552      	cmp	r2, sl
    526e:	d0a0      	beq.n	51b2 <fnmatchx+0x10>
                (string == stringstart ||
    5270:	07a7      	lsls	r7, r4, #30
    5272:	d503      	bpl.n	527c <fnmatchx+0xda>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
    5274:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    5278:	2b2f      	cmp	r3, #47	; 0x2f
    527a:	d09a      	beq.n	51b2 <fnmatchx+0x10>
            if (c == EOS) {
    527c:	b979      	cbnz	r1, 529e <fnmatchx+0xfc>
                if (flags & FNM_PATHNAME)
    527e:	f014 0002 	ands.w	r0, r4, #2
    5282:	d097      	beq.n	51b4 <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
    5284:	06e6      	lsls	r6, r4, #27
    5286:	f100 80b4 	bmi.w	53f2 <fnmatchx+0x250>
                        strchr(string, '/') == NULL ?
    528a:	212f      	movs	r1, #47	; 0x2f
    528c:	4610      	mov	r0, r2
    528e:	f000 ff17 	bl	60c0 <strchr>
                        0 : FNM_NOMATCH;
    5292:	3000      	adds	r0, #0
    5294:	e7c6      	b.n	5224 <fnmatchx+0x82>
                c = FOLDCASE(*++pattern, flags);
    5296:	4621      	mov	r1, r4
    5298:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    529c:	e7dd      	b.n	525a <fnmatchx+0xb8>
            } else if (c == '/' && flags & FNM_PATHNAME) {
    529e:	292f      	cmp	r1, #47	; 0x2f
    52a0:	d101      	bne.n	52a6 <fnmatchx+0x104>
    52a2:	07a5      	lsls	r5, r4, #30
    52a4:	d420      	bmi.n	52e8 <fnmatchx+0x146>
    if (recursion-- == 0)
    52a6:	9b02      	ldr	r3, [sp, #8]
    52a8:	4615      	mov	r5, r2
    52aa:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
    52ac:	f024 0904 	bic.w	r9, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
    52b0:	f004 0a02 	and.w	sl, r4, #2
    52b4:	46ab      	mov	fp, r5
            while ((test = FOLDCASE(*string, flags)) != EOS) {
    52b6:	4621      	mov	r1, r4
    52b8:	f89b 0000 	ldrb.w	r0, [fp]
    52bc:	f7ff ff69 	bl	5192 <foldcase>
    52c0:	b2c6      	uxtb	r6, r0
    52c2:	3501      	adds	r5, #1
    52c4:	2e00      	cmp	r6, #0
    52c6:	f43f af74 	beq.w	51b2 <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
    52ca:	463b      	mov	r3, r7
    52cc:	464a      	mov	r2, r9
    52ce:	4659      	mov	r1, fp
    52d0:	4640      	mov	r0, r8
    52d2:	f7ff ff66 	bl	51a2 <fnmatchx>
    52d6:	2801      	cmp	r0, #1
    52d8:	f47f af6c 	bne.w	51b4 <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
    52dc:	2e2f      	cmp	r6, #47	; 0x2f
    52de:	d1e9      	bne.n	52b4 <fnmatchx+0x112>
    52e0:	f1ba 0f00 	cmp.w	sl, #0
    52e4:	d0e6      	beq.n	52b4 <fnmatchx+0x112>
    52e6:	e764      	b.n	51b2 <fnmatchx+0x10>
                if ((string = strchr(string, '/')) == NULL)
    52e8:	4610      	mov	r0, r2
    52ea:	f000 fee9 	bl	60c0 <strchr>
    52ee:	4602      	mov	r2, r0
    52f0:	2800      	cmp	r0, #0
    52f2:	d1a1      	bne.n	5238 <fnmatchx+0x96>
    52f4:	e75d      	b.n	51b2 <fnmatchx+0x10>
            if (*string == EOS)
    52f6:	2f00      	cmp	r7, #0
    52f8:	f43f af5b 	beq.w	51b2 <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
    52fc:	2f2f      	cmp	r7, #47	; 0x2f
    52fe:	d102      	bne.n	5306 <fnmatchx+0x164>
    5300:	07a0      	lsls	r0, r4, #30
    5302:	f53f af56 	bmi.w	51b2 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
    5306:	4621      	mov	r1, r4
    5308:	4638      	mov	r0, r7
    530a:	f7ff ff42 	bl	5192 <foldcase>
    530e:	9000      	str	r0, [sp, #0]
    if (pattern == NULL)
    5310:	f1b8 0f00 	cmp.w	r8, #0
    5314:	f43f af4d 	beq.w	51b2 <fnmatchx+0x10>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    5318:	786b      	ldrb	r3, [r5, #1]
    531a:	2b21      	cmp	r3, #33	; 0x21
    531c:	d001      	beq.n	5322 <fnmatchx+0x180>
    531e:	2b5e      	cmp	r3, #94	; 0x5e
    5320:	d126      	bne.n	5370 <fnmatchx+0x1ce>
        ++pattern;
    5322:	3502      	adds	r5, #2
    5324:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    5326:	9301      	str	r3, [sp, #4]
    need = 1;
    5328:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    532a:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
    532e:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    5332:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
    5334:	462e      	mov	r6, r5
    5336:	4621      	mov	r1, r4
    5338:	f816 0b01 	ldrb.w	r0, [r6], #1
    533c:	9305      	str	r3, [sp, #20]
    533e:	f7ff ff28 	bl	5192 <foldcase>
    5342:	fa5f f980 	uxtb.w	r9, r0
    5346:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
    534a:	9b05      	ldr	r3, [sp, #20]
    534c:	d113      	bne.n	5376 <fnmatchx+0x1d4>
    534e:	bb2b      	cbnz	r3, 539c <fnmatchx+0x1fa>
    return ok == negate ? NULL : pattern;
    5350:	9b01      	ldr	r3, [sp, #4]
    5352:	455b      	cmp	r3, fp
    5354:	f43f af2d 	beq.w	51b2 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
    5358:	2e00      	cmp	r6, #0
    535a:	f43f af2a 	beq.w	51b2 <fnmatchx+0x10>
            if (r == (void *)-1) {
    535e:	1c71      	adds	r1, r6, #1
    5360:	d103      	bne.n	536a <fnmatchx+0x1c8>
                if (*string != '[')
    5362:	2f5b      	cmp	r7, #91	; 0x5b
    5364:	f47f af25 	bne.w	51b2 <fnmatchx+0x10>
    5368:	4646      	mov	r6, r8
            ++string;
    536a:	3201      	adds	r2, #1
            break;
    536c:	46b0      	mov	r8, r6
    536e:	e763      	b.n	5238 <fnmatchx+0x96>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    5370:	4645      	mov	r5, r8
    5372:	2300      	movs	r3, #0
    5374:	e7d7      	b.n	5326 <fnmatchx+0x184>
        if (c == '/')
    5376:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
    537a:	d0f2      	beq.n	5362 <fnmatchx+0x1c0>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    537c:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    5380:	d108      	bne.n	5394 <fnmatchx+0x1f2>
    5382:	9b03      	ldr	r3, [sp, #12]
    5384:	b953      	cbnz	r3, 539c <fnmatchx+0x1fa>
            c = FOLDCASE(*pattern++, flags);
    5386:	4621      	mov	r1, r4
    5388:	7868      	ldrb	r0, [r5, #1]
    538a:	f7ff ff02 	bl	5192 <foldcase>
    538e:	1cae      	adds	r6, r5, #2
    5390:	fa5f f980 	uxtb.w	r9, r0
        if (c == EOS)
    5394:	f1b9 0f00 	cmp.w	r9, #0
    5398:	f43f af0b 	beq.w	51b2 <fnmatchx+0x10>
        if (*pattern == '-' 
    539c:	7833      	ldrb	r3, [r6, #0]
    539e:	2b2d      	cmp	r3, #45	; 0x2d
    53a0:	d11e      	bne.n	53e0 <fnmatchx+0x23e>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
    53a2:	4621      	mov	r1, r4
    53a4:	7870      	ldrb	r0, [r6, #1]
    53a6:	f7ff fef4 	bl	5192 <foldcase>
    53aa:	b2c0      	uxtb	r0, r0
    53ac:	b1c0      	cbz	r0, 53e0 <fnmatchx+0x23e>
    53ae:	285d      	cmp	r0, #93	; 0x5d
    53b0:	d016      	beq.n	53e0 <fnmatchx+0x23e>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
    53b2:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
    53b4:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
    53b8:	d109      	bne.n	53ce <fnmatchx+0x22c>
    53ba:	9b03      	ldr	r3, [sp, #12]
    53bc:	b93b      	cbnz	r3, 53ce <fnmatchx+0x22c>
                c2 = FOLDCASE(*pattern++, flags);
    53be:	78b0      	ldrb	r0, [r6, #2]
    53c0:	f7ff fee7 	bl	5192 <foldcase>
    53c4:	b2c0      	uxtb	r0, r0
    53c6:	1cf5      	adds	r5, r6, #3
            if (c2 == EOS)
    53c8:	2800      	cmp	r0, #0
    53ca:	f43f aef2 	beq.w	51b2 <fnmatchx+0x10>
            if (c <= test && test <= c2)
    53ce:	9b00      	ldr	r3, [sp, #0]
    53d0:	454b      	cmp	r3, r9
    53d2:	db03      	blt.n	53dc <fnmatchx+0x23a>
                ok = 1;
    53d4:	4283      	cmp	r3, r0
    53d6:	bfd8      	it	le
    53d8:	f04f 0b01 	movle.w	fp, #1
    53dc:	2300      	movs	r3, #0
    53de:	e7a9      	b.n	5334 <fnmatchx+0x192>
        } else if (c == test)
    53e0:	9b00      	ldr	r3, [sp, #0]
    53e2:	4635      	mov	r5, r6
    53e4:	454b      	cmp	r3, r9
    53e6:	bf08      	it	eq
    53e8:	f04f 0b01 	moveq.w	fp, #1
    53ec:	e7f6      	b.n	53dc <fnmatchx+0x23a>
        return FNM_NORES;
    53ee:	2003      	movs	r0, #3
    53f0:	e6e0      	b.n	51b4 <fnmatchx+0x12>
                return 0;
    53f2:	4608      	mov	r0, r1
    53f4:	e6de      	b.n	51b4 <fnmatchx+0x12>

000053f6 <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
    53f6:	2340      	movs	r3, #64	; 0x40
    53f8:	f7ff bed3 	b.w	51a2 <fnmatchx>

000053fc <shell_strlen>:
{
    53fc:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (u16_t)strlen(str);
    53fe:	b110      	cbz	r0, 5406 <shell_strlen+0xa>
    5400:	f000 fe6c 	bl	60dc <strlen>
    5404:	b280      	uxth	r0, r0
}
    5406:	bd08      	pop	{r3, pc}

00005408 <shell_raw_fprintf>:
{
    5408:	b40e      	push	{r1, r2, r3}
    540a:	b503      	push	{r0, r1, lr}
    540c:	aa03      	add	r2, sp, #12
    540e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    5412:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
    5414:	f7fc f942 	bl	169c <shell_fprintf_fmt>
}
    5418:	b002      	add	sp, #8
    541a:	f85d eb04 	ldr.w	lr, [sp], #4
    541e:	b003      	add	sp, #12
    5420:	4770      	bx	lr

00005422 <shell_internal_help_print>:
{
    5422:	b510      	push	{r4, lr}
    5424:	4604      	mov	r4, r0
	shell_help_cmd_print(shell);
    5426:	f7fc fc0d 	bl	1c44 <shell_help_cmd_print>
	shell_help_subcmd_print(shell);
    542a:	4620      	mov	r0, r4
}
    542c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_help_subcmd_print(shell);
    5430:	f7fc bb98 	b.w	1b64 <shell_help_subcmd_print>

00005434 <state_set.constprop.31>:
	shell->ctx->state = state;
    5434:	6883      	ldr	r3, [r0, #8]
    5436:	2202      	movs	r2, #2
    5438:	711a      	strb	r2, [r3, #4]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    543a:	2200      	movs	r2, #0
    543c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
    5440:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
    5442:	865a      	strh	r2, [r3, #50]	; 0x32
		shell_print_prompt_and_cmd(shell);
    5444:	f7fc bad0 	b.w	19e8 <shell_print_prompt_and_cmd>

00005448 <transport_evt_handler>:
	signal = (evt_type == SHELL_TRANSPORT_EVT_RX_RDY) ?
    5448:	688b      	ldr	r3, [r1, #8]
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
    544a:	b920      	cbnz	r0, 5456 <transport_evt_handler+0xe>
    544c:	f503 7017 	add.w	r0, r3, #604	; 0x25c

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL_RAISE, k_poll_signal_raise, int, struct k_poll_signal *, signal, int, result)
    5450:	2100      	movs	r1, #0
    5452:	f7ff bb9d 	b.w	4b90 <z_impl_k_poll_signal_raise>
    5456:	f503 7023 	add.w	r0, r3, #652	; 0x28c
    545a:	e7f9      	b.n	5450 <transport_evt_handler+0x8>

0000545c <shell_fprintf>:
/* This function mustn't be used from shell context to avoid deadlock.
 * However it can be used in shell command handlers.
 */
void shell_fprintf(const struct shell *shell, enum shell_vt100_color color,
		   const char *fmt, ...)
{
    545c:	b40c      	push	{r2, r3}
    545e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5460:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(shell->fprintf_ctx);
	__ASSERT_NO_MSG(fmt);

	va_list args;

	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    5462:	6880      	ldr	r0, [r0, #8]
{
    5464:	460d      	mov	r5, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    5466:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    546a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    546e:	f7fe fdbf 	bl	3ff0 <z_impl_k_mutex_lock>
	if (!flag_cmd_ctx_get(shell)) {
    5472:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.cmd_ctx == 1 ? true : false;
    5474:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    5478:	061a      	lsls	r2, r3, #24
    547a:	d402      	bmi.n	5482 <shell_fprintf+0x26>
		shell_cmd_line_erase(shell);
    547c:	4620      	mov	r0, r4
    547e:	f000 fae2 	bl	5a46 <shell_cmd_line_erase>
	}

	va_start(args, fmt);
    5482:	ab07      	add	r3, sp, #28
	shell_internal_vfprintf(shell, color, fmt, args);
    5484:	9a06      	ldr	r2, [sp, #24]
	va_start(args, fmt);
    5486:	9301      	str	r3, [sp, #4]
	shell_internal_vfprintf(shell, color, fmt, args);
    5488:	4629      	mov	r1, r5
    548a:	4620      	mov	r0, r4
    548c:	f000 fb2a 	bl	5ae4 <shell_internal_vfprintf>
	va_end(args);

	if (!flag_cmd_ctx_get(shell)) {
    5490:	68a3      	ldr	r3, [r4, #8]
    5492:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    5496:	061b      	lsls	r3, r3, #24
    5498:	d402      	bmi.n	54a0 <shell_fprintf+0x44>
		shell_print_prompt_and_cmd(shell);
    549a:	4620      	mov	r0, r4
    549c:	f7fc faa4 	bl	19e8 <shell_print_prompt_and_cmd>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
    54a0:	6960      	ldr	r0, [r4, #20]
    54a2:	f000 f80a 	bl	54ba <shell_fprintf_buffer_flush>
	}
	transport_buffer_flush(shell);
	k_mutex_unlock(&shell->ctx->wr_mtx);
    54a6:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    54a8:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    54ac:	f7fe fe10 	bl	40d0 <z_impl_k_mutex_unlock>
}
    54b0:	b003      	add	sp, #12
    54b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    54b6:	b002      	add	sp, #8
    54b8:	4770      	bx	lr

000054ba <shell_fprintf_buffer_flush>:


void shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    54ba:	6902      	ldr	r2, [r0, #16]
    54bc:	6883      	ldr	r3, [r0, #8]
    54be:	6812      	ldr	r2, [r2, #0]
    54c0:	6801      	ldr	r1, [r0, #0]
{
    54c2:	b510      	push	{r4, lr}
    54c4:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    54c6:	68c0      	ldr	r0, [r0, #12]
    54c8:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
    54ca:	6923      	ldr	r3, [r4, #16]
    54cc:	2200      	movs	r2, #0
    54ce:	601a      	str	r2, [r3, #0]
}
    54d0:	bd10      	pop	{r4, pc}

000054d2 <out_func>:
{
    54d2:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    54d4:	68cb      	ldr	r3, [r1, #12]
    54d6:	7c1b      	ldrb	r3, [r3, #16]
    54d8:	2b02      	cmp	r3, #2
{
    54da:	4605      	mov	r5, r0
    54dc:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    54de:	d104      	bne.n	54ea <out_func+0x18>
    54e0:	280a      	cmp	r0, #10
    54e2:	d102      	bne.n	54ea <out_func+0x18>
		(void)out_func('\r', ctx);
    54e4:	200d      	movs	r0, #13
    54e6:	f7ff fff4 	bl	54d2 <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (u8_t)c;
    54ea:	6923      	ldr	r3, [r4, #16]
    54ec:	6822      	ldr	r2, [r4, #0]
    54ee:	681b      	ldr	r3, [r3, #0]
    54f0:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
    54f2:	6922      	ldr	r2, [r4, #16]
    54f4:	6813      	ldr	r3, [r2, #0]
    54f6:	3301      	adds	r3, #1
    54f8:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
    54fa:	6862      	ldr	r2, [r4, #4]
    54fc:	4293      	cmp	r3, r2
    54fe:	d102      	bne.n	5506 <out_func+0x34>
		shell_fprintf_buffer_flush(sh_fprintf);
    5500:	4620      	mov	r0, r4
    5502:	f7ff ffda 	bl	54ba <shell_fprintf_buffer_flush>
}
    5506:	2000      	movs	r0, #0
    5508:	bd38      	pop	{r3, r4, r5, pc}

0000550a <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    550a:	2820      	cmp	r0, #32
    550c:	d005      	beq.n	551a <isspace+0x10>
    550e:	3809      	subs	r0, #9
    5510:	2804      	cmp	r0, #4
    5512:	bf8c      	ite	hi
    5514:	2000      	movhi	r0, #0
    5516:	2001      	movls	r0, #1
    5518:	4770      	bx	lr
    551a:	2001      	movs	r0, #1
}
    551c:	4770      	bx	lr

0000551e <shell_strlen>:
{
    551e:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (u16_t)strlen(str);
    5520:	b110      	cbz	r0, 5528 <shell_strlen+0xa>
    5522:	f000 fddb 	bl	60dc <strlen>
    5526:	b280      	uxth	r0, r0
}
    5528:	bd08      	pop	{r3, pc}

0000552a <column_span_with_buffer_offsets_get>:
{
    552a:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
    552c:	7b03      	ldrb	r3, [r0, #12]
    552e:	8944      	ldrh	r4, [r0, #10]
    5530:	441a      	add	r2, r3
    5532:	4419      	add	r1, r3
    5534:	fbb2 f0f4 	udiv	r0, r2, r4
    5538:	fbb1 f3f4 	udiv	r3, r1, r4
    553c:	fb04 2010 	mls	r0, r4, r0, r2
    5540:	fb04 1313 	mls	r3, r4, r3, r1
}
    5544:	1ac0      	subs	r0, r0, r3
    5546:	bd10      	pop	{r4, pc}

00005548 <row_span_with_buffer_offsets_get>:
{
    5548:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
    554a:	7b03      	ldrb	r3, [r0, #12]
    554c:	8944      	ldrh	r4, [r0, #10]
    554e:	441a      	add	r2, r3
    5550:	4419      	add	r1, r3
    5552:	fbb2 f0f4 	udiv	r0, r2, r4
    5556:	fbb1 f1f4 	udiv	r1, r1, r4
}
    555a:	1a40      	subs	r0, r0, r1
    555c:	bd10      	pop	{r4, pc}

0000555e <shell_multiline_data_calc>:
{
    555e:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    5560:	7b04      	ldrb	r4, [r0, #12]
    5562:	8945      	ldrh	r5, [r0, #10]
    5564:	4421      	add	r1, r4
    5566:	fbb1 f3f5 	udiv	r3, r1, r5
    556a:	fb05 1113 	mls	r1, r5, r3, r1
    556e:	3101      	adds	r1, #1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    5570:	3301      	adds	r3, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    5572:	4422      	add	r2, r4
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    5574:	8001      	strh	r1, [r0, #0]
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    5576:	8083      	strh	r3, [r0, #4]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    5578:	fbb2 f3f5 	udiv	r3, r2, r5
    557c:	1c59      	adds	r1, r3, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    557e:	fb05 2313 	mls	r3, r5, r3, r2
    5582:	3301      	adds	r3, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    5584:	80c1      	strh	r1, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    5586:	8043      	strh	r3, [r0, #2]
}
    5588:	bd30      	pop	{r4, r5, pc}

0000558a <shell_make_argv>:
{
    558a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
    558e:	2500      	movs	r5, #0
{
    5590:	4606      	mov	r6, r0
    5592:	460f      	mov	r7, r1
    5594:	4614      	mov	r4, r2
    5596:	4698      	mov	r8, r3
	*argc = 0;
    5598:	6005      	str	r5, [r0, #0]
		c = *cmd;
    559a:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
    559c:	b140      	cbz	r0, 55b0 <shell_make_argv+0x26>
		if (isspace((int) c)) {
    559e:	f7ff ffb4 	bl	550a <isspace>
    55a2:	b160      	cbz	r0, 55be <shell_make_argv+0x34>
			*cmd++ = '\0';
    55a4:	2300      	movs	r3, #0
    55a6:	f804 3b01 	strb.w	r3, [r4], #1
	} while (*argc < max_argc);
    55aa:	6833      	ldr	r3, [r6, #0]
    55ac:	4543      	cmp	r3, r8
    55ae:	d3f4      	bcc.n	559a <shell_make_argv+0x10>
	argv[*argc] = 0;
    55b0:	6833      	ldr	r3, [r6, #0]
    55b2:	2200      	movs	r2, #0
    55b4:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
}
    55b8:	4628      	mov	r0, r5
    55ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		argv[(*argc)++] = cmd;
    55be:	6833      	ldr	r3, [r6, #0]
    55c0:	1c5a      	adds	r2, r3, #1
    55c2:	6032      	str	r2, [r6, #0]
    55c4:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
	char quote = 0;
    55c8:	4605      	mov	r5, r0
		c = *cmd;
    55ca:	f894 9000 	ldrb.w	r9, [r4]
		if (c == '\0') {
    55ce:	f1b9 0f00 	cmp.w	r9, #0
    55d2:	d0ea      	beq.n	55aa <shell_make_argv+0x20>
		if (!quote) {
    55d4:	2d00      	cmp	r5, #0
    55d6:	f040 8089 	bne.w	56ec <shell_make_argv+0x162>
			switch (c) {
    55da:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
    55de:	d006      	beq.n	55ee <shell_make_argv+0x64>
    55e0:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    55e4:	f000 808a 	beq.w	56fc <shell_make_argv+0x172>
    55e8:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
    55ec:	d176      	bne.n	56dc <shell_make_argv+0x152>
						shell_strlen(cmd));
    55ee:	4620      	mov	r0, r4
    55f0:	f7ff ff95 	bl	551e <shell_strlen>
				memmove(cmd, cmd + 1,
    55f4:	1c61      	adds	r1, r4, #1
    55f6:	4602      	mov	r2, r0
    55f8:	4620      	mov	r0, r4
    55fa:	f000 fda1 	bl	6140 <memmove>
    55fe:	464d      	mov	r5, r9
    5600:	e7e3      	b.n	55ca <shell_make_argv+0x40>
			memmove(cmd, cmd + 1, shell_strlen(cmd));
    5602:	4620      	mov	r0, r4
    5604:	f7ff ff8b 	bl	551e <shell_strlen>
    5608:	1c61      	adds	r1, r4, #1
    560a:	4602      	mov	r2, r0
    560c:	4620      	mov	r0, r4
    560e:	f000 fd97 	bl	6140 <memmove>
			quote = 0;
    5612:	2500      	movs	r5, #0
    5614:	e7d9      	b.n	55ca <shell_make_argv+0x40>
			if (t == '0') {
    5616:	2930      	cmp	r1, #48	; 0x30
    5618:	d125      	bne.n	5666 <shell_make_argv+0xdc>
    561a:	2302      	movs	r3, #2
				u8_t v = 0U;
    561c:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
    5620:	5ce1      	ldrb	r1, [r4, r3]
					if (t >= '0' && t <= '7') {
    5622:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    5626:	b2d0      	uxtb	r0, r2
    5628:	2807      	cmp	r0, #7
    562a:	fa5f f983 	uxtb.w	r9, r3
    562e:	d817      	bhi.n	5660 <shell_make_argv+0xd6>
						v = (v << 3) | (t - '0');
    5630:	3301      	adds	r3, #1
    5632:	ea42 0aca 	orr.w	sl, r2, sl, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
    5636:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
    5638:	fa5f fa8a 	uxtb.w	sl, sl
				for (i = 2U; i < (2 + 3); i++) {
    563c:	d1f0      	bne.n	5620 <shell_make_argv+0x96>
    563e:	4699      	mov	r9, r3
						shell_strlen(cmd) - (i - 2));
    5640:	4620      	mov	r0, r4
    5642:	f7ff ff6c 	bl	551e <shell_strlen>
					memmove(cmd, cmd + (i - 1),
    5646:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
    564a:	44a3      	add	fp, r4
						shell_strlen(cmd) - (i - 2));
    564c:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
    564e:	eba2 0209 	sub.w	r2, r2, r9
    5652:	4620      	mov	r0, r4
    5654:	4659      	mov	r1, fp
    5656:	f000 fd73 	bl	6140 <memmove>
					*cmd++ = v;
    565a:	f804 ab01 	strb.w	sl, [r4], #1
					continue;
    565e:	e7b4      	b.n	55ca <shell_make_argv+0x40>
				if (i > 2) {
    5660:	f1b9 0f02 	cmp.w	r9, #2
    5664:	d1ec      	bne.n	5640 <shell_make_argv+0xb6>
			if (t == 'x') {
    5666:	2978      	cmp	r1, #120	; 0x78
    5668:	d13e      	bne.n	56e8 <shell_make_argv+0x15e>
    566a:	2202      	movs	r2, #2
				u8_t v = 0U;
    566c:	f04f 0900 	mov.w	r9, #0
					t = *(cmd + i);
    5670:	5ca3      	ldrb	r3, [r4, r2]
					if (t >= '0' && t <= '9') {
    5672:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    5676:	fa5f fc81 	uxtb.w	ip, r1
    567a:	f1bc 0f09 	cmp.w	ip, #9
    567e:	b2d0      	uxtb	r0, r2
    5680:	d819      	bhi.n	56b6 <shell_make_argv+0x12c>
						v = (v << 4) | (t - '0');
    5682:	ea41 1309 	orr.w	r3, r1, r9, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
    5686:	2a03      	cmp	r2, #3
						v = (v << 4) | (t - 'A' + 10);
    5688:	fa5f f983 	uxtb.w	r9, r3
				for (i = 2U; i < (2 + 2); i++) {
    568c:	d111      	bne.n	56b2 <shell_make_argv+0x128>
    568e:	f04f 0b04 	mov.w	fp, #4
						shell_strlen(cmd) - (i - 2));
    5692:	4620      	mov	r0, r4
    5694:	f7ff ff43 	bl	551e <shell_strlen>
					memmove(cmd, cmd + (i - 1),
    5698:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
    569c:	44a2      	add	sl, r4
						shell_strlen(cmd) - (i - 2));
    569e:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
    56a0:	eba2 020b 	sub.w	r2, r2, fp
    56a4:	4620      	mov	r0, r4
    56a6:	4651      	mov	r1, sl
    56a8:	f000 fd4a 	bl	6140 <memmove>
					*cmd++ = v;
    56ac:	f804 9b01 	strb.w	r9, [r4], #1
					continue;
    56b0:	e78b      	b.n	55ca <shell_make_argv+0x40>
				for (i = 2U; i < (2 + 2); i++) {
    56b2:	2203      	movs	r2, #3
    56b4:	e7dc      	b.n	5670 <shell_make_argv+0xe6>
					} else if ((t >= 'a') &&
    56b6:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    56ba:	2905      	cmp	r1, #5
    56bc:	d803      	bhi.n	56c6 <shell_make_argv+0x13c>
						v = (v << 4) | (t - 'a' + 10);
    56be:	3b57      	subs	r3, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
    56c0:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
    56c4:	e7df      	b.n	5686 <shell_make_argv+0xfc>
					} else if ((t >= 'A') && (t <= 'F')) {
    56c6:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
    56ca:	2905      	cmp	r1, #5
    56cc:	d801      	bhi.n	56d2 <shell_make_argv+0x148>
						v = (v << 4) | (t - 'A' + 10);
    56ce:	3b37      	subs	r3, #55	; 0x37
    56d0:	e7f6      	b.n	56c0 <shell_make_argv+0x136>
				if (i > 2) {
    56d2:	2802      	cmp	r0, #2
    56d4:	d008      	beq.n	56e8 <shell_make_argv+0x15e>
    56d6:	f04f 0b03 	mov.w	fp, #3
    56da:	e7da      	b.n	5692 <shell_make_argv+0x108>
		if (!quote && isspace((int) c)) {
    56dc:	4648      	mov	r0, r9
    56de:	f7ff ff14 	bl	550a <isspace>
    56e2:	2800      	cmp	r0, #0
    56e4:	f47f af61 	bne.w	55aa <shell_make_argv+0x20>
		cmd += 1;
    56e8:	3401      	adds	r4, #1
    56ea:	e76e      	b.n	55ca <shell_make_argv+0x40>
		if (quote == c) {
    56ec:	45a9      	cmp	r9, r5
    56ee:	d088      	beq.n	5602 <shell_make_argv+0x78>
		if (quote && c == '\\') {
    56f0:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    56f4:	d1f8      	bne.n	56e8 <shell_make_argv+0x15e>
    56f6:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
    56f8:	428d      	cmp	r5, r1
    56fa:	d18c      	bne.n	5616 <shell_make_argv+0x8c>
						shell_strlen(cmd));
    56fc:	4620      	mov	r0, r4
    56fe:	f7ff ff0e 	bl	551e <shell_strlen>
				memmove(cmd, cmd + 1,
    5702:	f104 0901 	add.w	r9, r4, #1
    5706:	4602      	mov	r2, r0
    5708:	4649      	mov	r1, r9
    570a:	4620      	mov	r0, r4
    570c:	f000 fd18 	bl	6140 <memmove>
				cmd += 1;
    5710:	464c      	mov	r4, r9
    5712:	e75a      	b.n	55ca <shell_make_argv+0x40>

00005714 <shell_pattern_remove>:
{
    5714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5716:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
    5718:	4611      	mov	r1, r2
{
    571a:	4615      	mov	r5, r2
    571c:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
    571e:	f000 fca8 	bl	6072 <strstr>
    5722:	4604      	mov	r4, r0
	u16_t pattern_len = shell_strlen(pattern);
    5724:	4628      	mov	r0, r5
    5726:	f7ff fefa 	bl	551e <shell_strlen>
    572a:	4605      	mov	r5, r0
	if (!pattern_addr) {
    572c:	b1c4      	cbz	r4, 5760 <shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
    572e:	42a7      	cmp	r7, r4
    5730:	d207      	bcs.n	5742 <shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
    5732:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    5736:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
    5738:	bf02      	ittt	eq
    573a:	3501      	addeq	r5, #1
    573c:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
    573e:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    5742:	4620      	mov	r0, r4
    5744:	f7ff feeb 	bl	551e <shell_strlen>
	*buff_len -= pattern_len;
    5748:	8833      	ldrh	r3, [r6, #0]
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    574a:	1b42      	subs	r2, r0, r5
	*buff_len -= pattern_len;
    574c:	1b5b      	subs	r3, r3, r5
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    574e:	3201      	adds	r2, #1
	*buff_len -= pattern_len;
    5750:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
    5752:	1961      	adds	r1, r4, r5
    5754:	4620      	mov	r0, r4
    5756:	b292      	uxth	r2, r2
}
    5758:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
    575c:	f000 bcf0 	b.w	6140 <memmove>
}
    5760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005762 <shell_get_last_command>:
					     size_t argc,
					     char *argv[],
					     size_t *match_arg,
					     struct shell_static_entry *d_entry,
					     bool only_static)
{
    5762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5766:	b087      	sub	sp, #28
    5768:	461d      	mov	r5, r3
	const struct shell_static_entry *prev_entry = NULL;
	const struct shell_static_entry *entry = NULL;
	const struct shell_cmd_entry *cmd = NULL;

	*match_arg = SHELL_CMD_ROOT_LVL;
    576a:	2400      	movs	r4, #0
{
    576c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
    5770:	9303      	str	r3, [sp, #12]
    5772:	4681      	mov	r9, r0
    5774:	4688      	mov	r8, r1
    5776:	4617      	mov	r7, r2
	*match_arg = SHELL_CMD_ROOT_LVL;
    5778:	602c      	str	r4, [r5, #0]
	const struct shell_static_entry *entry = NULL;
    577a:	46a2      	mov	sl, r4

	while (*match_arg < argc) {
    577c:	682b      	ldr	r3, [r5, #0]
    577e:	4543      	cmp	r3, r8
    5780:	d303      	bcc.n	578a <shell_get_last_command+0x28>
			return NULL;
		}
	}

	return entry;
}
    5782:	4650      	mov	r0, sl
    5784:	b007      	add	sp, #28
    5786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (shell_wildcard_character_exist(argv[*match_arg])) {
    578a:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
    578e:	f000 fc0b 	bl	5fa8 <shell_wildcard_character_exist>
    5792:	682e      	ldr	r6, [r5, #0]
    5794:	b110      	cbz	r0, 579c <shell_get_last_command+0x3a>
				(*match_arg)++;
    5796:	3601      	adds	r6, #1
    5798:	602e      	str	r6, [r5, #0]
				continue;
    579a:	e7ef      	b.n	577c <shell_get_last_command+0x1a>
		entry = find_cmd(shell, cmd, *match_arg, argv[*match_arg],
    579c:	f857 b026 	ldr.w	fp, [r7, r6, lsl #2]
	const struct shell_static_entry *entry = NULL;
    57a0:	9005      	str	r0, [sp, #20]
	size_t idx = 0;
    57a2:	4603      	mov	r3, r0
		shell_cmd_get(shell, cmd, lvl, idx++, &entry, d_entry);
    57a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    57a6:	9201      	str	r2, [sp, #4]
    57a8:	aa05      	add	r2, sp, #20
    57aa:	9200      	str	r2, [sp, #0]
    57ac:	4621      	mov	r1, r4
    57ae:	4632      	mov	r2, r6
    57b0:	4648      	mov	r0, r9
    57b2:	f103 0a01 	add.w	sl, r3, #1
    57b6:	f7fb ff85 	bl	16c4 <shell_cmd_get>
		if (entry && (strcmp(cmd_str, entry->syntax) == 0)) {
    57ba:	9b05      	ldr	r3, [sp, #20]
    57bc:	b13b      	cbz	r3, 57ce <shell_get_last_command+0x6c>
    57be:	6819      	ldr	r1, [r3, #0]
    57c0:	4658      	mov	r0, fp
    57c2:	f000 fc92 	bl	60ea <strcmp>
    57c6:	9a05      	ldr	r2, [sp, #20]
    57c8:	b920      	cbnz	r0, 57d4 <shell_get_last_command+0x72>
		if (entry) {
    57ca:	4692      	mov	sl, r2
    57cc:	b932      	cbnz	r2, 57dc <shell_get_last_command+0x7a>
    57ce:	f04f 0a00 	mov.w	sl, #0
    57d2:	e7d6      	b.n	5782 <shell_get_last_command+0x20>
		shell_cmd_get(shell, cmd, lvl, idx++, &entry, d_entry);
    57d4:	4653      	mov	r3, sl
	} while (entry);
    57d6:	2a00      	cmp	r2, #0
    57d8:	d1e4      	bne.n	57a4 <shell_get_last_command+0x42>
    57da:	e7f8      	b.n	57ce <shell_get_last_command+0x6c>
			(*match_arg)++;
    57dc:	682b      	ldr	r3, [r5, #0]
			cmd = entry->subcmd;
    57de:	6894      	ldr	r4, [r2, #8]
			(*match_arg)++;
    57e0:	1c5a      	adds	r2, r3, #1
    57e2:	602a      	str	r2, [r5, #0]
		if (cmd == NULL) {
    57e4:	2c00      	cmp	r4, #0
    57e6:	d0f2      	beq.n	57ce <shell_get_last_command+0x6c>
		if (only_static && cmd->is_dynamic) {
    57e8:	9a03      	ldr	r2, [sp, #12]
    57ea:	2a00      	cmp	r2, #0
    57ec:	d0c6      	beq.n	577c <shell_get_last_command+0x1a>
    57ee:	7822      	ldrb	r2, [r4, #0]
    57f0:	2a00      	cmp	r2, #0
    57f2:	d0c3      	beq.n	577c <shell_get_last_command+0x1a>
			(*match_arg)--;
    57f4:	602b      	str	r3, [r5, #0]
			return NULL;
    57f6:	e7ea      	b.n	57ce <shell_get_last_command+0x6c>

000057f8 <shell_spaces_trim>:

	return 0;
}

void shell_spaces_trim(char *str)
{
    57f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    57fc:	4607      	mov	r7, r0
	u16_t len = shell_strlen(str);
    57fe:	f7ff fe8e 	bl	551e <shell_strlen>
    5802:	4680      	mov	r8, r0
	u16_t shift = 0U;

	if (!str) {
    5804:	bb4f      	cbnz	r7, 585a <shell_spaces_trim+0x62>

				break;
			}
		}
	}
}
    5806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
    580a:	b15c      	cbz	r4, 5824 <shell_spaces_trim+0x2c>
						len - shift + 1);
    580c:	f108 0201 	add.w	r2, r8, #1
					memmove(&str[i + 1],
    5810:	1c68      	adds	r0, r5, #1
    5812:	1b12      	subs	r2, r2, r4
    5814:	4438      	add	r0, r7
    5816:	f000 fc93 	bl	6140 <memmove>
					len -= shift;
    581a:	eba8 0404 	sub.w	r4, r8, r4
    581e:	fa1f f884 	uxth.w	r8, r4
					shift = 0U;
    5822:	464c      	mov	r4, r9
	for (u16_t i = 0; i < len - 1; i++) {
    5824:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    5828:	429e      	cmp	r6, r3
    582a:	daec      	bge.n	5806 <shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
    582c:	5db8      	ldrb	r0, [r7, r6]
    582e:	f7ff fe6c 	bl	550a <isspace>
    5832:	4635      	mov	r5, r6
    5834:	3601      	adds	r6, #1
    5836:	b2b6      	uxth	r6, r6
    5838:	2800      	cmp	r0, #0
    583a:	d0f3      	beq.n	5824 <shell_spaces_trim+0x2c>
			for (u16_t j = i + 1; j < len; j++) {
    583c:	4633      	mov	r3, r6
    583e:	b29a      	uxth	r2, r3
    5840:	4590      	cmp	r8, r2
    5842:	d9ef      	bls.n	5824 <shell_spaces_trim+0x2c>
				if (isspace((int)str[j])) {
    5844:	5cf8      	ldrb	r0, [r7, r3]
    5846:	18f9      	adds	r1, r7, r3
    5848:	f7ff fe5f 	bl	550a <isspace>
    584c:	3301      	adds	r3, #1
    584e:	4681      	mov	r9, r0
    5850:	2800      	cmp	r0, #0
    5852:	d0da      	beq.n	580a <shell_spaces_trim+0x12>
					shift++;
    5854:	3401      	adds	r4, #1
    5856:	b2a4      	uxth	r4, r4
					continue;
    5858:	e7f1      	b.n	583e <shell_spaces_trim+0x46>
	for (u16_t i = 0; i < len - 1; i++) {
    585a:	2600      	movs	r6, #0
	u16_t shift = 0U;
    585c:	4634      	mov	r4, r6
    585e:	e7e1      	b.n	5824 <shell_spaces_trim+0x2c>

00005860 <shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void shell_cmd_trim(const struct shell *shell)
{
    5860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    5864:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
    5866:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
{
    586a:	4606      	mov	r6, r0
	if (buff[0] == '\0') {
    586c:	b95b      	cbnz	r3, 5886 <shell_cmd_trim+0x26>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    586e:	68b3      	ldr	r3, [r6, #8]
    5870:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    5872:	869a      	strh	r2, [r3, #52]	; 0x34
}
    5874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*buff_len -= 1U;
    5878:	3b01      	subs	r3, #1
    587a:	b29b      	uxth	r3, r3
    587c:	8663      	strh	r3, [r4, #50]	; 0x32
		if (*buff_len == 0U) {
    587e:	b923      	cbnz	r3, 588a <shell_cmd_trim+0x2a>
			buff[0] = '\0';
    5880:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			return;
    5884:	e7f3      	b.n	586e <shell_cmd_trim+0xe>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    5886:	f104 0538 	add.w	r5, r4, #56	; 0x38
	while (isspace((int) buff[*buff_len - 1U])) {
    588a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    588c:	18ea      	adds	r2, r5, r3
    588e:	f812 0c01 	ldrb.w	r0, [r2, #-1]
    5892:	f7ff fe3a 	bl	550a <isspace>
    5896:	2800      	cmp	r0, #0
    5898:	d1ee      	bne.n	5878 <shell_cmd_trim+0x18>
	buff[*buff_len] = '\0';
    589a:	54e8      	strb	r0, [r5, r3]
    589c:	4603      	mov	r3, r0
    589e:	fa1f f883 	uxth.w	r8, r3
	}
    58a2:	4647      	mov	r7, r8
	while (isspace((int) buff[i++])) {
    58a4:	f815 0008 	ldrb.w	r0, [r5, r8]
    58a8:	19e9      	adds	r1, r5, r7
    58aa:	f7ff fe2e 	bl	550a <isspace>
    58ae:	3301      	adds	r3, #1
    58b0:	2800      	cmp	r0, #0
    58b2:	d1f4      	bne.n	589e <shell_cmd_trim+0x3e>
	if (--i > 0) {
    58b4:	f1b8 0f00 	cmp.w	r8, #0
    58b8:	d0d9      	beq.n	586e <shell_cmd_trim+0xe>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
    58ba:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    58bc:	3201      	adds	r2, #1
    58be:	1bd2      	subs	r2, r2, r7
    58c0:	4628      	mov	r0, r5
    58c2:	f000 fc3d 	bl	6140 <memmove>
		*buff_len = *buff_len - i;
    58c6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    58c8:	eba3 0308 	sub.w	r3, r3, r8
    58cc:	8663      	strh	r3, [r4, #50]	; 0x32
    58ce:	e7ce      	b.n	586e <shell_cmd_trim+0xe>

000058d0 <shell_raw_fprintf>:
{
    58d0:	b40e      	push	{r1, r2, r3}
    58d2:	b503      	push	{r0, r1, lr}
    58d4:	aa03      	add	r2, sp, #12
    58d6:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    58da:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
    58dc:	f7fb fede 	bl	169c <shell_fprintf_fmt>
}
    58e0:	b002      	add	sp, #8
    58e2:	f85d eb04 	ldr.w	lr, [sp], #4
    58e6:	b003      	add	sp, #12
    58e8:	4770      	bx	lr

000058ea <full_line_cmd.isra.8>:
static inline bool full_line_cmd(const struct shell *shell)
    58ea:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
    58ec:	6803      	ldr	r3, [r0, #0]
static inline bool full_line_cmd(const struct shell *shell)
    58ee:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
    58f0:	6818      	ldr	r0, [r3, #0]
    58f2:	8e5d      	ldrh	r5, [r3, #50]	; 0x32
	return str == NULL ? 0U : (u16_t)strlen(str);
    58f4:	b110      	cbz	r0, 58fc <full_line_cmd.isra.8+0x12>
    58f6:	f000 fbf1 	bl	60dc <strlen>
    58fa:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    58fc:	6823      	ldr	r3, [r4, #0]
    58fe:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
    5900:	4428      	add	r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    5902:	fbb0 f3f2 	udiv	r3, r0, r2
    5906:	fb02 0013 	mls	r0, r2, r3, r0
}
    590a:	fab0 f080 	clz	r0, r0
    590e:	0940      	lsrs	r0, r0, #5
    5910:	bd38      	pop	{r3, r4, r5, pc}

00005912 <shell_cursor_in_empty_line>:
{
    5912:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
    5914:	6883      	ldr	r3, [r0, #8]
{
    5916:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
    5918:	6818      	ldr	r0, [r3, #0]
    591a:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
    591c:	b110      	cbz	r0, 5924 <shell_cursor_in_empty_line+0x12>
    591e:	f000 fbdd 	bl	60dc <strlen>
    5922:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    5924:	68a3      	ldr	r3, [r4, #8]
    5926:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
    5928:	4428      	add	r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    592a:	fbb0 f3f2 	udiv	r3, r0, r2
    592e:	fb02 0013 	mls	r0, r2, r3, r0
}
    5932:	fab0 f080 	clz	r0, r0
    5936:	0940      	lsrs	r0, r0, #5
    5938:	bd38      	pop	{r3, r4, r5, pc}

0000593a <shell_op_cursor_move>:
{
    593a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    593c:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    593e:	6880      	ldr	r0, [r0, #8]
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
    5940:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    5942:	8e42      	ldrh	r2, [r0, #50]	; 0x32
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
    5944:	4419      	add	r1, r3
    5946:	b28d      	uxth	r5, r1
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    5948:	3020      	adds	r0, #32
    594a:	4619      	mov	r1, r3
    594c:	f7ff fe07 	bl	555e <shell_multiline_data_calc>
	row_span = row_span_with_buffer_offsets_get(&shell->ctx->vt100_ctx.cons,
    5950:	68a0      	ldr	r0, [r4, #8]
    5952:	462a      	mov	r2, r5
    5954:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    5956:	3020      	adds	r0, #32
    5958:	f7ff fdf6 	bl	5548 <row_span_with_buffer_offsets_get>
    595c:	4607      	mov	r7, r0
						    &shell->ctx->vt100_ctx.cons,
    595e:	68a0      	ldr	r0, [r4, #8]
	col_span = column_span_with_buffer_offsets_get(
    5960:	462a      	mov	r2, r5
    5962:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    5964:	3020      	adds	r0, #32
    5966:	f7ff fde0 	bl	552a <column_span_with_buffer_offsets_get>
	shell_op_cursor_vert_move(shell, -row_span);
    596a:	4279      	negs	r1, r7
	col_span = column_span_with_buffer_offsets_get(
    596c:	4606      	mov	r6, r0
	shell_op_cursor_vert_move(shell, -row_span);
    596e:	4620      	mov	r0, r4
    5970:	f7fb feda 	bl	1728 <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, col_span);
    5974:	4631      	mov	r1, r6
    5976:	4620      	mov	r0, r4
    5978:	f7fb fee6 	bl	1748 <shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
    597c:	68a3      	ldr	r3, [r4, #8]
    597e:	869d      	strh	r5, [r3, #52]	; 0x34
}
    5980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005982 <shell_op_cursor_word_move>:
{
    5982:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (val < 0) {
    5986:	1e0c      	subs	r4, r1, #0
{
    5988:	4606      	mov	r6, r0
	if (val < 0) {
    598a:	da32      	bge.n	59f2 <shell_op_cursor_word_move+0x70>
		val = -val;
    598c:	4264      	negs	r4, r4
    598e:	b224      	sxth	r4, r4
		sign = -1;
    5990:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    5994:	b2af      	uxth	r7, r5
    5996:	e022      	b.n	59de <shell_op_cursor_word_move+0x5c>
		shift = shift_calc(shell->ctx->cmd_buff,
    5998:	68b3      	ldr	r3, [r6, #8]
    599a:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
    599e:	f8b3 9032 	ldrh.w	r9, [r3, #50]	; 0x32
    59a2:	f103 0838 	add.w	r8, r3, #56	; 0x38
	bool found = false;
    59a6:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
    59a8:	4673      	mov	r3, lr
		idx = pos + ret * sign;
    59aa:	eba3 010e 	sub.w	r1, r3, lr
    59ae:	b209      	sxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
    59b0:	b90b      	cbnz	r3, 59b6 <shell_op_cursor_word_move+0x34>
    59b2:	1c6a      	adds	r2, r5, #1
    59b4:	d010      	beq.n	59d8 <shell_op_cursor_word_move+0x56>
    59b6:	4599      	cmp	r9, r3
    59b8:	d101      	bne.n	59be <shell_op_cursor_word_move+0x3c>
		    ((idx == len) && (sign > 0))) {
    59ba:	2d01      	cmp	r5, #1
    59bc:	d00c      	beq.n	59d8 <shell_op_cursor_word_move+0x56>
		if (isalnum((int)str[idx]) != 0) {
    59be:	f818 2003 	ldrb.w	r2, [r8, r3]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    59c2:	f042 0c20 	orr.w	ip, r2, #32
    59c6:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
    59ca:	f1bc 0f19 	cmp.w	ip, #25
    59ce:	d90c      	bls.n	59ea <shell_op_cursor_word_move+0x68>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    59d0:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
    59d2:	2a09      	cmp	r2, #9
    59d4:	d909      	bls.n	59ea <shell_op_cursor_word_move+0x68>
			if (found) {
    59d6:	b148      	cbz	r0, 59ec <shell_op_cursor_word_move+0x6a>
		shell_op_cursor_move(shell, sign * shift);
    59d8:	4630      	mov	r0, r6
    59da:	f7ff ffae 	bl	593a <shell_op_cursor_move>
	while (val--) {
    59de:	3c01      	subs	r4, #1
    59e0:	b224      	sxth	r4, r4
    59e2:	1c63      	adds	r3, r4, #1
    59e4:	d1d8      	bne.n	5998 <shell_op_cursor_word_move+0x16>
}
    59e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
    59ea:	2001      	movs	r0, #1
		ret++;
    59ec:	443b      	add	r3, r7
    59ee:	b29b      	uxth	r3, r3
    59f0:	e7db      	b.n	59aa <shell_op_cursor_word_move+0x28>
		sign = 1;
    59f2:	2501      	movs	r5, #1
    59f4:	e7ce      	b.n	5994 <shell_op_cursor_word_move+0x12>

000059f6 <shell_op_cursor_home_move>:
	shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
    59f6:	6883      	ldr	r3, [r0, #8]
    59f8:	8e99      	ldrh	r1, [r3, #52]	; 0x34
    59fa:	4249      	negs	r1, r1
    59fc:	b209      	sxth	r1, r1
    59fe:	f7ff bf9c 	b.w	593a <shell_op_cursor_move>

00005a02 <shell_op_cursor_end_move>:
	shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
    5a02:	6883      	ldr	r3, [r0, #8]
    5a04:	8e59      	ldrh	r1, [r3, #50]	; 0x32
    5a06:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    5a08:	1ac9      	subs	r1, r1, r3
    5a0a:	b209      	sxth	r1, r1
    5a0c:	f7ff bf95 	b.w	593a <shell_op_cursor_move>

00005a10 <shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
    5a10:	6883      	ldr	r3, [r0, #8]
    5a12:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    5a14:	b11b      	cbz	r3, 5a1e <shell_op_left_arrow+0xe>
		shell_op_cursor_move(shell, -1);
    5a16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5a1a:	f7ff bf8e 	b.w	593a <shell_op_cursor_move>
}
    5a1e:	4770      	bx	lr

00005a20 <shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
    5a20:	6883      	ldr	r3, [r0, #8]
    5a22:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    5a24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    5a26:	429a      	cmp	r2, r3
    5a28:	d202      	bcs.n	5a30 <shell_op_right_arrow+0x10>
		shell_op_cursor_move(shell, 1);
    5a2a:	2101      	movs	r1, #1
    5a2c:	f7ff bf85 	b.w	593a <shell_op_cursor_move>
}
    5a30:	4770      	bx	lr

00005a32 <shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
    5a32:	6883      	ldr	r3, [r0, #8]
    5a34:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    5a36:	865a      	strh	r2, [r3, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
    5a38:	4413      	add	r3, r2
    5a3a:	2200      	movs	r2, #0
    5a3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	clear_eos(shell);
    5a40:	6940      	ldr	r0, [r0, #20]
    5a42:	f7fb be69 	b.w	1718 <clear_eos.isra.6>

00005a46 <shell_cmd_line_erase>:
{
    5a46:	b510      	push	{r4, lr}
    5a48:	4604      	mov	r4, r0
	shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    5a4a:	6880      	ldr	r0, [r0, #8]
    5a4c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    5a4e:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    5a50:	3020      	adds	r0, #32
    5a52:	f7ff fd84 	bl	555e <shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
    5a56:	68a3      	ldr	r3, [r4, #8]
    5a58:	8c19      	ldrh	r1, [r3, #32]
	shell_op_cursor_horiz_move(shell,
    5a5a:	4620      	mov	r0, r4
    5a5c:	f1c1 0101 	rsb	r1, r1, #1
    5a60:	f7fb fe72 	bl	1748 <shell_op_cursor_horiz_move>
	shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
    5a64:	68a3      	ldr	r3, [r4, #8]
    5a66:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    5a68:	4620      	mov	r0, r4
    5a6a:	3901      	subs	r1, #1
    5a6c:	f7fb fe5c 	bl	1728 <shell_op_cursor_vert_move>
	clear_eos(shell);
    5a70:	6960      	ldr	r0, [r4, #20]
}
    5a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	clear_eos(shell);
    5a76:	f7fb be4f 	b.w	1718 <clear_eos.isra.6>

00005a7a <shell_write>:
{
    5a7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5a7e:	4607      	mov	r7, r0
    5a80:	4688      	mov	r8, r1
    5a82:	4614      	mov	r4, r2
	size_t offset = 0;
    5a84:	2600      	movs	r6, #0
	while (length) {
    5a86:	b914      	cbnz	r4, 5a8e <shell_write+0x14>
}
    5a88:	b002      	add	sp, #8
    5a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
    5a8e:	6878      	ldr	r0, [r7, #4]
    5a90:	6803      	ldr	r3, [r0, #0]
    5a92:	4622      	mov	r2, r4
    5a94:	68dd      	ldr	r5, [r3, #12]
    5a96:	eb08 0106 	add.w	r1, r8, r6
    5a9a:	ab01      	add	r3, sp, #4
    5a9c:	47a8      	blx	r5
		offset += tmp_cnt;
    5a9e:	9d01      	ldr	r5, [sp, #4]
    5aa0:	442e      	add	r6, r5
		length -= tmp_cnt;
    5aa2:	1b64      	subs	r4, r4, r5
		if (tmp_cnt == 0 &&
    5aa4:	2d00      	cmp	r5, #0
    5aa6:	d1ee      	bne.n	5a86 <shell_write+0xc>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
    5aa8:	68b8      	ldr	r0, [r7, #8]
    5aaa:	7903      	ldrb	r3, [r0, #4]
		if (tmp_cnt == 0 &&
    5aac:	2b03      	cmp	r3, #3
    5aae:	d0ea      	beq.n	5a86 <shell_write+0xc>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
    5ab0:	2b02      	cmp	r3, #2
    5ab2:	d80a      	bhi.n	5aca <shell_write+0x50>
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
    5ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5ab8:	2101      	movs	r1, #1
    5aba:	f500 7036 	add.w	r0, r0, #728	; 0x2d8
    5abe:	f7fe ffcd 	bl	4a5c <z_impl_k_poll>
    5ac2:	68bb      	ldr	r3, [r7, #8]
    5ac4:	f8c3 5294 	str.w	r5, [r3, #660]	; 0x294
    5ac8:	e7dd      	b.n	5a86 <shell_write+0xc>
	return shell->ctx->internal.flags.tx_rdy == 1 ? true : false;
    5aca:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
		while (!flag_tx_rdy_get(shell)) {
    5ace:	06db      	lsls	r3, r3, #27
    5ad0:	d5fb      	bpl.n	5aca <shell_write+0x50>
	shell->ctx->internal.flags.tx_rdy = val ? 1 : 0;
    5ad2:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    5ad6:	f36f 1304 	bfc	r3, #4, #1
    5ada:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
    5ade:	e7d2      	b.n	5a86 <shell_write+0xc>

00005ae0 <shell_print_stream>:
	shell_write((const struct shell *) user_ctx, data, data_len);
    5ae0:	f7ff bfcb 	b.w	5a7a <shell_write>

00005ae4 <shell_internal_vfprintf>:

void shell_internal_vfprintf(const struct shell *shell,
			     enum shell_vt100_color color, const char *fmt,
			     va_list args)
{
    5ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5ae6:	460f      	mov	r7, r1
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
	    shell->ctx->internal.flags.use_colors &&
    5ae8:	6881      	ldr	r1, [r0, #8]
{
    5aea:	461e      	mov	r6, r3
	    shell->ctx->internal.flags.use_colors &&
    5aec:	f8d1 3258 	ldr.w	r3, [r1, #600]	; 0x258
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    5af0:	079b      	lsls	r3, r3, #30
{
    5af2:	4604      	mov	r4, r0
    5af4:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    5af6:	d517      	bpl.n	5b28 <shell_internal_vfprintf+0x44>
	    shell->ctx->internal.flags.use_colors &&
    5af8:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    5afc:	42bb      	cmp	r3, r7
    5afe:	d013      	beq.n	5b28 <shell_internal_vfprintf+0x44>
			   enum shell_vt100_color color);

static inline void shell_vt100_colors_store(const struct shell *shell,
					    struct shell_vt100_colors *color)
{
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
    5b00:	2202      	movs	r2, #2
    5b02:	312e      	adds	r1, #46	; 0x2e
    5b04:	a801      	add	r0, sp, #4
    5b06:	f000 fb32 	bl	616e <memcpy>
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		shell_vt100_colors_store(shell, &col);
		shell_vt100_color_set(shell, color);
    5b0a:	4639      	mov	r1, r7
    5b0c:	4620      	mov	r0, r4
    5b0e:	f7fb fe71 	bl	17f4 <shell_vt100_color_set>

		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    5b12:	4629      	mov	r1, r5
    5b14:	6960      	ldr	r0, [r4, #20]
    5b16:	4632      	mov	r2, r6
    5b18:	f7fb fdc0 	bl	169c <shell_fprintf_fmt>

		shell_vt100_colors_restore(shell, &col);
    5b1c:	a901      	add	r1, sp, #4
    5b1e:	4620      	mov	r0, r4
    5b20:	f7fb fe8c 	bl	183c <shell_vt100_colors_restore>
	} else {
		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
    5b24:	b003      	add	sp, #12
    5b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    5b28:	4632      	mov	r2, r6
    5b2a:	4629      	mov	r1, r5
    5b2c:	6960      	ldr	r0, [r4, #20]
    5b2e:	f7fb fdb5 	bl	169c <shell_fprintf_fmt>
}
    5b32:	e7f7      	b.n	5b24 <shell_internal_vfprintf+0x40>

00005b34 <shell_internal_fprintf>:

void shell_internal_fprintf(const struct shell *shell,
			    enum shell_vt100_color color,
			    const char *fmt, ...)
{
    5b34:	b40c      	push	{r2, r3}
    5b36:	b507      	push	{r0, r1, r2, lr}
    5b38:	ab04      	add	r3, sp, #16
    5b3a:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT_NO_MSG(shell->fprintf_ctx);
	__ASSERT_NO_MSG(fmt);

	va_list args;

	va_start(args, fmt);
    5b3e:	9301      	str	r3, [sp, #4]
	shell_internal_vfprintf(shell, color, fmt, args);
    5b40:	f7ff ffd0 	bl	5ae4 <shell_internal_vfprintf>
	va_end(args);
}
    5b44:	b003      	add	sp, #12
    5b46:	f85d eb04 	ldr.w	lr, [sp], #4
    5b4a:	b002      	add	sp, #8
    5b4c:	4770      	bx	lr

00005b4e <data_insert>:
{
    5b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    5b52:	6886      	ldr	r6, [r0, #8]
    5b54:	8e74      	ldrh	r4, [r6, #50]	; 0x32
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    5b56:	18a3      	adds	r3, r4, r2
    5b58:	2bff      	cmp	r3, #255	; 0xff
{
    5b5a:	4607      	mov	r7, r0
    5b5c:	4688      	mov	r8, r1
    5b5e:	4615      	mov	r5, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    5b60:	dc1f      	bgt.n	5ba2 <data_insert+0x54>
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    5b62:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
    5b64:	1ae4      	subs	r4, r4, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    5b66:	3338      	adds	r3, #56	; 0x38
    5b68:	441e      	add	r6, r3
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    5b6a:	b2a4      	uxth	r4, r4
	memmove(curr_pos + len, curr_pos, after);
    5b6c:	4622      	mov	r2, r4
    5b6e:	4631      	mov	r1, r6
    5b70:	1970      	adds	r0, r6, r5
    5b72:	f000 fae5 	bl	6140 <memmove>
	memcpy(curr_pos, data, len);
    5b76:	462a      	mov	r2, r5
    5b78:	4641      	mov	r1, r8
    5b7a:	4630      	mov	r0, r6
    5b7c:	f000 faf7 	bl	616e <memcpy>
	shell->ctx->cmd_buff_len += len;
    5b80:	68ba      	ldr	r2, [r7, #8]
    5b82:	8e53      	ldrh	r3, [r2, #50]	; 0x32
    5b84:	442b      	add	r3, r5
    5b86:	b29b      	uxth	r3, r3
    5b88:	8653      	strh	r3, [r2, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    5b8a:	4413      	add	r3, r2
    5b8c:	2200      	movs	r2, #0
    5b8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (!flag_echo_get(shell)) {
    5b92:	68bb      	ldr	r3, [r7, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    5b94:	f8d3 1258 	ldr.w	r1, [r3, #600]	; 0x258
    5b98:	0749      	lsls	r1, r1, #29
    5b9a:	d404      	bmi.n	5ba6 <data_insert+0x58>
		shell->ctx->cmd_buff_pos += len;
    5b9c:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    5b9e:	4415      	add	r5, r2
    5ba0:	869d      	strh	r5, [r3, #52]	; 0x34
}
    5ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
    5ba6:	4621      	mov	r1, r4
    5ba8:	4638      	mov	r0, r7
}
    5baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
    5bae:	f7fb bebf 	b.w	1930 <reprint_from_cursor>

00005bb2 <shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
    5bb2:	f7ff bfcc 	b.w	5b4e <data_insert>

00005bb6 <shell_op_char_delete>:
{
    5bb6:	b538      	push	{r3, r4, r5, lr}
    5bb8:	4605      	mov	r5, r0
	u16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    5bba:	6880      	ldr	r0, [r0, #8]
    5bbc:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    5bbe:	8e44      	ldrh	r4, [r0, #50]	; 0x32
    5bc0:	1ae4      	subs	r4, r4, r3
    5bc2:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
    5bc4:	b18c      	cbz	r4, 5bea <shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    5bc6:	3338      	adds	r3, #56	; 0x38
    5bc8:	4418      	add	r0, r3
	memmove(str, str + 1, diff);
    5bca:	4622      	mov	r2, r4
    5bcc:	1c41      	adds	r1, r0, #1
    5bce:	f000 fab7 	bl	6140 <memmove>
	--shell->ctx->cmd_buff_len;
    5bd2:	68aa      	ldr	r2, [r5, #8]
    5bd4:	8e53      	ldrh	r3, [r2, #50]	; 0x32
	reprint_from_cursor(shell, --diff, true);
    5bd6:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
    5bd8:	3b01      	subs	r3, #1
    5bda:	8653      	strh	r3, [r2, #50]	; 0x32
	reprint_from_cursor(shell, --diff, true);
    5bdc:	4628      	mov	r0, r5
    5bde:	2201      	movs	r2, #1
    5be0:	b289      	uxth	r1, r1
}
    5be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
    5be6:	f7fb bea3 	b.w	1930 <reprint_from_cursor>
}
    5bea:	bd38      	pop	{r3, r4, r5, pc}

00005bec <shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
    5bec:	6883      	ldr	r3, [r0, #8]
    5bee:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
{
    5bf0:	b510      	push	{r4, lr}
    5bf2:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    5bf4:	b152      	cbz	r2, 5c0c <shell_op_char_backspace+0x20>
    5bf6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    5bf8:	b143      	cbz	r3, 5c0c <shell_op_char_backspace+0x20>
	shell_op_cursor_move(shell, -1);
    5bfa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5bfe:	f7ff fe9c 	bl	593a <shell_op_cursor_move>
	shell_op_char_delete(shell);
    5c02:	4620      	mov	r0, r4
}
    5c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_op_char_delete(shell);
    5c08:	f7ff bfd5 	b.w	5bb6 <shell_op_char_delete>
}
    5c0c:	bd10      	pop	{r4, pc}

00005c0e <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable) {
    5c0e:	6843      	ldr	r3, [r0, #4]
    5c10:	6a1b      	ldr	r3, [r3, #32]
    5c12:	b103      	cbz	r3, 5c16 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
    5c14:	4718      	bx	r3
}
    5c16:	4770      	bx	lr

00005c18 <uninit>:
}
    5c18:	2000      	movs	r0, #0
    5c1a:	4770      	bx	lr

00005c1c <enable>:
{
    5c1c:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
    5c1e:	6843      	ldr	r3, [r0, #4]
    5c20:	681b      	ldr	r3, [r3, #0]
    5c22:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
    5c24:	b111      	cbz	r1, 5c2c <enable+0x10>

K_SYSCALL_DECLARE2(K_SYSCALL_UART_CONFIG_GET, uart_config_get, int, struct device *, dev, struct uart_config *, cfg)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_ENABLE, uart_irq_tx_enable, struct device *, dev)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_DISABLE, uart_irq_tx_disable, struct device *, dev)
    5c26:	6818      	ldr	r0, [r3, #0]
    5c28:	f7ff fff1 	bl	5c0e <z_impl_uart_irq_tx_disable>
}
    5c2c:	2000      	movs	r0, #0
    5c2e:	bd08      	pop	{r3, pc}

00005c30 <read>:
{
    5c30:	b510      	push	{r4, lr}
    5c32:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
    5c34:	6843      	ldr	r3, [r0, #4]
    5c36:	68d8      	ldr	r0, [r3, #12]
    5c38:	f7ff fa89 	bl	514e <ring_buf_get>
    5c3c:	6020      	str	r0, [r4, #0]
}
    5c3e:	2000      	movs	r0, #0
    5c40:	bd10      	pop	{r4, pc}

00005c42 <write>:
{
    5c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    5c46:	6845      	ldr	r5, [r0, #4]
{
    5c48:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
    5c4a:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    5c4c:	7c1b      	ldrb	r3, [r3, #16]
{
    5c4e:	460c      	mov	r4, r1
    5c50:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    5c52:	b153      	cbz	r3, 5c6a <write+0x28>
    5c54:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
    5c58:	4544      	cmp	r4, r8
    5c5a:	682b      	ldr	r3, [r5, #0]
    5c5c:	d120      	bne.n	5ca0 <write+0x5e>
		*cnt = length;
    5c5e:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    5c60:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    5c64:	2001      	movs	r0, #1
    5c66:	4790      	blx	r2
    5c68:	e017      	b.n	5c9a <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
    5c6a:	68a8      	ldr	r0, [r5, #8]
    5c6c:	f7ff fa1a 	bl	50a4 <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5c70:	682b      	ldr	r3, [r5, #0]
    5c72:	6030      	str	r0, [r6, #0]
    5c74:	330c      	adds	r3, #12
    5c76:	2101      	movs	r1, #1
    5c78:	f3bf 8f5b 	dmb	ish
    5c7c:	e853 2f00 	ldrex	r2, [r3]
    5c80:	e843 1000 	strex	r0, r1, [r3]
    5c84:	2800      	cmp	r0, #0
    5c86:	d1f9      	bne.n	5c7c <write+0x3a>
    5c88:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
    5c8c:	b92a      	cbnz	r2, 5c9a <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
    5c8e:	682b      	ldr	r3, [r5, #0]
    5c90:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable) {
    5c92:	6843      	ldr	r3, [r0, #4]
    5c94:	69db      	ldr	r3, [r3, #28]
    5c96:	b103      	cbz	r3, 5c9a <write+0x58>
		api->irq_tx_enable(dev);
    5c98:	4798      	blx	r3
}
    5c9a:	2000      	movs	r0, #0
    5c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
    5ca0:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
    5ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
    5ca6:	6843      	ldr	r3, [r0, #4]
    5ca8:	685b      	ldr	r3, [r3, #4]
    5caa:	4798      	blx	r3
    5cac:	e7d4      	b.n	5c58 <write+0x16>

00005cae <uart_callback>:
	struct device *dev = sh_uart->ctrl_blk->dev;
    5cae:	6803      	ldr	r3, [r0, #0]
{
    5cb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct device *dev = sh_uart->ctrl_blk->dev;
    5cb4:	681e      	ldr	r6, [r3, #0]
	if (api->irq_update) {
    5cb6:	6873      	ldr	r3, [r6, #4]
    5cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
{
    5cba:	4605      	mov	r5, r0
    5cbc:	b10b      	cbz	r3, 5cc2 <uart_callback+0x14>
		return api->irq_update(dev);
    5cbe:	4630      	mov	r0, r6
    5cc0:	4798      	blx	r3
	if (api->irq_rx_ready) {
    5cc2:	6873      	ldr	r3, [r6, #4]
    5cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5cc6:	b343      	cbz	r3, 5d1a <uart_callback+0x6c>
		return api->irq_rx_ready(dev);
    5cc8:	4630      	mov	r0, r6
    5cca:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
    5ccc:	b328      	cbz	r0, 5d1a <uart_callback+0x6c>
	bool new_data = false;
    5cce:	f04f 0800 	mov.w	r8, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
    5cd2:	68e8      	ldr	r0, [r5, #12]
    5cd4:	a901      	add	r1, sp, #4
    5cd6:	6902      	ldr	r2, [r0, #16]
    5cd8:	f7ff f9b5 	bl	5046 <ring_buf_put_claim>
		if (len > 0) {
    5cdc:	682b      	ldr	r3, [r5, #0]
    5cde:	4607      	mov	r7, r0
			rd_len = uart_fifo_read(sh_uart->ctrl_blk->dev,
    5ce0:	6818      	ldr	r0, [r3, #0]
	if (api->fifo_read) {
    5ce2:	6843      	ldr	r3, [r0, #4]
		if (len > 0) {
    5ce4:	2f00      	cmp	r7, #0
    5ce6:	d03c      	beq.n	5d62 <uart_callback+0xb4>
    5ce8:	699c      	ldr	r4, [r3, #24]
    5cea:	2c00      	cmp	r4, #0
    5cec:	d037      	beq.n	5d5e <uart_callback+0xb0>
		return api->fifo_read(dev, rx_data, size);
    5cee:	463a      	mov	r2, r7
    5cf0:	9901      	ldr	r1, [sp, #4]
    5cf2:	47a0      	blx	r4
				new_data = true;
    5cf4:	1e04      	subs	r4, r0, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    5cf6:	4621      	mov	r1, r4
    5cf8:	68e8      	ldr	r0, [r5, #12]
				new_data = true;
    5cfa:	bf18      	it	ne
    5cfc:	f04f 0801 	movne.w	r8, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    5d00:	f7ff f9bd 	bl	507e <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
    5d04:	b10c      	cbz	r4, 5d0a <uart_callback+0x5c>
    5d06:	42a7      	cmp	r7, r4
    5d08:	d0e3      	beq.n	5cd2 <uart_callback+0x24>
	if (new_data) {
    5d0a:	f1b8 0f00 	cmp.w	r8, #0
    5d0e:	d004      	beq.n	5d1a <uart_callback+0x6c>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
    5d10:	682b      	ldr	r3, [r5, #0]
    5d12:	2000      	movs	r0, #0
    5d14:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    5d18:	4790      	blx	r2
	if (api->irq_tx_ready) {
    5d1a:	6873      	ldr	r3, [r6, #4]
    5d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5d1e:	b1db      	cbz	r3, 5d58 <uart_callback+0xaa>
		return api->irq_tx_ready(dev);
    5d20:	4630      	mov	r0, r6
    5d22:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
    5d24:	b1c0      	cbz	r0, 5d58 <uart_callback+0xaa>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
    5d26:	68a8      	ldr	r0, [r5, #8]
	struct device *dev = sh_uart->ctrl_blk->dev;
    5d28:	682b      	ldr	r3, [r5, #0]
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
    5d2a:	6902      	ldr	r2, [r0, #16]
	struct device *dev = sh_uart->ctrl_blk->dev;
    5d2c:	681e      	ldr	r6, [r3, #0]
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
    5d2e:	a901      	add	r1, sp, #4
    5d30:	f7ff f9d7 	bl	50e2 <ring_buf_get_claim>
	if (len) {
    5d34:	4604      	mov	r4, r0
    5d36:	b300      	cbz	r0, 5d7a <uart_callback+0xcc>
	if (api->fifo_fill) {
    5d38:	6873      	ldr	r3, [r6, #4]
    5d3a:	695b      	ldr	r3, [r3, #20]
    5d3c:	b1db      	cbz	r3, 5d76 <uart_callback+0xc8>
		return api->fifo_fill(dev, tx_data, size);
    5d3e:	4602      	mov	r2, r0
    5d40:	9901      	ldr	r1, [sp, #4]
    5d42:	4630      	mov	r0, r6
    5d44:	4798      	blx	r3
    5d46:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
    5d48:	68a8      	ldr	r0, [r5, #8]
    5d4a:	f7ff f9eb 	bl	5124 <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    5d4e:	682b      	ldr	r3, [r5, #0]
    5d50:	2001      	movs	r0, #1
    5d52:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    5d56:	4790      	blx	r2
}
    5d58:	b002      	add	sp, #8
    5d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
    5d5e:	4620      	mov	r0, r4
    5d60:	e7c8      	b.n	5cf4 <uart_callback+0x46>
	if (api->fifo_read) {
    5d62:	699b      	ldr	r3, [r3, #24]
    5d64:	b12b      	cbz	r3, 5d72 <uart_callback+0xc4>
		return api->fifo_read(dev, rx_data, size);
    5d66:	2201      	movs	r2, #1
    5d68:	f10d 0103 	add.w	r1, sp, #3
    5d6c:	4798      	blx	r3
			rd_len = uart_fifo_read(sh_uart->ctrl_blk->dev,
    5d6e:	4604      	mov	r4, r0
    5d70:	e7c8      	b.n	5d04 <uart_callback+0x56>
	return 0;
    5d72:	4638      	mov	r0, r7
    5d74:	e7fb      	b.n	5d6e <uart_callback+0xc0>
	return 0;
    5d76:	4619      	mov	r1, r3
    5d78:	e7e6      	b.n	5d48 <uart_callback+0x9a>
    5d7a:	4630      	mov	r0, r6
    5d7c:	f7ff ff47 	bl	5c0e <z_impl_uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
    5d80:	682b      	ldr	r3, [r5, #0]
    5d82:	60dc      	str	r4, [r3, #12]
    5d84:	e7e3      	b.n	5d4e <uart_callback+0xa0>

00005d86 <shell_raw_fprintf>:
{
    5d86:	b40e      	push	{r1, r2, r3}
    5d88:	b503      	push	{r0, r1, lr}
    5d8a:	aa03      	add	r2, sp, #12
    5d8c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    5d90:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
    5d92:	f7fb fc83 	bl	169c <shell_fprintf_fmt>
}
    5d96:	b002      	add	sp, #8
    5d98:	f85d eb04 	ldr.w	lr, [sp], #4
    5d9c:	b003      	add	sp, #12
    5d9e:	4770      	bx	lr

00005da0 <cmd_bacskpace_mode_backspace>:
	flag_mode_delete_set(shell, false);
    5da0:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
    5da2:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    5da6:	f36f 1245 	bfc	r2, #5, #1
    5daa:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
}
    5dae:	2000      	movs	r0, #0
    5db0:	4770      	bx	lr

00005db2 <cmd_bacskpace_mode_delete>:
	flag_mode_delete_set(shell, true);
    5db2:	6882      	ldr	r2, [r0, #8]
    5db4:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    5db8:	f043 0320 	orr.w	r3, r3, #32
    5dbc:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
}
    5dc0:	2000      	movs	r0, #0
    5dc2:	4770      	bx	lr

00005dc4 <cmd_colors_off>:
	flag_use_colors_set(shell, false);
    5dc4:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.use_colors = val ? 1 : 0;
    5dc6:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    5dca:	f36f 0241 	bfc	r2, #1, #1
    5dce:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
}
    5dd2:	2000      	movs	r0, #0
    5dd4:	4770      	bx	lr

00005dd6 <cmd_colors_on>:
	flag_use_colors_set(shell, true);
    5dd6:	6882      	ldr	r2, [r0, #8]
    5dd8:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    5ddc:	f043 0302 	orr.w	r3, r3, #2
    5de0:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
}
    5de4:	2000      	movs	r0, #0
    5de6:	4770      	bx	lr

00005de8 <cmd_echo_off>:
	flag_echo_set(shell, false);
    5de8:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.echo = val ? 1 : 0;
    5dea:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    5dee:	f36f 0282 	bfc	r2, #2, #1
    5df2:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
}
    5df6:	2000      	movs	r0, #0
    5df8:	4770      	bx	lr

00005dfa <cmd_echo_on>:
	flag_echo_set(shell, true);
    5dfa:	6882      	ldr	r2, [r0, #8]
    5dfc:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    5e00:	f043 0304 	orr.w	r3, r3, #4
    5e04:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
}
    5e08:	2000      	movs	r0, #0
    5e0a:	4770      	bx	lr

00005e0c <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
    5e0c:	6983      	ldr	r3, [r0, #24]
    5e0e:	2000      	movs	r0, #0
    5e10:	6018      	str	r0, [r3, #0]
}
    5e12:	4770      	bx	lr

00005e14 <shell_raw_fprintf>:
{
    5e14:	b40e      	push	{r1, r2, r3}
    5e16:	b503      	push	{r0, r1, lr}
    5e18:	aa03      	add	r2, sp, #12
    5e1a:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    5e1e:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
    5e20:	f7fb fc3c 	bl	169c <shell_fprintf_fmt>
}
    5e24:	b002      	add	sp, #8
    5e26:	f85d eb04 	ldr.w	lr, [sp], #4
    5e2a:	b003      	add	sp, #12
    5e2c:	4770      	bx	lr

00005e2e <remove_from_tail.part.4>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
    5e2e:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    5e30:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
    5e32:	6800      	ldr	r0, [r0, #0]
	node->prev->next = node->next;
    5e34:	e9d3 2100 	ldrd	r2, r1, [r3]
    5e38:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
    5e3a:	6051      	str	r1, [r2, #4]
	node->next = NULL;
    5e3c:	2200      	movs	r2, #0
	node->prev = NULL;
    5e3e:	e9c3 2200 	strd	r2, r2, [r3]
			h_item->len + h_item->padding;
    5e42:	8919      	ldrh	r1, [r3, #8]
    5e44:	895b      	ldrh	r3, [r3, #10]
    5e46:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
    5e48:	310c      	adds	r1, #12
    5e4a:	f7ff f96b 	bl	5124 <ring_buf_get_finish>

	return true;
}
    5e4e:	2001      	movs	r0, #1
    5e50:	bd08      	pop	{r3, pc}

00005e52 <shell_history_mode_exit>:
	history->current = NULL;
    5e52:	2300      	movs	r3, #0
    5e54:	60c3      	str	r3, [r0, #12]
}
    5e56:	4770      	bx	lr

00005e58 <shell_history_get>:
{
    5e58:	b570      	push	{r4, r5, r6, lr}
    5e5a:	4615      	mov	r5, r2
	return list->head == list;
    5e5c:	4602      	mov	r2, r0
    5e5e:	461e      	mov	r6, r3
    5e60:	f852 4f04 	ldr.w	r4, [r2, #4]!
	if (sys_dlist_is_empty(&history->list)) {
    5e64:	4294      	cmp	r4, r2
    5e66:	d102      	bne.n	5e6e <shell_history_get+0x16>
		*len = 0U;
    5e68:	2000      	movs	r0, #0
    5e6a:	8030      	strh	r0, [r6, #0]
}
    5e6c:	bd70      	pop	{r4, r5, r6, pc}
	if (!up) { /* button down */
    5e6e:	68c2      	ldr	r2, [r0, #12]
    5e70:	b9b1      	cbnz	r1, 5ea0 <shell_history_get+0x48>
		if (history->current == NULL) {
    5e72:	2a00      	cmp	r2, #0
    5e74:	d0f8      	beq.n	5e68 <shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
    5e76:	4294      	cmp	r4, r2
    5e78:	d102      	bne.n	5e80 <shell_history_get+0x28>
	history->current = l_item;
    5e7a:	2300      	movs	r3, #0
    5e7c:	60c3      	str	r3, [r0, #12]
	if (l_item) {
    5e7e:	e7f3      	b.n	5e68 <shell_history_get+0x10>
    5e80:	6854      	ldr	r4, [r2, #4]
	history->current = l_item;
    5e82:	60c4      	str	r4, [r0, #12]
	if (l_item) {
    5e84:	2c00      	cmp	r4, #0
    5e86:	d0ef      	beq.n	5e68 <shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
    5e88:	8922      	ldrh	r2, [r4, #8]
    5e8a:	f104 010c 	add.w	r1, r4, #12
    5e8e:	4628      	mov	r0, r5
    5e90:	f000 f96d 	bl	616e <memcpy>
		*len = h_item->len;
    5e94:	8922      	ldrh	r2, [r4, #8]
    5e96:	8032      	strh	r2, [r6, #0]
		dst[*len] = '\0';
    5e98:	2300      	movs	r3, #0
    5e9a:	54ab      	strb	r3, [r5, r2]
		return true;
    5e9c:	2001      	movs	r0, #1
    5e9e:	e7e5      	b.n	5e6c <shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
    5ea0:	2a00      	cmp	r2, #0
    5ea2:	d0ee      	beq.n	5e82 <shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
    5ea4:	6883      	ldr	r3, [r0, #8]
    5ea6:	4293      	cmp	r3, r2
    5ea8:	d0e7      	beq.n	5e7a <shell_history_get+0x22>
    5eaa:	6814      	ldr	r4, [r2, #0]
    5eac:	e7e9      	b.n	5e82 <shell_history_get+0x2a>

00005eae <shell_history_purge>:

void shell_history_purge(struct shell_history *history)
{
    5eae:	b538      	push	{r3, r4, r5, lr}
    5eb0:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
    5eb2:	1d05      	adds	r5, r0, #4
    5eb4:	6863      	ldr	r3, [r4, #4]
    5eb6:	42ab      	cmp	r3, r5
    5eb8:	d004      	beq.n	5ec4 <shell_history_purge+0x16>
    5eba:	4620      	mov	r0, r4
    5ebc:	f7ff ffb7 	bl	5e2e <remove_from_tail.part.4>
	while (remove_from_tail(history)) {
    5ec0:	2800      	cmp	r0, #0
    5ec2:	d1f7      	bne.n	5eb4 <shell_history_purge+0x6>
	}
}
    5ec4:	bd38      	pop	{r3, r4, r5, pc}

00005ec6 <shell_history_put>:
	u16_t padding = (~total_len + 1) & (sizeof(void *) - 1);

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    5ec6:	6803      	ldr	r3, [r0, #0]
{
    5ec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t total_len = len + offsetof(struct shell_history_item, data);
    5ecc:	f102 050c 	add.w	r5, r2, #12
	u16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
    5ed0:	426f      	negs	r7, r5
 * @return Ring buffer capacity (in 32-bit words or bytes).
 */
static inline u32_t ring_buf_capacity_get(struct ring_buf *buf)
{
	/* One element is used to distinguish between empty and full state. */
	return buf->size - 1;
    5ed2:	691b      	ldr	r3, [r3, #16]
    5ed4:	f007 0703 	and.w	r7, r7, #3
	total_len += padding;
    5ed8:	443d      	add	r5, r7
    5eda:	3b01      	subs	r3, #1
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    5edc:	429d      	cmp	r5, r3
{
    5ede:	4604      	mov	r4, r0
    5ee0:	468a      	mov	sl, r1
    5ee2:	4690      	mov	r8, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    5ee4:	d840      	bhi.n	5f68 <shell_history_put+0xa2>
	history->current = NULL;
    5ee6:	2300      	movs	r3, #0
    5ee8:	60c3      	str	r3, [r0, #12]
		return;
	}

	shell_history_mode_exit(history);

	if (len == 0) {
    5eea:	2a00      	cmp	r2, #0
    5eec:	d03c      	beq.n	5f68 <shell_history_put+0xa2>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
    5eee:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
    5ef2:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ef4:	4581      	cmp	r9, r0
    5ef6:	d12c      	bne.n	5f52 <shell_history_put+0x8c>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    5ef8:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
    5efa:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
    5efe:	462a      	mov	r2, r5
    5f00:	a901      	add	r1, sp, #4
    5f02:	6820      	ldr	r0, [r4, #0]
    5f04:	f7ff f89f 	bl	5046 <ring_buf_put_claim>
		if (claim_len < total_len) {
    5f08:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
    5f0a:	4606      	mov	r6, r0
		if (claim_len < total_len) {
    5f0c:	d92f      	bls.n	5f6e <shell_history_put+0xa8>
				ring_buf_put_claim(history->ring_buf,
    5f0e:	462a      	mov	r2, r5
    5f10:	a901      	add	r1, sp, #4
    5f12:	6820      	ldr	r0, [r4, #0]
    5f14:	f7ff f897 	bl	5046 <ring_buf_put_claim>
			if (claim2_len == total_len) {
    5f18:	4285      	cmp	r5, r0
    5f1a:	d129      	bne.n	5f70 <shell_history_put+0xaa>
				ring_buf_put_finish(history->ring_buf,
    5f1c:	4631      	mov	r1, r6
    5f1e:	6820      	ldr	r0, [r4, #0]
    5f20:	f7ff f8ad 	bl	507e <ring_buf_put_finish>
				padding += claim_len;
    5f24:	4437      	add	r7, r6
    5f26:	b2bf      	uxth	r7, r7
    5f28:	462e      	mov	r6, r5
			add_to_head(history, h_item, line, len, padding);
    5f2a:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
    5f2c:	4651      	mov	r1, sl
	item->len = len;
    5f2e:	f8a5 8008 	strh.w	r8, [r5, #8]
	item->padding = padding;
    5f32:	816f      	strh	r7, [r5, #10]
	memcpy(item->data, src, len);
    5f34:	4642      	mov	r2, r8
    5f36:	f105 000c 	add.w	r0, r5, #12
    5f3a:	f000 f918 	bl	616e <memcpy>
	node->next = list->head;
    5f3e:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
    5f40:	6820      	ldr	r0, [r4, #0]
	node->prev = list;
    5f42:	e9c5 3900 	strd	r3, r9, [r5]
    5f46:	4631      	mov	r1, r6
	list->head->prev = node;
    5f48:	605d      	str	r5, [r3, #4]
	list->head = node;
    5f4a:	6065      	str	r5, [r4, #4]
    5f4c:	f7ff f897 	bl	507e <ring_buf_put_finish>
			break;
    5f50:	e00a      	b.n	5f68 <shell_history_put+0xa2>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    5f52:	9001      	str	r0, [sp, #4]
	if (l_item &&
    5f54:	2800      	cmp	r0, #0
    5f56:	d0d0      	beq.n	5efa <shell_history_put+0x34>
	   (h_item->len == len) &&
    5f58:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
    5f5a:	4293      	cmp	r3, r2
    5f5c:	d1cd      	bne.n	5efa <shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
    5f5e:	300c      	adds	r0, #12
    5f60:	f000 f8de 	bl	6120 <memcmp>
	   (h_item->len == len) &&
    5f64:	2800      	cmp	r0, #0
    5f66:	d1c8      	bne.n	5efa <shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
    5f68:	b003      	add	sp, #12
    5f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
    5f6e:	d0dc      	beq.n	5f2a <shell_history_put+0x64>
		ring_buf_put_finish(history->ring_buf, 0);
    5f70:	2100      	movs	r1, #0
    5f72:	6820      	ldr	r0, [r4, #0]
    5f74:	f7ff f883 	bl	507e <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
    5f78:	6863      	ldr	r3, [r4, #4]
    5f7a:	4599      	cmp	r9, r3
    5f7c:	d108      	bne.n	5f90 <shell_history_put+0xca>
			ring_buf_reset(history->ring_buf);
    5f7e:	6820      	ldr	r0, [r4, #0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    5f80:	2208      	movs	r2, #8
	buf->tail = 0;
    5f82:	e9c0 bb00 	strd	fp, fp, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    5f86:	2100      	movs	r1, #0
    5f88:	4410      	add	r0, r2
    5f8a:	f000 f91a 	bl	61c2 <memset>
    5f8e:	e7b6      	b.n	5efe <shell_history_put+0x38>
    5f90:	4620      	mov	r0, r4
    5f92:	f7ff ff4c 	bl	5e2e <remove_from_tail.part.4>
		if (remove_from_tail(history) == false) {
    5f96:	2800      	cmp	r0, #0
    5f98:	d1b1      	bne.n	5efe <shell_history_put+0x38>
    5f9a:	e7f0      	b.n	5f7e <shell_history_put+0xb8>

00005f9c <shell_history_init>:

void shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
    5f9c:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
    5f9e:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
    5fa2:	2300      	movs	r3, #0
    5fa4:	60c3      	str	r3, [r0, #12]
}
    5fa6:	4770      	bx	lr

00005fa8 <shell_wildcard_character_exist>:
{
    5fa8:	b510      	push	{r4, lr}
    5faa:	4604      	mov	r4, r0
    5fac:	b908      	cbnz	r0, 5fb2 <shell_wildcard_character_exist+0xa>
	return false;
    5fae:	2000      	movs	r0, #0
}
    5fb0:	bd10      	pop	{r4, pc}
    5fb2:	f000 f893 	bl	60dc <strlen>
	for (size_t i = 0; i < str_len; i++) {
    5fb6:	2300      	movs	r3, #0
    5fb8:	b280      	uxth	r0, r0
    5fba:	4283      	cmp	r3, r0
    5fbc:	d2f7      	bcs.n	5fae <shell_wildcard_character_exist+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
    5fbe:	5ce2      	ldrb	r2, [r4, r3]
    5fc0:	2a3f      	cmp	r2, #63	; 0x3f
    5fc2:	d003      	beq.n	5fcc <shell_wildcard_character_exist+0x24>
    5fc4:	2a2a      	cmp	r2, #42	; 0x2a
    5fc6:	d001      	beq.n	5fcc <shell_wildcard_character_exist+0x24>
	for (size_t i = 0; i < str_len; i++) {
    5fc8:	3301      	adds	r3, #1
    5fca:	e7f6      	b.n	5fba <shell_wildcard_character_exist+0x12>
			return true;
    5fcc:	2001      	movs	r0, #1
    5fce:	e7ef      	b.n	5fb0 <shell_wildcard_character_exist+0x8>

00005fd0 <shell_wildcard_prepare>:
{
    5fd0:	b510      	push	{r4, lr}
    5fd2:	4604      	mov	r4, r0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    5fd4:	6880      	ldr	r0, [r0, #8]
    5fd6:	f44f 7280 	mov.w	r2, #256	; 0x100
    5fda:	2100      	movs	r1, #0
    5fdc:	f500 709c 	add.w	r0, r0, #312	; 0x138
    5fe0:	f000 f8ef 	bl	61c2 <memset>
	memcpy(shell->ctx->temp_buff,
    5fe4:	68a0      	ldr	r0, [r4, #8]
    5fe6:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    5fe8:	f100 0138 	add.w	r1, r0, #56	; 0x38
    5fec:	f500 709c 	add.w	r0, r0, #312	; 0x138
    5ff0:	f000 f8bd 	bl	616e <memcpy>
	shell_spaces_trim(shell->ctx->temp_buff);
    5ff4:	68a0      	ldr	r0, [r4, #8]
    5ff6:	f500 709c 	add.w	r0, r0, #312	; 0x138
    5ffa:	f7ff fbfd 	bl	57f8 <shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = shell_strlen(shell->ctx->temp_buff) + 1;
    5ffe:	68a0      	ldr	r0, [r4, #8]
    6000:	f510 709c 	adds.w	r0, r0, #312	; 0x138
    6004:	d002      	beq.n	600c <shell_wildcard_prepare+0x3c>
    6006:	f000 f869 	bl	60dc <strlen>
    600a:	b280      	uxth	r0, r0
    600c:	68a3      	ldr	r3, [r4, #8]
    600e:	3001      	adds	r0, #1
    6010:	86d8      	strh	r0, [r3, #54]	; 0x36
}
    6012:	bd10      	pop	{r4, pc}

00006014 <shell_wildcard_finalize>:

void shell_wildcard_finalize(const struct shell *shell)
{
    6014:	b510      	push	{r4, lr}
    6016:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
    6018:	6880      	ldr	r0, [r0, #8]
    601a:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
    601c:	f500 719c 	add.w	r1, r0, #312	; 0x138
    6020:	3038      	adds	r0, #56	; 0x38
    6022:	f000 f8a4 	bl	616e <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
    6026:	68a3      	ldr	r3, [r4, #8]
    6028:	8eda      	ldrh	r2, [r3, #54]	; 0x36
    602a:	865a      	strh	r2, [r3, #50]	; 0x32
}
    602c:	bd10      	pop	{r4, pc}

0000602e <clock_control_init>:

static int clock_control_init(struct device *dev)
{
    602e:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    6030:	2200      	movs	r2, #0
    6032:	4610      	mov	r0, r2
    6034:	2101      	movs	r1, #1
    6036:	f7fc faff 	bl	2638 <z_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    603a:	2000      	movs	r0, #0
    603c:	f7fc fad8 	bl	25f0 <z_arch_irq_enable>

	return 0;
}
    6040:	2000      	movs	r0, #0
    6042:	bd08      	pop	{r3, pc}

00006044 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    6044:	4770      	bx	lr

00006046 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    6046:	4770      	bx	lr

00006048 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    6048:	f7fc bb44 	b.w	26d4 <__bus_fault>

0000604c <z_do_kernel_oops>:

void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    604c:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
    604e:	6800      	ldr	r0, [r0, #0]
    6050:	f7fc bb54 	b.w	26fc <z_arm_fatal_error>

00006054 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    6054:	b508      	push	{r3, lr}
	handler();
    6056:	f7fc fb77 	bl	2748 <z_SysNmiOnReset>
	z_ExcExit();
}
    605a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_ExcExit();
    605e:	f7fc ba61 	b.w	2524 <_IntExit>

00006062 <z_arch_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    6062:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    6064:	2100      	movs	r1, #0
    6066:	a801      	add	r0, sp, #4
    6068:	f7fc fdfc 	bl	2c64 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    606c:	b003      	add	sp, #12
    606e:	f85d fb04 	ldr.w	pc, [sp], #4

00006072 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
    6072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
    6076:	780f      	ldrb	r7, [r1, #0]
{
    6078:	4605      	mov	r5, r0
	if (c != 0) {
    607a:	b187      	cbz	r7, 609e <strstr+0x2c>
	c = *find++;
    607c:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
    607e:	4620      	mov	r0, r4
    6080:	f000 f82c 	bl	60dc <strlen>
    6084:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
    6086:	462e      	mov	r6, r5
    6088:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
    608c:	b163      	cbz	r3, 60a8 <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
    608e:	429f      	cmp	r7, r3
    6090:	d108      	bne.n	60a4 <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
    6092:	4642      	mov	r2, r8
    6094:	4621      	mov	r1, r4
    6096:	4630      	mov	r0, r6
    6098:	f000 f833 	bl	6102 <strncmp>
    609c:	b910      	cbnz	r0, 60a4 <strstr+0x32>
	s--;
	}
	return (char *)s;
}
    609e:	4628      	mov	r0, r5
    60a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    60a4:	4635      	mov	r5, r6
    60a6:	e7ee      	b.n	6086 <strstr+0x14>
					return NULL;
    60a8:	461d      	mov	r5, r3
    60aa:	e7f8      	b.n	609e <strstr+0x2c>

000060ac <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    60ac:	3901      	subs	r1, #1
    60ae:	4603      	mov	r3, r0
    60b0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    60b4:	b90a      	cbnz	r2, 60ba <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    60b6:	701a      	strb	r2, [r3, #0]

	return dest;
}
    60b8:	4770      	bx	lr
		*d = *s;
    60ba:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    60be:	e7f7      	b.n	60b0 <strcpy+0x4>

000060c0 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    60c0:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
    60c2:	7802      	ldrb	r2, [r0, #0]
    60c4:	428a      	cmp	r2, r1
    60c6:	4603      	mov	r3, r0
    60c8:	f100 0001 	add.w	r0, r0, #1
    60cc:	d004      	beq.n	60d8 <strchr+0x18>
    60ce:	2a00      	cmp	r2, #0
    60d0:	d1f7      	bne.n	60c2 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
    60d2:	2900      	cmp	r1, #0
    60d4:	bf18      	it	ne
    60d6:	2300      	movne	r3, #0
}
    60d8:	4618      	mov	r0, r3
    60da:	4770      	bx	lr

000060dc <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
    60dc:	2300      	movs	r3, #0

	while (*s != '\0') {
    60de:	5cc2      	ldrb	r2, [r0, r3]
    60e0:	b90a      	cbnz	r2, 60e6 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    60e2:	4618      	mov	r0, r3
    60e4:	4770      	bx	lr
		n++;
    60e6:	3301      	adds	r3, #1
    60e8:	e7f9      	b.n	60de <strlen+0x2>

000060ea <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    60ea:	3801      	subs	r0, #1
    60ec:	3901      	subs	r1, #1
    60ee:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    60f2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    60f6:	4293      	cmp	r3, r2
    60f8:	d101      	bne.n	60fe <strcmp+0x14>
    60fa:	2b00      	cmp	r3, #0
    60fc:	d1f7      	bne.n	60ee <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    60fe:	1a98      	subs	r0, r3, r2
    6100:	4770      	bx	lr

00006102 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
    6102:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    6104:	2400      	movs	r4, #0
    6106:	42a2      	cmp	r2, r4
    6108:	d008      	beq.n	611c <strncmp+0x1a>
    610a:	5d03      	ldrb	r3, [r0, r4]
    610c:	5d0d      	ldrb	r5, [r1, r4]
    610e:	42ab      	cmp	r3, r5
    6110:	d102      	bne.n	6118 <strncmp+0x16>
    6112:	3401      	adds	r4, #1
    6114:	2b00      	cmp	r3, #0
    6116:	d1f6      	bne.n	6106 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
    6118:	1b58      	subs	r0, r3, r5
    611a:	e000      	b.n	611e <strncmp+0x1c>
    611c:	2000      	movs	r0, #0
}
    611e:	bd30      	pop	{r4, r5, pc}

00006120 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    6120:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    6122:	b15a      	cbz	r2, 613c <memcmp+0x1c>
    6124:	3901      	subs	r1, #1
    6126:	1884      	adds	r4, r0, r2
    6128:	f810 2b01 	ldrb.w	r2, [r0], #1
    612c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    6130:	42a0      	cmp	r0, r4
    6132:	d001      	beq.n	6138 <memcmp+0x18>
    6134:	429a      	cmp	r2, r3
    6136:	d0f7      	beq.n	6128 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    6138:	1ad0      	subs	r0, r2, r3
}
    613a:	bd10      	pop	{r4, pc}
		return 0;
    613c:	4610      	mov	r0, r2
    613e:	e7fc      	b.n	613a <memcmp+0x1a>

00006140 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    6140:	1a43      	subs	r3, r0, r1
    6142:	4293      	cmp	r3, r2
{
    6144:	b510      	push	{r4, lr}
    6146:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    614a:	d308      	bcc.n	615e <memmove+0x1e>
    614c:	3901      	subs	r1, #1
	char *dest = d;
    614e:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    6150:	429a      	cmp	r2, r3
    6152:	d00b      	beq.n	616c <memmove+0x2c>
			*dest = *src;
    6154:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    6158:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    615c:	e7f8      	b.n	6150 <memmove+0x10>
    615e:	440a      	add	r2, r1
			dest[n] = src[n];
    6160:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    6164:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    6168:	428a      	cmp	r2, r1
    616a:	d1f9      	bne.n	6160 <memmove+0x20>
		}
	}

	return d;
}
    616c:	bd10      	pop	{r4, pc}

0000616e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    616e:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    6170:	ea81 0400 	eor.w	r4, r1, r0
    6174:	07a5      	lsls	r5, r4, #30
    6176:	4603      	mov	r3, r0
    6178:	d00b      	beq.n	6192 <memcpy+0x24>
    617a:	3b01      	subs	r3, #1
    617c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    617e:	4291      	cmp	r1, r2
    6180:	d11a      	bne.n	61b8 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    6182:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    6184:	2a00      	cmp	r2, #0
    6186:	d0fc      	beq.n	6182 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    6188:	f811 4b01 	ldrb.w	r4, [r1], #1
    618c:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    6190:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    6192:	079c      	lsls	r4, r3, #30
    6194:	d1f6      	bne.n	6184 <memcpy+0x16>
    6196:	0895      	lsrs	r5, r2, #2
    6198:	00ac      	lsls	r4, r5, #2
    619a:	1f1e      	subs	r6, r3, #4
    619c:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    619e:	42b9      	cmp	r1, r7
    61a0:	d105      	bne.n	61ae <memcpy+0x40>
    61a2:	f06f 0603 	mvn.w	r6, #3
    61a6:	fb06 2205 	mla	r2, r6, r5, r2
    61aa:	4423      	add	r3, r4
    61ac:	e7e5      	b.n	617a <memcpy+0xc>
			*(d_word++) = *(s_word++);
    61ae:	f851 cb04 	ldr.w	ip, [r1], #4
    61b2:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
    61b6:	e7f2      	b.n	619e <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
    61b8:	f811 4b01 	ldrb.w	r4, [r1], #1
    61bc:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    61c0:	e7dd      	b.n	617e <memcpy+0x10>

000061c2 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    61c2:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    61c4:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    61c6:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    61c8:	079c      	lsls	r4, r3, #30
    61ca:	d110      	bne.n	61ee <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    61cc:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    61d0:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    61d4:	0894      	lsrs	r4, r2, #2
    61d6:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    61da:	42b3      	cmp	r3, r6
    61dc:	d10d      	bne.n	61fa <memset+0x38>
    61de:	f06f 0503 	mvn.w	r5, #3
    61e2:	fb05 2404 	mla	r4, r5, r4, r2
    61e6:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    61e8:	42a3      	cmp	r3, r4
    61ea:	d109      	bne.n	6200 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    61ec:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    61ee:	2a00      	cmp	r2, #0
    61f0:	d0fc      	beq.n	61ec <memset+0x2a>
		*(d_byte++) = c_byte;
    61f2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    61f6:	3a01      	subs	r2, #1
    61f8:	e7e6      	b.n	61c8 <memset+0x6>
		*(d_word++) = c_word;
    61fa:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    61fe:	e7ec      	b.n	61da <memset+0x18>
		*(d_byte++) = c_byte;
    6200:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6204:	e7f0      	b.n	61e8 <memset+0x26>

00006206 <_to_x>:
{
    6206:	b5f0      	push	{r4, r5, r6, r7, lr}
    6208:	4603      	mov	r3, r0
		unsigned int d = n % base;
    620a:	fbb1 f7f2 	udiv	r7, r1, r2
    620e:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    6212:	2d09      	cmp	r5, #9
    6214:	bf8c      	ite	hi
    6216:	2627      	movhi	r6, #39	; 0x27
    6218:	2600      	movls	r6, #0
    621a:	461c      	mov	r4, r3
    621c:	3530      	adds	r5, #48	; 0x30
    621e:	4435      	add	r5, r6
	} while (n);
    6220:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    6222:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
    6226:	d206      	bcs.n	6236 <_to_x+0x30>
	*buf = 0;
    6228:	2200      	movs	r2, #0
    622a:	7022      	strb	r2, [r4, #0]
	len = buf - start;
    622c:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
    622e:	4283      	cmp	r3, r0
    6230:	d804      	bhi.n	623c <_to_x+0x36>
}
    6232:	4620      	mov	r0, r4
    6234:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
    6236:	4639      	mov	r1, r7
    6238:	4623      	mov	r3, r4
    623a:	e7e6      	b.n	620a <_to_x+0x4>
		char tmp = *buf;
    623c:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
    623e:	7801      	ldrb	r1, [r0, #0]
    6240:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
    6244:	f800 2b01 	strb.w	r2, [r0], #1
    6248:	e7f1      	b.n	622e <_to_x+0x28>

0000624a <_rlrshift>:
{
    624a:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
    624c:	e9d0 6500 	ldrd	r6, r5, [r0]
    6250:	0872      	lsrs	r2, r6, #1
    6252:	f006 0301 	and.w	r3, r6, #1
    6256:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
    625a:	189b      	adds	r3, r3, r2
    625c:	f04f 0100 	mov.w	r1, #0
    6260:	ea4f 0455 	mov.w	r4, r5, lsr #1
    6264:	eb44 0101 	adc.w	r1, r4, r1
    6268:	e9c0 3100 	strd	r3, r1, [r0]
}
    626c:	bd70      	pop	{r4, r5, r6, pc}

0000626e <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
    626e:	e9d0 3200 	ldrd	r3, r2, [r0]
{
    6272:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	rem += 2U;
    6276:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5U) << shifts[i];
    6278:	f04f 0705 	mov.w	r7, #5
    627c:	f04f 0c00 	mov.w	ip, #0
	rem += 2U;
    6280:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5U;
    6284:	ebb3 060c 	subs.w	r6, r3, ip
		q = (uint64_t)(hi / 5U) << shifts[i];
    6288:	fbb2 fef7 	udiv	lr, r2, r7
		rem -= q * 5U;
    628c:	fb07 f10e 	mul.w	r1, r7, lr
    6290:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
    6294:	08f2      	lsrs	r2, r6, #3
    6296:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
    629a:	fbb2 f1f7 	udiv	r1, r2, r7
    629e:	00ca      	lsls	r2, r1, #3
		quot += q;
    62a0:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    62a4:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
    62a8:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
    62ac:	fba2 2307 	umull	r2, r3, r2, r7
    62b0:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    62b2:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
    62b6:	eb18 0403 	adds.w	r4, r8, r3
    62ba:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
    62be:	e9c0 4500 	strd	r4, r5, [r0]
}
    62c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000062c6 <_get_digit>:
	if (*digit_count > 0) {
    62c6:	680b      	ldr	r3, [r1, #0]
    62c8:	2b00      	cmp	r3, #0
{
    62ca:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
    62cc:	dd10      	ble.n	62f0 <_get_digit+0x2a>
		*digit_count -= 1;
    62ce:	3b01      	subs	r3, #1
		*fr = *fr * 10U;
    62d0:	6802      	ldr	r2, [r0, #0]
		*digit_count -= 1;
    62d2:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
    62d4:	6844      	ldr	r4, [r0, #4]
    62d6:	210a      	movs	r1, #10
    62d8:	fba2 5601 	umull	r5, r6, r2, r1
    62dc:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    62e0:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
    62e4:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
    62e8:	0f31      	lsrs	r1, r6, #28
    62ea:	3130      	adds	r1, #48	; 0x30
}
    62ec:	4608      	mov	r0, r1
    62ee:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
    62f0:	2130      	movs	r1, #48	; 0x30
    62f2:	e7fb      	b.n	62ec <_get_digit+0x26>

000062f4 <_stdout_hook_default>:
}
    62f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    62f8:	4770      	bx	lr

000062fa <nrf_gpio_cfg_sense_set>:
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    62fa:	0080      	lsls	r0, r0, #2
    62fc:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    6300:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    6304:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    6308:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    630c:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    6310:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    6314:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    6318:	4770      	bx	lr

0000631a <gpio_nrfx_write>:
{
    631a:	b510      	push	{r4, lr}
	return port->config->config_info;
    631c:	6804      	ldr	r4, [r0, #0]
    631e:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6320:	68a4      	ldr	r4, [r4, #8]
    6322:	69c0      	ldr	r0, [r0, #28]
    6324:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    6326:	2901      	cmp	r1, #1
    6328:	d104      	bne.n	6334 <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    632a:	4058      	eors	r0, r3
    p_reg->OUT = value;
    632c:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
    6330:	2000      	movs	r0, #0
    6332:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    6334:	3300      	adds	r3, #0
    6336:	fa20 f002 	lsr.w	r0, r0, r2
    633a:	f04f 0101 	mov.w	r1, #1
    633e:	bf18      	it	ne
    6340:	2301      	movne	r3, #1
    6342:	f000 0001 	and.w	r0, r0, #1
    6346:	4091      	lsls	r1, r2
    6348:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
    634a:	bf14      	ite	ne
    634c:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    6350:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
    6354:	e7ec      	b.n	6330 <gpio_nrfx_write+0x16>

00006356 <gpio_nrfx_read>:
{
    6356:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
    6358:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    635a:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    635c:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    635e:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6360:	6825      	ldr	r5, [r4, #0]
    return p_reg->DIR;
    6362:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
    return p_reg->IN;
    6366:	f8d5 4510 	ldr.w	r4, [r5, #1296]	; 0x510
    return p_reg->OUT;
    636a:	f8d5 5504 	ldr.w	r5, [r5, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    636e:	4060      	eors	r0, r4
    6370:	406c      	eors	r4, r5
    6372:	4034      	ands	r4, r6
    6374:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    6376:	2901      	cmp	r1, #1
		*value = (port_val & BIT(pin)) ? 1 : 0;
    6378:	bf1c      	itt	ne
    637a:	40d0      	lsrne	r0, r2
    637c:	f000 0001 	andne.w	r0, r0, #1
    6380:	6018      	str	r0, [r3, #0]
}
    6382:	2000      	movs	r0, #0
    6384:	bd70      	pop	{r4, r5, r6, pc}

00006386 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6386:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
    6388:	6818      	ldr	r0, [r3, #0]
{
    638a:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    638c:	b158      	cbz	r0, 63a6 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    638e:	2400      	movs	r4, #0
    6390:	4281      	cmp	r1, r0
    6392:	d113      	bne.n	63bc <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    6394:	6808      	ldr	r0, [r1, #0]
    6396:	b95c      	cbnz	r4, 63b0 <gpio_nrfx_manage_callback+0x2a>
    6398:	685c      	ldr	r4, [r3, #4]
	list->head = node;
    639a:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    639c:	42a1      	cmp	r1, r4
    639e:	d100      	bne.n	63a2 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    63a0:	6058      	str	r0, [r3, #4]
	parent->next = child;
    63a2:	2000      	movs	r0, #0
    63a4:	6008      	str	r0, [r1, #0]
	if (set) {
    63a6:	b972      	cbnz	r2, 63c6 <gpio_nrfx_manage_callback+0x40>
	return 0;
    63a8:	2000      	movs	r0, #0
}
    63aa:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    63ac:	4628      	mov	r0, r5
    63ae:	e7ef      	b.n	6390 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
    63b0:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    63b2:	6858      	ldr	r0, [r3, #4]
    63b4:	4281      	cmp	r1, r0
	list->tail = node;
    63b6:	bf08      	it	eq
    63b8:	605c      	streq	r4, [r3, #4]
    63ba:	e7f2      	b.n	63a2 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    63bc:	6805      	ldr	r5, [r0, #0]
	return node->next;
    63be:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    63c0:	2d00      	cmp	r5, #0
    63c2:	d1f3      	bne.n	63ac <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    63c4:	b13a      	cbz	r2, 63d6 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    63c6:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    63c8:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    63ca:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    63cc:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    63ce:	2800      	cmp	r0, #0
    63d0:	d1ea      	bne.n	63a8 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    63d2:	6059      	str	r1, [r3, #4]
    63d4:	e7e9      	b.n	63aa <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    63d6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    63da:	e7e6      	b.n	63aa <gpio_nrfx_manage_callback+0x24>

000063dc <gpio_nrfx_config>:
{
    63dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    63e0:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    63e2:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    63e4:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    63e8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    63ec:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    63ee:	d041      	beq.n	6474 <gpio_nrfx_config+0x98>
    63f0:	dc09      	bgt.n	6406 <gpio_nrfx_config+0x2a>
    63f2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    63f6:	d03f      	beq.n	6478 <gpio_nrfx_config+0x9c>
    63f8:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    63fc:	d03e      	beq.n	647c <gpio_nrfx_config+0xa0>
    63fe:	b190      	cbz	r0, 6426 <gpio_nrfx_config+0x4a>
		return -EINVAL;
    6400:	f06f 0015 	mvn.w	r0, #21
    6404:	e033      	b.n	646e <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    6406:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    640a:	d039      	beq.n	6480 <gpio_nrfx_config+0xa4>
    640c:	dc04      	bgt.n	6418 <gpio_nrfx_config+0x3c>
    640e:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    6412:	d1f5      	bne.n	6400 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    6414:	2003      	movs	r0, #3
    6416:	e006      	b.n	6426 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    6418:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    641c:	d032      	beq.n	6484 <gpio_nrfx_config+0xa8>
    641e:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    6422:	d1ed      	bne.n	6400 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
    6424:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    6426:	f406 7740 	and.w	r7, r6, #768	; 0x300
    642a:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    642e:	d02b      	beq.n	6488 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_NOPULL;
    6430:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    6434:	4263      	negs	r3, r4
    6436:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    6438:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    643c:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
    6440:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    6442:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
    6446:	bf18      	it	ne
    6448:	b2d4      	uxtbne	r4, r2
    644a:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    644e:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
    6452:	bf12      	itee	ne
    6454:	46a1      	movne	r9, r4
		to_pin   = 31U;
    6456:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    645a:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    645c:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    6460:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    6464:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    6468:	45a1      	cmp	r9, r4
    646a:	d20f      	bcs.n	648c <gpio_nrfx_config+0xb0>
	return 0;
    646c:	2000      	movs	r0, #0
}
    646e:	b003      	add	sp, #12
    6470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
    6474:	2002      	movs	r0, #2
    6476:	e7d6      	b.n	6426 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    6478:	2001      	movs	r0, #1
    647a:	e7d4      	b.n	6426 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    647c:	2004      	movs	r0, #4
    647e:	e7d2      	b.n	6426 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
    6480:	2005      	movs	r0, #5
    6482:	e7d0      	b.n	6426 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    6484:	2006      	movs	r0, #6
    6486:	e7ce      	b.n	6426 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    6488:	2303      	movs	r3, #3
    648a:	e7d5      	b.n	6438 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    648c:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    6490:	6892      	ldr	r2, [r2, #8]
    6492:	7911      	ldrb	r1, [r2, #4]
    6494:	f004 021f 	and.w	r2, r4, #31
    6498:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    649c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    64a0:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    64a4:	fa0b f204 	lsl.w	r2, fp, r4
    64a8:	68a9      	ldr	r1, [r5, #8]
    64aa:	2b00      	cmp	r3, #0
    64ac:	d025      	beq.n	64fa <gpio_nrfx_config+0x11e>
    64ae:	4311      	orrs	r1, r2
    64b0:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    64b2:	6969      	ldr	r1, [r5, #20]
    64b4:	9301      	str	r3, [sp, #4]
    64b6:	06b0      	lsls	r0, r6, #26
    64b8:	bf4c      	ite	mi
    64ba:	4311      	orrmi	r1, r2
    64bc:	4391      	bicpl	r1, r2
    64be:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    64c0:	69a9      	ldr	r1, [r5, #24]
    64c2:	0670      	lsls	r0, r6, #25
    64c4:	bf4c      	ite	mi
    64c6:	4311      	orrmi	r1, r2
    64c8:	4391      	bicpl	r1, r2
    64ca:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
    64cc:	6929      	ldr	r1, [r5, #16]
    64ce:	0770      	lsls	r0, r6, #29
    64d0:	bf4c      	ite	mi
    64d2:	4311      	orrmi	r1, r2
    64d4:	4391      	bicpl	r1, r2
    64d6:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    64d8:	69e9      	ldr	r1, [r5, #28]
    64da:	0630      	lsls	r0, r6, #24
    64dc:	bf4c      	ite	mi
    64de:	430a      	orrmi	r2, r1
    64e0:	ea21 0202 	bicpl.w	r2, r1, r2
    64e4:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    64e6:	4621      	mov	r1, r4
    64e8:	4640      	mov	r0, r8
    64ea:	f7fd f947 	bl	377c <gpiote_pin_int_cfg>
		if (res != 0) {
    64ee:	2800      	cmp	r0, #0
    64f0:	d1bd      	bne.n	646e <gpio_nrfx_config+0x92>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    64f2:	3401      	adds	r4, #1
    64f4:	b2e4      	uxtb	r4, r4
    64f6:	9b01      	ldr	r3, [sp, #4]
    64f8:	e7b6      	b.n	6468 <gpio_nrfx_config+0x8c>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    64fa:	ea21 0102 	bic.w	r1, r1, r2
    64fe:	e7d7      	b.n	64b0 <gpio_nrfx_config+0xd4>

00006500 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    6500:	2901      	cmp	r1, #1
{
    6502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    6506:	bf18      	it	ne
    6508:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    650a:	6887      	ldr	r7, [r0, #8]
{
    650c:	4606      	mov	r6, r0
		to_pin   = pin;
    650e:	bf12      	itee	ne
    6510:	4625      	movne	r5, r4
		to_pin   = 31U;
    6512:	251f      	moveq	r5, #31
		from_pin = 0U;
    6514:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    6516:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    651a:	42ac      	cmp	r4, r5
    651c:	d902      	bls.n	6524 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
    651e:	2000      	movs	r0, #0
}
    6520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    6524:	68fb      	ldr	r3, [r7, #12]
    6526:	fa08 f204 	lsl.w	r2, r8, r4
    652a:	ea23 0302 	bic.w	r3, r3, r2
    652e:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    6530:	4621      	mov	r1, r4
    6532:	4630      	mov	r0, r6
    6534:	f7fd f922 	bl	377c <gpiote_pin_int_cfg>
		if (res != 0) {
    6538:	2800      	cmp	r0, #0
    653a:	d1f1      	bne.n	6520 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    653c:	3401      	adds	r4, #1
    653e:	b2e4      	uxtb	r4, r4
    6540:	e7eb      	b.n	651a <gpio_nrfx_pin_disable_callback+0x1a>

00006542 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    6542:	2901      	cmp	r1, #1
{
    6544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    6548:	bf18      	it	ne
    654a:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    654c:	6887      	ldr	r7, [r0, #8]
{
    654e:	4606      	mov	r6, r0
		to_pin   = pin;
    6550:	bf12      	itee	ne
    6552:	4625      	movne	r5, r4
		to_pin   = 31U;
    6554:	251f      	moveq	r5, #31
		from_pin = 0U;
    6556:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    6558:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    655c:	42ac      	cmp	r4, r5
    655e:	d902      	bls.n	6566 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
    6560:	2000      	movs	r0, #0
}
    6562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    6566:	68fb      	ldr	r3, [r7, #12]
    6568:	fa08 f204 	lsl.w	r2, r8, r4
    656c:	4313      	orrs	r3, r2
    656e:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    6570:	4621      	mov	r1, r4
    6572:	4630      	mov	r0, r6
    6574:	f7fd f902 	bl	377c <gpiote_pin_int_cfg>
		if (res != 0) {
    6578:	2800      	cmp	r0, #0
    657a:	d1f2      	bne.n	6562 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    657c:	3401      	adds	r4, #1
    657e:	b2e4      	uxtb	r4, r4
    6580:	e7ec      	b.n	655c <gpio_nrfx_pin_enable_callback+0x1a>

00006582 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    6582:	6882      	ldr	r2, [r0, #8]
{
    6584:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    6586:	e892 0003 	ldmia.w	r2, {r0, r1}
    658a:	e883 0003 	stmia.w	r3, {r0, r1}
}
    658e:	2000      	movs	r0, #0
    6590:	4770      	bx	lr

00006592 <uart_nrfx_irq_tx_ready_complete>:
{
    6592:	b508      	push	{r3, lr}
	return event_txdrdy_check();
    6594:	f7fd f998 	bl	38c8 <event_txdrdy_check>
}
    6598:	bd08      	pop	{r3, pc}

0000659a <uart_nrfx_irq_update>:
}
    659a:	2001      	movs	r0, #1
    659c:	4770      	bx	lr

0000659e <device_busy_set>:
	atomic_set_bit((atomic_t *) __device_busy_start,
				 (busy_dev - __device_init_start));
#else
	ARG_UNUSED(busy_dev);
#endif
}
    659e:	4770      	bx	lr

000065a0 <device_busy_clear>:
    65a0:	4770      	bx	lr

000065a2 <z_arch_system_halt>:
{
    65a2:	b508      	push	{r3, lr}
	__asm__ volatile(
    65a4:	f04f 0220 	mov.w	r2, #32
    65a8:	f3ef 8311 	mrs	r3, BASEPRI
    65ac:	f382 8811 	msr	BASEPRI, r2
    65b0:	f3bf 8f6f 	isb	sy
		k_cpu_idle();
    65b4:	f7fc f888 	bl	26c8 <k_cpu_idle>
    65b8:	e7fc      	b.n	65b4 <z_arch_system_halt+0x12>

000065ba <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    65ba:	f7ff bd44 	b.w	6046 <z_clock_idle_exit>

000065be <z_impl_k_mutex_init>:
	mutex->owner = NULL;
    65be:	2300      	movs	r3, #0
	mutex->lock_count = 0U;
    65c0:	e9c0 3302 	strd	r3, r3, [r0, #8]
    65c4:	e9c0 0000 	strd	r0, r0, [r0]
}
    65c8:	4770      	bx	lr

000065ca <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    65ca:	7b43      	ldrb	r3, [r0, #13]
    65cc:	06db      	lsls	r3, r3, #27
    65ce:	bf03      	ittte	eq
    65d0:	6980      	ldreq	r0, [r0, #24]
    65d2:	fab0 f080 	clzeq	r0, r0
    65d6:	0940      	lsreq	r0, r0, #5
    65d8:	2000      	movne	r0, #0
}
    65da:	4770      	bx	lr

000065dc <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
    65dc:	f990 000e 	ldrsb.w	r0, [r0, #14]
    65e0:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
    65e4:	4298      	cmp	r0, r3
    65e6:	bfac      	ite	ge
    65e8:	2000      	movge	r0, #0
    65ea:	2001      	movlt	r0, #1
    65ec:	4770      	bx	lr

000065ee <z_unpend_thread_no_timeout>:
{
    65ee:	b538      	push	{r3, r4, r5, lr}
    65f0:	4604      	mov	r4, r0
    65f2:	f04f 0320 	mov.w	r3, #32
    65f6:	f3ef 8511 	mrs	r5, BASEPRI
    65fa:	f383 8811 	msr	BASEPRI, r3
    65fe:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    6602:	4601      	mov	r1, r0
    6604:	6880      	ldr	r0, [r0, #8]
    6606:	f7fd fe0b 	bl	4220 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    660a:	7b63      	ldrb	r3, [r4, #13]
    660c:	f023 0302 	bic.w	r3, r3, #2
    6610:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    6612:	f385 8811 	msr	BASEPRI, r5
    6616:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    661a:	2300      	movs	r3, #0
    661c:	60a3      	str	r3, [r4, #8]
}
    661e:	bd38      	pop	{r3, r4, r5, pc}

00006620 <z_reschedule>:
{
    6620:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_is_in_isr();
    6622:	b939      	cbnz	r1, 6634 <z_reschedule+0x14>
    6624:	f7fd fd94 	bl	4150 <resched.part.15>
	if (resched(key.key)) {
    6628:	b120      	cbz	r0, 6634 <z_reschedule+0x14>
    662a:	4608      	mov	r0, r1
}
    662c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6630:	f7fb bf86 	b.w	2540 <__swap>
    6634:	f381 8811 	msr	BASEPRI, r1
    6638:	f3bf 8f6f 	isb	sy
    663c:	bd08      	pop	{r3, pc}

0000663e <z_reschedule_irqlock>:
{
    663e:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_is_in_isr();
    6640:	4602      	mov	r2, r0
    6642:	b938      	cbnz	r0, 6654 <z_reschedule_irqlock+0x16>
    6644:	f7fd fd84 	bl	4150 <resched.part.15>
	if (resched(key)) {
    6648:	b120      	cbz	r0, 6654 <z_reschedule_irqlock+0x16>
    664a:	4610      	mov	r0, r2
}
    664c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6650:	f7fb bf76 	b.w	2540 <__swap>
    6654:	f382 8811 	msr	BASEPRI, r2
    6658:	f3bf 8f6f 	isb	sy
    665c:	bd08      	pop	{r3, pc}

0000665e <z_reschedule_unlocked>:
	__asm__ volatile(
    665e:	f04f 0320 	mov.w	r3, #32
    6662:	f3ef 8011 	mrs	r0, BASEPRI
    6666:	f383 8811 	msr	BASEPRI, r3
    666a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
    666e:	f7ff bfe6 	b.w	663e <z_reschedule_irqlock>

00006672 <z_unpend_thread>:
{
    6672:	b538      	push	{r3, r4, r5, lr}
    6674:	4604      	mov	r4, r0
    6676:	f04f 0320 	mov.w	r3, #32
    667a:	f3ef 8511 	mrs	r5, BASEPRI
    667e:	f383 8811 	msr	BASEPRI, r3
    6682:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    6686:	4601      	mov	r1, r0
    6688:	6880      	ldr	r0, [r0, #8]
    668a:	f7fd fdc9 	bl	4220 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    668e:	7b63      	ldrb	r3, [r4, #13]
    6690:	f023 0302 	bic.w	r3, r3, #2
    6694:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    6696:	f385 8811 	msr	BASEPRI, r5
    669a:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    669e:	2300      	movs	r3, #0
    66a0:	60a3      	str	r3, [r4, #8]
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    66a2:	f104 0018 	add.w	r0, r4, #24
}
    66a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    66aa:	f000 b8ba 	b.w	6822 <z_abort_timeout>

000066ae <z_priq_dumb_best>:
	return list->head == list;
    66ae:	6803      	ldr	r3, [r0, #0]
}
    66b0:	4298      	cmp	r0, r3
    66b2:	bf14      	ite	ne
    66b4:	4618      	movne	r0, r3
    66b6:	2000      	moveq	r0, #0
    66b8:	4770      	bx	lr

000066ba <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
    66ba:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    66be:	b570      	push	{r4, r5, r6, lr}
    66c0:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    66c2:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    66c6:	b1cb      	cbz	r3, 66fc <z_thread_timeout+0x42>
	__asm__ volatile(
    66c8:	f04f 0320 	mov.w	r3, #32
    66cc:	f3ef 8611 	mrs	r6, BASEPRI
    66d0:	f383 8811 	msr	BASEPRI, r3
    66d4:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    66d8:	4629      	mov	r1, r5
    66da:	f850 0c10 	ldr.w	r0, [r0, #-16]
    66de:	f7fd fd9f 	bl	4220 <z_priq_dumb_remove>
    66e2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    66e6:	f023 0302 	bic.w	r3, r3, #2
    66ea:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    66ee:	f386 8811 	msr	BASEPRI, r6
    66f2:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    66f6:	2300      	movs	r3, #0
    66f8:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    66fc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6700:	f023 0314 	bic.w	r3, r3, #20
    6704:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    6708:	4628      	mov	r0, r5
    670a:	f7ff ff5e 	bl	65ca <z_is_thread_ready>
    670e:	b120      	cbz	r0, 671a <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
    6710:	4628      	mov	r0, r5
}
    6712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6716:	f7fd bdd3 	b.w	42c0 <z_add_thread_to_ready_q>
    671a:	bd70      	pop	{r4, r5, r6, pc}

0000671c <z_unpend_first_thread>:
{
    671c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    671e:	f04f 0320 	mov.w	r3, #32
    6722:	f3ef 8211 	mrs	r2, BASEPRI
    6726:	f383 8811 	msr	BASEPRI, r3
    672a:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    672e:	f7ff ffbe 	bl	66ae <z_priq_dumb_best>
    6732:	4604      	mov	r4, r0
	__asm__ volatile(
    6734:	f382 8811 	msr	BASEPRI, r2
    6738:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    673c:	b1c8      	cbz	r0, 6772 <z_unpend_first_thread+0x56>
	__asm__ volatile(
    673e:	f04f 0320 	mov.w	r3, #32
    6742:	f3ef 8511 	mrs	r5, BASEPRI
    6746:	f383 8811 	msr	BASEPRI, r3
    674a:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    674e:	4601      	mov	r1, r0
    6750:	6880      	ldr	r0, [r0, #8]
    6752:	f7fd fd65 	bl	4220 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6756:	7b63      	ldrb	r3, [r4, #13]
    6758:	f023 0302 	bic.w	r3, r3, #2
    675c:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    675e:	f385 8811 	msr	BASEPRI, r5
    6762:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    6766:	2300      	movs	r3, #0
    6768:	60a3      	str	r3, [r4, #8]
    676a:	f104 0018 	add.w	r0, r4, #24
    676e:	f000 f858 	bl	6822 <z_abort_timeout>
}
    6772:	4620      	mov	r0, r4
    6774:	bd38      	pop	{r3, r4, r5, pc}

00006776 <z_impl_k_sleep>:
{
    6776:	b538      	push	{r3, r4, r5, lr}
    6778:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    677c:	f240 34e7 	movw	r4, #999	; 0x3e7
    6780:	2500      	movs	r5, #0
    6782:	fbc1 4500 	smlal	r4, r5, r1, r0
    6786:	4620      	mov	r0, r4
    6788:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    678c:	2300      	movs	r3, #0
    678e:	4629      	mov	r1, r5
    6790:	f7f9 fca4 	bl	dc <__aeabi_ldivmod>
	if (ticks == 0) {
    6794:	4604      	mov	r4, r0
    6796:	b948      	cbnz	r0, 67ac <z_impl_k_sleep+0x36>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    6798:	f7fd ff42 	bl	4620 <z_impl_k_yield>
}

static inline u64_t __ticks_to_ms(s64_t ticks)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	return (u64_t)ticks * MSEC_PER_SEC /
    679c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    67a0:	fb84 2302 	smull	r2, r3, r4, r2
    67a4:	0bd0      	lsrs	r0, r2, #15
}
    67a6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    67aa:	bd38      	pop	{r3, r4, r5, pc}
    67ac:	f7fd feb2 	bl	4514 <z_tick_sleep.part.17>
    67b0:	4604      	mov	r4, r0
    67b2:	e7f3      	b.n	679c <z_impl_k_sleep+0x26>

000067b4 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    67b4:	7b43      	ldrb	r3, [r0, #13]
    67b6:	06db      	lsls	r3, r3, #27
    67b8:	bf03      	ittte	eq
    67ba:	6980      	ldreq	r0, [r0, #24]
    67bc:	fab0 f080 	clzeq	r0, r0
    67c0:	0940      	lsreq	r0, r0, #5
    67c2:	2000      	movne	r0, #0
}
    67c4:	4770      	bx	lr

000067c6 <z_impl_k_busy_wait>:
	z_arch_busy_wait(usec_to_wait);
    67c6:	f7f9 bf25 	b.w	614 <z_arch_busy_wait>

000067ca <z_impl_k_thread_name_set>:
}
    67ca:	f06f 0046 	mvn.w	r0, #70	; 0x46
    67ce:	4770      	bx	lr

000067d0 <k_thread_name_get>:
}
    67d0:	2000      	movs	r0, #0
    67d2:	4770      	bx	lr

000067d4 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    67d4:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    67d6:	b510      	push	{r4, lr}
    67d8:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    67da:	b103      	cbz	r3, 67de <z_thread_single_abort+0xa>
		thread->fn_abort();
    67dc:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
    67de:	4620      	mov	r0, r4
    67e0:	f7ff ffe8 	bl	67b4 <z_is_thread_ready>
    67e4:	b138      	cbz	r0, 67f6 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
    67e6:	4620      	mov	r0, r4
    67e8:	f7fd fe18 	bl	441c <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
    67ec:	7b63      	ldrb	r3, [r4, #13]
    67ee:	f043 0308 	orr.w	r3, r3, #8
    67f2:	7363      	strb	r3, [r4, #13]
}
    67f4:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
    67f6:	7b63      	ldrb	r3, [r4, #13]
    67f8:	079b      	lsls	r3, r3, #30
    67fa:	d502      	bpl.n	6802 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
    67fc:	4620      	mov	r0, r4
    67fe:	f7ff fef6 	bl	65ee <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
    6802:	69a3      	ldr	r3, [r4, #24]
    6804:	2b00      	cmp	r3, #0
    6806:	d0f1      	beq.n	67ec <z_thread_single_abort+0x18>
    6808:	f104 0018 	add.w	r0, r4, #24
    680c:	f000 f809 	bl	6822 <z_abort_timeout>
    6810:	e7ec      	b.n	67ec <z_thread_single_abort+0x18>

00006812 <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    6812:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
    6814:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    6816:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    6818:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    681a:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
    681c:	e9c0 3306 	strd	r3, r3, [r0, #24]

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    6820:	4770      	bx	lr

00006822 <z_abort_timeout>:
{
    6822:	b510      	push	{r4, lr}
	__asm__ volatile(
    6824:	f04f 0220 	mov.w	r2, #32
    6828:	f3ef 8411 	mrs	r4, BASEPRI
    682c:	f382 8811 	msr	BASEPRI, r2
    6830:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    6834:	6803      	ldr	r3, [r0, #0]
    6836:	b13b      	cbz	r3, 6848 <z_abort_timeout+0x26>
			remove_timeout(to);
    6838:	f7fe f816 	bl	4868 <remove_timeout>
			ret = 0;
    683c:	2000      	movs	r0, #0
	__asm__ volatile(
    683e:	f384 8811 	msr	BASEPRI, r4
    6842:	f3bf 8f6f 	isb	sy
}
    6846:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    6848:	f06f 0015 	mvn.w	r0, #21
    684c:	e7f7      	b.n	683e <z_abort_timeout+0x1c>

0000684e <z_get_next_timeout_expiry>:
{
    684e:	b510      	push	{r4, lr}
	__asm__ volatile(
    6850:	f04f 0320 	mov.w	r3, #32
    6854:	f3ef 8411 	mrs	r4, BASEPRI
    6858:	f383 8811 	msr	BASEPRI, r3
    685c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    6860:	f7fe f816 	bl	4890 <next_timeout>
	__asm__ volatile(
    6864:	f384 8811 	msr	BASEPRI, r4
    6868:	f3bf 8f6f 	isb	sy
}
    686c:	bd10      	pop	{r4, pc}

0000686e <z_set_timeout_expiry>:
{
    686e:	b570      	push	{r4, r5, r6, lr}
    6870:	4604      	mov	r4, r0
    6872:	460e      	mov	r6, r1
	__asm__ volatile(
    6874:	f04f 0320 	mov.w	r3, #32
    6878:	f3ef 8511 	mrs	r5, BASEPRI
    687c:	f383 8811 	msr	BASEPRI, r3
    6880:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    6884:	f7fe f804 	bl	4890 <next_timeout>
		if (sooner && !imminent) {
    6888:	42a0      	cmp	r0, r4
    688a:	dd05      	ble.n	6898 <z_set_timeout_expiry+0x2a>
    688c:	2801      	cmp	r0, #1
    688e:	dd03      	ble.n	6898 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    6890:	4631      	mov	r1, r6
    6892:	4620      	mov	r0, r4
    6894:	f7fb fdc4 	bl	2420 <z_clock_set_timeout>
	__asm__ volatile(
    6898:	f385 8811 	msr	BASEPRI, r5
    689c:	f3bf 8f6f 	isb	sy
}
    68a0:	bd70      	pop	{r4, r5, r6, pc}

000068a2 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    68a2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    68a4:	f7fe f8a8 	bl	49f8 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    68a8:	bd08      	pop	{r3, pc}

000068aa <z_impl_k_uptime_get_32>:

u32_t z_impl_k_uptime_get_32(void)
{
    68aa:	b508      	push	{r3, lr}
	return __ticks_to_ms(z_tick_get_32());
    68ac:	f7ff fff9 	bl	68a2 <z_tick_get_32>
    68b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    68b4:	fba0 2302 	umull	r2, r3, r0, r2
    68b8:	0bd0      	lsrs	r0, r2, #15
}
    68ba:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    68be:	bd08      	pop	{r3, pc}

000068c0 <clear_event_registrations>:
	for (; last_registered >= 0; last_registered--) {
    68c0:	2314      	movs	r3, #20
{
    68c2:	b570      	push	{r4, r5, r6, lr}
    68c4:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
    68c8:	2400      	movs	r4, #0
    68ca:	2601      	movs	r6, #1
	for (; last_registered >= 0; last_registered--) {
    68cc:	2900      	cmp	r1, #0
    68ce:	da00      	bge.n	68d2 <clear_event_registrations+0x12>
}
    68d0:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
    68d2:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
    68d4:	6084      	str	r4, [r0, #8]
	switch (event->type) {
    68d6:	f003 030f 	and.w	r3, r3, #15
    68da:	2b04      	cmp	r3, #4
    68dc:	d80b      	bhi.n	68f6 <clear_event_registrations+0x36>
    68de:	fa06 f303 	lsl.w	r3, r6, r3
    68e2:	f013 0f16 	tst.w	r3, #22
    68e6:	d006      	beq.n	68f6 <clear_event_registrations+0x36>
	if (remove && sys_dnode_is_linked(&event->_node)) {
    68e8:	6803      	ldr	r3, [r0, #0]
    68ea:	b123      	cbz	r3, 68f6 <clear_event_registrations+0x36>
	node->prev->next = node->next;
    68ec:	6845      	ldr	r5, [r0, #4]
    68ee:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
    68f0:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
    68f2:	e9c0 4400 	strd	r4, r4, [r0]
    68f6:	f382 8811 	msr	BASEPRI, r2
    68fa:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    68fe:	f04f 0320 	mov.w	r3, #32
    6902:	f3ef 8211 	mrs	r2, BASEPRI
    6906:	f383 8811 	msr	BASEPRI, r3
    690a:	f3bf 8f6f 	isb	sy
	for (; last_registered >= 0; last_registered--) {
    690e:	3901      	subs	r1, #1
    6910:	3814      	subs	r0, #20
    6912:	e7db      	b.n	68cc <clear_event_registrations+0xc>

00006914 <signal_poll_event>:
	if (!event->poller) {
    6914:	6883      	ldr	r3, [r0, #8]
{
    6916:	b570      	push	{r4, r5, r6, lr}
    6918:	4605      	mov	r5, r0
    691a:	460e      	mov	r6, r1
	if (!event->poller) {
    691c:	b1cb      	cbz	r3, 6952 <signal_poll_event+0x3e>
	event->poller->is_polling = false;
    691e:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
    6920:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = false;
    6922:	711a      	strb	r2, [r3, #4]
	if (!z_is_thread_pending(thread)) {
    6924:	7b63      	ldrb	r3, [r4, #13]
    6926:	079a      	lsls	r2, r3, #30
    6928:	d513      	bpl.n	6952 <signal_poll_event+0x3e>
	if (z_is_thread_timeout_expired(thread)) {
    692a:	6a23      	ldr	r3, [r4, #32]
    692c:	3302      	adds	r3, #2
    692e:	d01a      	beq.n	6966 <signal_poll_event+0x52>
	z_unpend_thread(thread);
    6930:	4620      	mov	r0, r4
    6932:	f7ff fe9e 	bl	6672 <z_unpend_thread>
	z_set_thread_return_value(thread,
    6936:	2e08      	cmp	r6, #8
    6938:	bf0c      	ite	eq
    693a:	f06f 0303 	mvneq.w	r3, #3
    693e:	2300      	movne	r3, #0
    6940:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    6942:	7b63      	ldrb	r3, [r4, #13]
    6944:	06db      	lsls	r3, r3, #27
    6946:	d104      	bne.n	6952 <signal_poll_event+0x3e>
	if (!z_is_thread_ready(thread)) {
    6948:	69a3      	ldr	r3, [r4, #24]
    694a:	b913      	cbnz	r3, 6952 <signal_poll_event+0x3e>
		z_add_thread_to_ready_q(thread);
    694c:	4620      	mov	r0, r4
    694e:	f7fd fcb7 	bl	42c0 <z_add_thread_to_ready_q>
	event->state |= state;
    6952:	68eb      	ldr	r3, [r5, #12]
    6954:	f3c3 3204 	ubfx	r2, r3, #12, #5
    6958:	4316      	orrs	r6, r2
	event->poller = NULL;
    695a:	2000      	movs	r0, #0
	event->state |= state;
    695c:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
    6960:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    6962:	60eb      	str	r3, [r5, #12]
}
    6964:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    6966:	f06f 000a 	mvn.w	r0, #10
    696a:	e7fb      	b.n	6964 <signal_poll_event+0x50>

0000696c <add_event>:
{
    696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    696e:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    6970:	e9d0 2300 	ldrd	r2, r3, [r0]
    6974:	4290      	cmp	r0, r2
    6976:	4604      	mov	r4, r0
    6978:	460d      	mov	r5, r1
    697a:	d106      	bne.n	698a <add_event+0x1e>
	node->prev = list->tail;
    697c:	6863      	ldr	r3, [r4, #4]
    697e:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
    6980:	6863      	ldr	r3, [r4, #4]
	node->next = list;
    6982:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
    6984:	601d      	str	r5, [r3, #0]
	list->tail = node;
    6986:	6065      	str	r5, [r4, #4]
}
    6988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
    698a:	2b00      	cmp	r3, #0
    698c:	d0f6      	beq.n	697c <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
    698e:	689b      	ldr	r3, [r3, #8]
    6990:	6839      	ldr	r1, [r7, #0]
    6992:	6818      	ldr	r0, [r3, #0]
    6994:	f7ff fe22 	bl	65dc <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
    6998:	2800      	cmp	r0, #0
    699a:	d1ef      	bne.n	697c <add_event+0x10>
	return list->head == list;
    699c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    699e:	42b4      	cmp	r4, r6
    69a0:	d0ec      	beq.n	697c <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    69a2:	2e00      	cmp	r6, #0
    69a4:	d0ea      	beq.n	697c <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
    69a6:	68b3      	ldr	r3, [r6, #8]
    69a8:	6838      	ldr	r0, [r7, #0]
    69aa:	6819      	ldr	r1, [r3, #0]
    69ac:	f7ff fe16 	bl	65dc <z_is_t1_higher_prio_than_t2>
    69b0:	b128      	cbz	r0, 69be <add_event+0x52>
	node->prev = successor->prev;
    69b2:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
    69b4:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
    69b8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    69ba:	6075      	str	r5, [r6, #4]
			return;
    69bc:	e7e4      	b.n	6988 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
    69be:	6863      	ldr	r3, [r4, #4]
    69c0:	429e      	cmp	r6, r3
    69c2:	d0db      	beq.n	697c <add_event+0x10>
    69c4:	6836      	ldr	r6, [r6, #0]
    69c6:	e7ec      	b.n	69a2 <add_event+0x36>

000069c8 <z_impl_k_poll_signal_init>:
	signal->signaled = 0U;
    69c8:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
    69ca:	e9c0 0000 	strd	r0, r0, [r0]
    69ce:	6083      	str	r3, [r0, #8]
}
    69d0:	4770      	bx	lr

000069d2 <z_impl_k_poll_signal_check>:
	*signaled = signal->signaled;
    69d2:	6883      	ldr	r3, [r0, #8]
    69d4:	600b      	str	r3, [r1, #0]
	*result = signal->result;
    69d6:	68c3      	ldr	r3, [r0, #12]
    69d8:	6013      	str	r3, [r2, #0]
}
    69da:	4770      	bx	lr

000069dc <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    69dc:	4770      	bx	lr
